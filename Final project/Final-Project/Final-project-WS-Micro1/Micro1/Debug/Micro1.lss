
Micro1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ee8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d8  00800060  00002ee8  00002f7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800138  00800138  00003054  2**0
                  ALLOC
  3 .stab         00002c4c  00000000  00000000  00003054  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012b5  00000000  00000000  00005ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006f55  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007095  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007205  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008e4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009d39  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000aae8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ac48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000aed5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b6a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 bc 14 	jmp	0x2978	; 0x2978 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 ef 14 	jmp	0x29de	; 0x29de <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ee       	ldi	r30, 0xE8	; 232
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 33       	cpi	r26, 0x38	; 56
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e3       	ldi	r26, 0x38	; 56
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 34       	cpi	r26, 0x43	; 67
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 72 17 	jmp	0x2ee4	; 0x2ee4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f6 16 	jmp	0x2dec	; 0x2dec <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e2       	ldi	r26, 0x23	; 35
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 12 17 	jmp	0x2e24	; 0x2e24 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 02 17 	jmp	0x2e04	; 0x2e04 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1e 17 	jmp	0x2e3c	; 0x2e3c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 02 17 	jmp	0x2e04	; 0x2e04 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1e 17 	jmp	0x2e3c	; 0x2e3c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f6 16 	jmp	0x2dec	; 0x2dec <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	83 e2       	ldi	r24, 0x23	; 35
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 12 17 	jmp	0x2e24	; 0x2e24 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 02 17 	jmp	0x2e04	; 0x2e04 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 1e 17 	jmp	0x2e3c	; 0x2e3c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 02 17 	jmp	0x2e04	; 0x2e04 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 1e 17 	jmp	0x2e3c	; 0x2e3c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 02 17 	jmp	0x2e04	; 0x2e04 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 1e 17 	jmp	0x2e3c	; 0x2e3c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 06 17 	jmp	0x2e0c	; 0x2e0c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 22 17 	jmp	0x2e44	; 0x2e44 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
void RePassword_display(void);
void change_Pass_Message(void);
/******************************************************************************
 *                         		Main Function                              *
 ******************************************************************************/
int main(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	66 97       	sbiw	r28, 0x16	; 22
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	SREG|=(1<<7); /*Enable I-bit*/
     b5a:	af e5       	ldi	r26, 0x5F	; 95
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	ef e5       	ldi	r30, 0x5F	; 95
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 68       	ori	r24, 0x80	; 128
     b66:	8c 93       	st	X, r24

	/*Initialization UART*/
	UART_ConfigType UART_Configuration ={9600,_8_BITS,DISABLED,_1_BIT};
     b68:	ce 01       	movw	r24, r28
     b6a:	01 96       	adiw	r24, 0x01	; 1
     b6c:	9e 87       	std	Y+14, r25	; 0x0e
     b6e:	8d 87       	std	Y+13, r24	; 0x0d
     b70:	e0 e3       	ldi	r30, 0x30	; 48
     b72:	f1 e0       	ldi	r31, 0x01	; 1
     b74:	f8 8b       	std	Y+16, r31	; 0x10
     b76:	ef 87       	std	Y+15, r30	; 0x0f
     b78:	f7 e0       	ldi	r31, 0x07	; 7
     b7a:	f9 8b       	std	Y+17, r31	; 0x11
     b7c:	ef 85       	ldd	r30, Y+15	; 0x0f
     b7e:	f8 89       	ldd	r31, Y+16	; 0x10
     b80:	00 80       	ld	r0, Z
     b82:	8f 85       	ldd	r24, Y+15	; 0x0f
     b84:	98 89       	ldd	r25, Y+16	; 0x10
     b86:	01 96       	adiw	r24, 0x01	; 1
     b88:	98 8b       	std	Y+16, r25	; 0x10
     b8a:	8f 87       	std	Y+15, r24	; 0x0f
     b8c:	ed 85       	ldd	r30, Y+13	; 0x0d
     b8e:	fe 85       	ldd	r31, Y+14	; 0x0e
     b90:	00 82       	st	Z, r0
     b92:	8d 85       	ldd	r24, Y+13	; 0x0d
     b94:	9e 85       	ldd	r25, Y+14	; 0x0e
     b96:	01 96       	adiw	r24, 0x01	; 1
     b98:	9e 87       	std	Y+14, r25	; 0x0e
     b9a:	8d 87       	std	Y+13, r24	; 0x0d
     b9c:	99 89       	ldd	r25, Y+17	; 0x11
     b9e:	91 50       	subi	r25, 0x01	; 1
     ba0:	99 8b       	std	Y+17, r25	; 0x11
     ba2:	e9 89       	ldd	r30, Y+17	; 0x11
     ba4:	ee 23       	and	r30, r30
     ba6:	51 f7       	brne	.-44     	; 0xb7c <main+0x36>
	UART_init(&UART_Configuration);
     ba8:	ce 01       	movw	r24, r28
     baa:	01 96       	adiw	r24, 0x01	; 1
     bac:	0e 94 92 15 	call	0x2b24	; 0x2b24 <UART_init>

	/*Initialization The timer*/
	TIMER_ConfigType Timer_Configuration={F_CPU_1024,Compare_Mode,0,2900};
     bb0:	ce 01       	movw	r24, r28
     bb2:	08 96       	adiw	r24, 0x08	; 8
     bb4:	9b 8b       	std	Y+19, r25	; 0x13
     bb6:	8a 8b       	std	Y+18, r24	; 0x12
     bb8:	eb e2       	ldi	r30, 0x2B	; 43
     bba:	f1 e0       	ldi	r31, 0x01	; 1
     bbc:	fd 8b       	std	Y+21, r31	; 0x15
     bbe:	ec 8b       	std	Y+20, r30	; 0x14
     bc0:	f5 e0       	ldi	r31, 0x05	; 5
     bc2:	fe 8b       	std	Y+22, r31	; 0x16
     bc4:	ec 89       	ldd	r30, Y+20	; 0x14
     bc6:	fd 89       	ldd	r31, Y+21	; 0x15
     bc8:	00 80       	ld	r0, Z
     bca:	8c 89       	ldd	r24, Y+20	; 0x14
     bcc:	9d 89       	ldd	r25, Y+21	; 0x15
     bce:	01 96       	adiw	r24, 0x01	; 1
     bd0:	9d 8b       	std	Y+21, r25	; 0x15
     bd2:	8c 8b       	std	Y+20, r24	; 0x14
     bd4:	ea 89       	ldd	r30, Y+18	; 0x12
     bd6:	fb 89       	ldd	r31, Y+19	; 0x13
     bd8:	00 82       	st	Z, r0
     bda:	8a 89       	ldd	r24, Y+18	; 0x12
     bdc:	9b 89       	ldd	r25, Y+19	; 0x13
     bde:	01 96       	adiw	r24, 0x01	; 1
     be0:	9b 8b       	std	Y+19, r25	; 0x13
     be2:	8a 8b       	std	Y+18, r24	; 0x12
     be4:	9e 89       	ldd	r25, Y+22	; 0x16
     be6:	91 50       	subi	r25, 0x01	; 1
     be8:	9e 8b       	std	Y+22, r25	; 0x16
     bea:	ee 89       	ldd	r30, Y+22	; 0x16
     bec:	ee 23       	and	r30, r30
     bee:	51 f7       	brne	.-44     	; 0xbc4 <main+0x7e>
	Timer0_init(&Timer_Configuration);
     bf0:	ce 01       	movw	r24, r28
     bf2:	08 96       	adiw	r24, 0x08	; 8
     bf4:	0e 94 22 15 	call	0x2a44	; 0x2a44 <Timer0_init>
	Timer0_SetCallBack(Timer0_callBack);
     bf8:	81 e7       	ldi	r24, 0x71	; 113
     bfa:	96 e0       	ldi	r25, 0x06	; 6
     bfc:	0e 94 80 15 	call	0x2b00	; 0x2b00 <Timer0_SetCallBack>

	/*Initialization The LCD*/
	LCD_init();
     c00:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <LCD_init>

	/*Setting the password for the first time*/
	Password_Setting();
     c04:	0e 94 81 06 	call	0xd02	; 0xd02 <Password_Setting>

	while(1){
		/*display for opening the door or change password*/
		Main_Options_Display();
     c08:	0e 94 2c 09 	call	0x1258	; 0x1258 <Main_Options_Display>

		Keypad_pressed_Key = 0 ;
     c0c:	10 92 38 01 	sts	0x0138, r1
     c10:	04 c0       	rjmp	.+8      	; 0xc1a <main+0xd4>

		/*check for '+' is pressed or '-' */
		while((Keypad_pressed_Key != OPEN_DOOR_SYMBOL)&&(Keypad_pressed_Key != CHANGE_PASS_SYMBOL)){
			Keypad_pressed_Key = KEYPAD_getPressedKey();
     c12:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <KEYPAD_getPressedKey>
     c16:	80 93 38 01 	sts	0x0138, r24
		Main_Options_Display();

		Keypad_pressed_Key = 0 ;

		/*check for '+' is pressed or '-' */
		while((Keypad_pressed_Key != OPEN_DOOR_SYMBOL)&&(Keypad_pressed_Key != CHANGE_PASS_SYMBOL)){
     c1a:	80 91 38 01 	lds	r24, 0x0138
     c1e:	8b 32       	cpi	r24, 0x2B	; 43
     c20:	21 f0       	breq	.+8      	; 0xc2a <main+0xe4>
     c22:	80 91 38 01 	lds	r24, 0x0138
     c26:	8d 32       	cpi	r24, 0x2D	; 45
     c28:	a1 f7       	brne	.-24     	; 0xc12 <main+0xcc>
			Keypad_pressed_Key = KEYPAD_getPressedKey();
		}

		/*check if '+' is selected for open the door*/
		if (Keypad_pressed_Key == OPEN_DOOR_SYMBOL){
     c2a:	80 91 38 01 	lds	r24, 0x0138
     c2e:	8b 32       	cpi	r24, 0x2B	; 43
     c30:	39 f5       	brne	.+78     	; 0xc80 <main+0x13a>
			Enter_Pass_Message();
     c32:	0e 94 83 0b 	call	0x1706	; 0x1706 <Enter_Pass_Message>

			/*Enter the password*/
			Get_Password(Entered_Password,PASSWORD_LONG);
     c36:	8e e3       	ldi	r24, 0x3E	; 62
     c38:	91 e0       	ldi	r25, 0x01	; 1
     c3a:	65 e0       	ldi	r22, 0x05	; 5
     c3c:	0e 94 36 07 	call	0xe6c	; 0xe6c <Get_Password>

			/*send the password to MC2 for checking it*/
			Send_Password(Entered_Password);
     c40:	8e e3       	ldi	r24, 0x3E	; 62
     c42:	91 e0       	ldi	r25, 0x01	; 1
     c44:	0e 94 4e 08 	call	0x109c	; 0x109c <Send_Password>

			/*send the option to MC2*/
			UART_sendByte(OPEN_DOOR_SYMBOL);
     c48:	8b e2       	ldi	r24, 0x2B	; 43
     c4a:	0e 94 42 16 	call	0x2c84	; 0x2c84 <UART_sendByte>

			/*Receive the state of the entered password from MC2*/
			UART_Received_Byte = UART_recieveByte();
     c4e:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <UART_recieveByte>
     c52:	80 93 39 01 	sts	0x0139, r24

			/*check the states of the entered password*/
			if (UART_Received_Byte == PASSWORD_MATCH){
     c56:	80 91 39 01 	lds	r24, 0x0139
     c5a:	81 30       	cpi	r24, 0x01	; 1
     c5c:	19 f4       	brne	.+6      	; 0xc64 <main+0x11e>
				Opening_the_Door();
     c5e:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <Opening_the_Door>
     c62:	d2 cf       	rjmp	.-92     	; 0xc08 <main+0xc2>
			}
			else if(UART_Received_Byte  == PASSWORD_UNMATCH){
     c64:	80 91 39 01 	lds	r24, 0x0139
     c68:	88 23       	and	r24, r24
     c6a:	19 f4       	brne	.+6      	; 0xc72 <main+0x12c>
				Wrong_Password_Message();
     c6c:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <Wrong_Password_Message>
     c70:	cb cf       	rjmp	.-106    	; 0xc08 <main+0xc2>
			}
			else if(UART_Received_Byte  == DANGER){
     c72:	80 91 39 01 	lds	r24, 0x0139
     c76:	89 30       	cpi	r24, 0x09	; 9
     c78:	39 f6       	brne	.-114    	; 0xc08 <main+0xc2>
				Warning_Message();
     c7a:	0e 94 6d 0a 	call	0x14da	; 0x14da <Warning_Message>
     c7e:	c4 cf       	rjmp	.-120    	; 0xc08 <main+0xc2>
			}
		}

		/*check if '-' is selected for change the password*/
		else if(Keypad_pressed_Key == CHANGE_PASS_SYMBOL){
     c80:	80 91 38 01 	lds	r24, 0x0138
     c84:	8d 32       	cpi	r24, 0x2D	; 45
     c86:	09 f0       	breq	.+2      	; 0xc8a <main+0x144>
     c88:	bf cf       	rjmp	.-130    	; 0xc08 <main+0xc2>
			Enter_Pass_Message();
     c8a:	0e 94 83 0b 	call	0x1706	; 0x1706 <Enter_Pass_Message>

			/*Enter the password*/
			Get_Password(Entered_Password,PASSWORD_LONG);
     c8e:	8e e3       	ldi	r24, 0x3E	; 62
     c90:	91 e0       	ldi	r25, 0x01	; 1
     c92:	65 e0       	ldi	r22, 0x05	; 5
     c94:	0e 94 36 07 	call	0xe6c	; 0xe6c <Get_Password>

			/*send the password to MC2 for checking it*/
			Send_Password(Entered_Password);
     c98:	8e e3       	ldi	r24, 0x3E	; 62
     c9a:	91 e0       	ldi	r25, 0x01	; 1
     c9c:	0e 94 4e 08 	call	0x109c	; 0x109c <Send_Password>

			/*send the option to MC2*/
			UART_sendByte(CHANGE_PASS_SYMBOL);
     ca0:	8d e2       	ldi	r24, 0x2D	; 45
     ca2:	0e 94 42 16 	call	0x2c84	; 0x2c84 <UART_sendByte>

			/*Receive the state of the entered password from MC2*/
			UART_Received_Byte = UART_recieveByte();
     ca6:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <UART_recieveByte>
     caa:	80 93 39 01 	sts	0x0139, r24

			/*check the states of the entered password*/
			if (UART_Received_Byte == PASSWORD_MATCH){
     cae:	80 91 39 01 	lds	r24, 0x0139
     cb2:	81 30       	cpi	r24, 0x01	; 1
     cb4:	39 f4       	brne	.+14     	; 0xcc4 <main+0x17e>
				LCD_clearScreen();
     cb6:	0e 94 b2 14 	call	0x2964	; 0x2964 <LCD_clearScreen>
				change_Pass_Message();
     cba:	0e 94 b1 0b 	call	0x1762	; 0x1762 <change_Pass_Message>
				Password_Setting();
     cbe:	0e 94 81 06 	call	0xd02	; 0xd02 <Password_Setting>
     cc2:	a2 cf       	rjmp	.-188    	; 0xc08 <main+0xc2>
			}
			else if (UART_Received_Byte == PASSWORD_UNMATCH){
     cc4:	80 91 39 01 	lds	r24, 0x0139
     cc8:	88 23       	and	r24, r24
     cca:	19 f4       	brne	.+6      	; 0xcd2 <main+0x18c>
				Wrong_Password_Message();
     ccc:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <Wrong_Password_Message>
     cd0:	9b cf       	rjmp	.-202    	; 0xc08 <main+0xc2>
			}
			else if (UART_Received_Byte  == DANGER){
     cd2:	80 91 39 01 	lds	r24, 0x0139
     cd6:	89 30       	cpi	r24, 0x09	; 9
     cd8:	09 f0       	breq	.+2      	; 0xcdc <main+0x196>
     cda:	96 cf       	rjmp	.-212    	; 0xc08 <main+0xc2>
				Warning_Message();
     cdc:	0e 94 6d 0a 	call	0x14da	; 0x14da <Warning_Message>
     ce0:	93 cf       	rjmp	.-218    	; 0xc08 <main+0xc2>

00000ce2 <Timer0_callBack>:
/*******************************************************************************
 *                         	Functions Definitions                      		   *
 *******************************************************************************/

/*timer counter*/
void Timer0_callBack(void){
     ce2:	df 93       	push	r29
     ce4:	cf 93       	push	r28
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;
     cea:	80 91 3a 01 	lds	r24, 0x013A
     cee:	90 91 3b 01 	lds	r25, 0x013B
     cf2:	01 96       	adiw	r24, 0x01	; 1
     cf4:	90 93 3b 01 	sts	0x013B, r25
     cf8:	80 93 3a 01 	sts	0x013A, r24
}
     cfc:	cf 91       	pop	r28
     cfe:	df 91       	pop	r29
     d00:	08 95       	ret

00000d02 <Password_Setting>:
/********************************************************************************/

/*password Setting*/
void Password_Setting(void){
     d02:	df 93       	push	r29
     d04:	cf 93       	push	r28
     d06:	cd b7       	in	r28, 0x3d	; 61
     d08:	de b7       	in	r29, 0x3e	; 62
     d0a:	69 97       	sbiw	r28, 0x19	; 25
     d0c:	0f b6       	in	r0, 0x3f	; 63
     d0e:	f8 94       	cli
     d10:	de bf       	out	0x3e, r29	; 62
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	cd bf       	out	0x3d, r28	; 61

	/*variable to save password For confirming*/
	uint8 Re_Entered_Password[PASSWORD_LONG];

	/*State of the two entered password*/
	uint8 pass_state = PASSWORD_UNMATCH;
     d16:	1f 86       	std	Y+15, r1	; 0x0f
     d18:	9c c0       	rjmp	.+312    	; 0xe52 <Password_Setting+0x150>

	/*loop until Password is matched */
	while(pass_state == PASSWORD_UNMATCH){

		/*Entering the first password*/
		Enter_Pass_Message();
     d1a:	0e 94 83 0b 	call	0x1706	; 0x1706 <Enter_Pass_Message>
		Get_Password (Password,PASSWORD_LONG);
     d1e:	ce 01       	movw	r24, r28
     d20:	40 96       	adiw	r24, 0x10	; 16
     d22:	65 e0       	ldi	r22, 0x05	; 5
     d24:	0e 94 36 07 	call	0xe6c	; 0xe6c <Get_Password>
		Send_Password(Password);
     d28:	ce 01       	movw	r24, r28
     d2a:	40 96       	adiw	r24, 0x10	; 16
     d2c:	0e 94 4e 08 	call	0x109c	; 0x109c <Send_Password>
     d30:	80 e0       	ldi	r24, 0x00	; 0
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	a8 e4       	ldi	r26, 0x48	; 72
     d36:	b3 e4       	ldi	r27, 0x43	; 67
     d38:	8b 87       	std	Y+11, r24	; 0x0b
     d3a:	9c 87       	std	Y+12, r25	; 0x0c
     d3c:	ad 87       	std	Y+13, r26	; 0x0d
     d3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d40:	6b 85       	ldd	r22, Y+11	; 0x0b
     d42:	7c 85       	ldd	r23, Y+12	; 0x0c
     d44:	8d 85       	ldd	r24, Y+13	; 0x0d
     d46:	9e 85       	ldd	r25, Y+14	; 0x0e
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	4a e7       	ldi	r20, 0x7A	; 122
     d4e:	53 e4       	ldi	r21, 0x43	; 67
     d50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d54:	dc 01       	movw	r26, r24
     d56:	cb 01       	movw	r24, r22
     d58:	8f 83       	std	Y+7, r24	; 0x07
     d5a:	98 87       	std	Y+8, r25	; 0x08
     d5c:	a9 87       	std	Y+9, r26	; 0x09
     d5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d60:	6f 81       	ldd	r22, Y+7	; 0x07
     d62:	78 85       	ldd	r23, Y+8	; 0x08
     d64:	89 85       	ldd	r24, Y+9	; 0x09
     d66:	9a 85       	ldd	r25, Y+10	; 0x0a
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	40 e8       	ldi	r20, 0x80	; 128
     d6e:	5f e3       	ldi	r21, 0x3F	; 63
     d70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d74:	88 23       	and	r24, r24
     d76:	2c f4       	brge	.+10     	; 0xd82 <Password_Setting+0x80>
		__ticks = 1;
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	9e 83       	std	Y+6, r25	; 0x06
     d7e:	8d 83       	std	Y+5, r24	; 0x05
     d80:	3f c0       	rjmp	.+126    	; 0xe00 <Password_Setting+0xfe>
	else if (__tmp > 65535)
     d82:	6f 81       	ldd	r22, Y+7	; 0x07
     d84:	78 85       	ldd	r23, Y+8	; 0x08
     d86:	89 85       	ldd	r24, Y+9	; 0x09
     d88:	9a 85       	ldd	r25, Y+10	; 0x0a
     d8a:	20 e0       	ldi	r18, 0x00	; 0
     d8c:	3f ef       	ldi	r19, 0xFF	; 255
     d8e:	4f e7       	ldi	r20, 0x7F	; 127
     d90:	57 e4       	ldi	r21, 0x47	; 71
     d92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d96:	18 16       	cp	r1, r24
     d98:	4c f5       	brge	.+82     	; 0xdec <Password_Setting+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d9a:	6b 85       	ldd	r22, Y+11	; 0x0b
     d9c:	7c 85       	ldd	r23, Y+12	; 0x0c
     d9e:	8d 85       	ldd	r24, Y+13	; 0x0d
     da0:	9e 85       	ldd	r25, Y+14	; 0x0e
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	40 e2       	ldi	r20, 0x20	; 32
     da8:	51 e4       	ldi	r21, 0x41	; 65
     daa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dae:	dc 01       	movw	r26, r24
     db0:	cb 01       	movw	r24, r22
     db2:	bc 01       	movw	r22, r24
     db4:	cd 01       	movw	r24, r26
     db6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dba:	dc 01       	movw	r26, r24
     dbc:	cb 01       	movw	r24, r22
     dbe:	9e 83       	std	Y+6, r25	; 0x06
     dc0:	8d 83       	std	Y+5, r24	; 0x05
     dc2:	0f c0       	rjmp	.+30     	; 0xde2 <Password_Setting+0xe0>
     dc4:	89 e1       	ldi	r24, 0x19	; 25
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	9c 83       	std	Y+4, r25	; 0x04
     dca:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dcc:	8b 81       	ldd	r24, Y+3	; 0x03
     dce:	9c 81       	ldd	r25, Y+4	; 0x04
     dd0:	01 97       	sbiw	r24, 0x01	; 1
     dd2:	f1 f7       	brne	.-4      	; 0xdd0 <Password_Setting+0xce>
     dd4:	9c 83       	std	Y+4, r25	; 0x04
     dd6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dd8:	8d 81       	ldd	r24, Y+5	; 0x05
     dda:	9e 81       	ldd	r25, Y+6	; 0x06
     ddc:	01 97       	sbiw	r24, 0x01	; 1
     dde:	9e 83       	std	Y+6, r25	; 0x06
     de0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     de2:	8d 81       	ldd	r24, Y+5	; 0x05
     de4:	9e 81       	ldd	r25, Y+6	; 0x06
     de6:	00 97       	sbiw	r24, 0x00	; 0
     de8:	69 f7       	brne	.-38     	; 0xdc4 <Password_Setting+0xc2>
     dea:	14 c0       	rjmp	.+40     	; 0xe14 <Password_Setting+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dec:	6f 81       	ldd	r22, Y+7	; 0x07
     dee:	78 85       	ldd	r23, Y+8	; 0x08
     df0:	89 85       	ldd	r24, Y+9	; 0x09
     df2:	9a 85       	ldd	r25, Y+10	; 0x0a
     df4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     df8:	dc 01       	movw	r26, r24
     dfa:	cb 01       	movw	r24, r22
     dfc:	9e 83       	std	Y+6, r25	; 0x06
     dfe:	8d 83       	std	Y+5, r24	; 0x05
     e00:	8d 81       	ldd	r24, Y+5	; 0x05
     e02:	9e 81       	ldd	r25, Y+6	; 0x06
     e04:	9a 83       	std	Y+2, r25	; 0x02
     e06:	89 83       	std	Y+1, r24	; 0x01
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	9a 81       	ldd	r25, Y+2	; 0x02
     e0c:	01 97       	sbiw	r24, 0x01	; 1
     e0e:	f1 f7       	brne	.-4      	; 0xe0c <Password_Setting+0x10a>
     e10:	9a 83       	std	Y+2, r25	; 0x02
     e12:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(200);

		/*Confirming the first password*/
		RePassword_display();
     e14:	0e 94 9a 0b 	call	0x1734	; 0x1734 <RePassword_display>
		Get_Password(Re_Entered_Password,PASSWORD_LONG);
     e18:	ce 01       	movw	r24, r28
     e1a:	45 96       	adiw	r24, 0x15	; 21
     e1c:	65 e0       	ldi	r22, 0x05	; 5
     e1e:	0e 94 36 07 	call	0xe6c	; 0xe6c <Get_Password>
		Send_Password(Re_Entered_Password);
     e22:	ce 01       	movw	r24, r28
     e24:	45 96       	adiw	r24, 0x15	; 21
     e26:	0e 94 4e 08 	call	0x109c	; 0x109c <Send_Password>

		/*Waiting MC2 to check if the two password are the same*/
		while(UART_recieveByte()!=READY_TO_COMMUNICATE);
     e2a:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <UART_recieveByte>
     e2e:	80 38       	cpi	r24, 0x80	; 128
     e30:	e1 f7       	brne	.-8      	; 0xe2a <Password_Setting+0x128>

		/*check for Matched passwords receive 1 else receive 0 from MC2*/
		/*save the check in pass_state*/
		pass_state = UART_recieveByte();
     e32:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <UART_recieveByte>
     e36:	8f 87       	std	Y+15, r24	; 0x0f

		/*check the state of the entered password*/
		if (pass_state==PASSWORD_MATCH){
     e38:	8f 85       	ldd	r24, Y+15	; 0x0f
     e3a:	81 30       	cpi	r24, 0x01	; 1
     e3c:	19 f4       	brne	.+6      	; 0xe44 <Password_Setting+0x142>
			PASS_matched_Message();
     e3e:	0e 94 43 09 	call	0x1286	; 0x1286 <PASS_matched_Message>
     e42:	05 c0       	rjmp	.+10     	; 0xe4e <Password_Setting+0x14c>
		}
		else if (pass_state==PASSWORD_UNMATCH){
     e44:	8f 85       	ldd	r24, Y+15	; 0x0f
     e46:	88 23       	and	r24, r24
     e48:	11 f4       	brne	.+4      	; 0xe4e <Password_Setting+0x14c>
			Wrong_Password_Message();
     e4a:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <Wrong_Password_Message>
		}
		LCD_clearScreen();
     e4e:	0e 94 b2 14 	call	0x2964	; 0x2964 <LCD_clearScreen>

	/*State of the two entered password*/
	uint8 pass_state = PASSWORD_UNMATCH;

	/*loop until Password is matched */
	while(pass_state == PASSWORD_UNMATCH){
     e52:	8f 85       	ldd	r24, Y+15	; 0x0f
     e54:	88 23       	and	r24, r24
     e56:	09 f4       	brne	.+2      	; 0xe5a <Password_Setting+0x158>
     e58:	60 cf       	rjmp	.-320    	; 0xd1a <Password_Setting+0x18>
		else if (pass_state==PASSWORD_UNMATCH){
			Wrong_Password_Message();
		}
		LCD_clearScreen();
	}
}
     e5a:	69 96       	adiw	r28, 0x19	; 25
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	f8 94       	cli
     e60:	de bf       	out	0x3e, r29	; 62
     e62:	0f be       	out	0x3f, r0	; 63
     e64:	cd bf       	out	0x3d, r28	; 61
     e66:	cf 91       	pop	r28
     e68:	df 91       	pop	r29
     e6a:	08 95       	ret

00000e6c <Get_Password>:
/*******************************************************************************/

/*save the password entered from keypad*/
void Get_Password (uint8* pass,uint8 size){
     e6c:	df 93       	push	r29
     e6e:	cf 93       	push	r28
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
     e74:	a1 97       	sbiw	r28, 0x21	; 33
     e76:	0f b6       	in	r0, 0x3f	; 63
     e78:	f8 94       	cli
     e7a:	de bf       	out	0x3e, r29	; 62
     e7c:	0f be       	out	0x3f, r0	; 63
     e7e:	cd bf       	out	0x3d, r28	; 61
     e80:	98 a3       	std	Y+32, r25	; 0x20
     e82:	8f 8f       	std	Y+31, r24	; 0x1f
     e84:	69 a3       	std	Y+33, r22	; 0x21
	uint8 key, i;

	/*loop for Receiving password from keypad and save it in the array*/
	for(i=0;i<size;i++){
     e86:	1d 8e       	std	Y+29, r1	; 0x1d
     e88:	f7 c0       	rjmp	.+494    	; 0x1078 <Get_Password+0x20c>
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	a8 e4       	ldi	r26, 0x48	; 72
     e90:	b3 e4       	ldi	r27, 0x43	; 67
     e92:	89 8f       	std	Y+25, r24	; 0x19
     e94:	9a 8f       	std	Y+26, r25	; 0x1a
     e96:	ab 8f       	std	Y+27, r26	; 0x1b
     e98:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e9a:	69 8d       	ldd	r22, Y+25	; 0x19
     e9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ea0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	4a e7       	ldi	r20, 0x7A	; 122
     ea8:	53 e4       	ldi	r21, 0x43	; 67
     eaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eae:	dc 01       	movw	r26, r24
     eb0:	cb 01       	movw	r24, r22
     eb2:	8d 8b       	std	Y+21, r24	; 0x15
     eb4:	9e 8b       	std	Y+22, r25	; 0x16
     eb6:	af 8b       	std	Y+23, r26	; 0x17
     eb8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     eba:	6d 89       	ldd	r22, Y+21	; 0x15
     ebc:	7e 89       	ldd	r23, Y+22	; 0x16
     ebe:	8f 89       	ldd	r24, Y+23	; 0x17
     ec0:	98 8d       	ldd	r25, Y+24	; 0x18
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	40 e8       	ldi	r20, 0x80	; 128
     ec8:	5f e3       	ldi	r21, 0x3F	; 63
     eca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ece:	88 23       	and	r24, r24
     ed0:	2c f4       	brge	.+10     	; 0xedc <Get_Password+0x70>
		__ticks = 1;
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	9c 8b       	std	Y+20, r25	; 0x14
     ed8:	8b 8b       	std	Y+19, r24	; 0x13
     eda:	3f c0       	rjmp	.+126    	; 0xf5a <Get_Password+0xee>
	else if (__tmp > 65535)
     edc:	6d 89       	ldd	r22, Y+21	; 0x15
     ede:	7e 89       	ldd	r23, Y+22	; 0x16
     ee0:	8f 89       	ldd	r24, Y+23	; 0x17
     ee2:	98 8d       	ldd	r25, Y+24	; 0x18
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	3f ef       	ldi	r19, 0xFF	; 255
     ee8:	4f e7       	ldi	r20, 0x7F	; 127
     eea:	57 e4       	ldi	r21, 0x47	; 71
     eec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ef0:	18 16       	cp	r1, r24
     ef2:	4c f5       	brge	.+82     	; 0xf46 <Get_Password+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ef4:	69 8d       	ldd	r22, Y+25	; 0x19
     ef6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ef8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     efa:	9c 8d       	ldd	r25, Y+28	; 0x1c
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	40 e2       	ldi	r20, 0x20	; 32
     f02:	51 e4       	ldi	r21, 0x41	; 65
     f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f08:	dc 01       	movw	r26, r24
     f0a:	cb 01       	movw	r24, r22
     f0c:	bc 01       	movw	r22, r24
     f0e:	cd 01       	movw	r24, r26
     f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f14:	dc 01       	movw	r26, r24
     f16:	cb 01       	movw	r24, r22
     f18:	9c 8b       	std	Y+20, r25	; 0x14
     f1a:	8b 8b       	std	Y+19, r24	; 0x13
     f1c:	0f c0       	rjmp	.+30     	; 0xf3c <Get_Password+0xd0>
     f1e:	89 e1       	ldi	r24, 0x19	; 25
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	9a 8b       	std	Y+18, r25	; 0x12
     f24:	89 8b       	std	Y+17, r24	; 0x11
     f26:	89 89       	ldd	r24, Y+17	; 0x11
     f28:	9a 89       	ldd	r25, Y+18	; 0x12
     f2a:	01 97       	sbiw	r24, 0x01	; 1
     f2c:	f1 f7       	brne	.-4      	; 0xf2a <Get_Password+0xbe>
     f2e:	9a 8b       	std	Y+18, r25	; 0x12
     f30:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f32:	8b 89       	ldd	r24, Y+19	; 0x13
     f34:	9c 89       	ldd	r25, Y+20	; 0x14
     f36:	01 97       	sbiw	r24, 0x01	; 1
     f38:	9c 8b       	std	Y+20, r25	; 0x14
     f3a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f3c:	8b 89       	ldd	r24, Y+19	; 0x13
     f3e:	9c 89       	ldd	r25, Y+20	; 0x14
     f40:	00 97       	sbiw	r24, 0x00	; 0
     f42:	69 f7       	brne	.-38     	; 0xf1e <Get_Password+0xb2>
     f44:	14 c0       	rjmp	.+40     	; 0xf6e <Get_Password+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f46:	6d 89       	ldd	r22, Y+21	; 0x15
     f48:	7e 89       	ldd	r23, Y+22	; 0x16
     f4a:	8f 89       	ldd	r24, Y+23	; 0x17
     f4c:	98 8d       	ldd	r25, Y+24	; 0x18
     f4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f52:	dc 01       	movw	r26, r24
     f54:	cb 01       	movw	r24, r22
     f56:	9c 8b       	std	Y+20, r25	; 0x14
     f58:	8b 8b       	std	Y+19, r24	; 0x13
     f5a:	8b 89       	ldd	r24, Y+19	; 0x13
     f5c:	9c 89       	ldd	r25, Y+20	; 0x14
     f5e:	98 8b       	std	Y+16, r25	; 0x10
     f60:	8f 87       	std	Y+15, r24	; 0x0f
     f62:	8f 85       	ldd	r24, Y+15	; 0x0f
     f64:	98 89       	ldd	r25, Y+16	; 0x10
     f66:	01 97       	sbiw	r24, 0x01	; 1
     f68:	f1 f7       	brne	.-4      	; 0xf66 <Get_Password+0xfa>
     f6a:	98 8b       	std	Y+16, r25	; 0x10
     f6c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(200);
		key = KEYPAD_getPressedKey();
     f6e:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <KEYPAD_getPressedKey>
     f72:	8e 8f       	std	Y+30, r24	; 0x1e
		LCD_displayCharacter('*');
     f74:	8a e2       	ldi	r24, 0x2A	; 42
     f76:	0e 94 16 12 	call	0x242c	; 0x242c <LCD_displayCharacter>
		pass[i] = key;
     f7a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f82:	98 a1       	ldd	r25, Y+32	; 0x20
     f84:	fc 01       	movw	r30, r24
     f86:	e2 0f       	add	r30, r18
     f88:	f3 1f       	adc	r31, r19
     f8a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f8c:	80 83       	st	Z, r24
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	a8 e4       	ldi	r26, 0x48	; 72
     f94:	b3 e4       	ldi	r27, 0x43	; 67
     f96:	8b 87       	std	Y+11, r24	; 0x0b
     f98:	9c 87       	std	Y+12, r25	; 0x0c
     f9a:	ad 87       	std	Y+13, r26	; 0x0d
     f9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f9e:	6b 85       	ldd	r22, Y+11	; 0x0b
     fa0:	7c 85       	ldd	r23, Y+12	; 0x0c
     fa2:	8d 85       	ldd	r24, Y+13	; 0x0d
     fa4:	9e 85       	ldd	r25, Y+14	; 0x0e
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	4a e7       	ldi	r20, 0x7A	; 122
     fac:	53 e4       	ldi	r21, 0x43	; 67
     fae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fb2:	dc 01       	movw	r26, r24
     fb4:	cb 01       	movw	r24, r22
     fb6:	8f 83       	std	Y+7, r24	; 0x07
     fb8:	98 87       	std	Y+8, r25	; 0x08
     fba:	a9 87       	std	Y+9, r26	; 0x09
     fbc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fbe:	6f 81       	ldd	r22, Y+7	; 0x07
     fc0:	78 85       	ldd	r23, Y+8	; 0x08
     fc2:	89 85       	ldd	r24, Y+9	; 0x09
     fc4:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	40 e8       	ldi	r20, 0x80	; 128
     fcc:	5f e3       	ldi	r21, 0x3F	; 63
     fce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fd2:	88 23       	and	r24, r24
     fd4:	2c f4       	brge	.+10     	; 0xfe0 <Get_Password+0x174>
		__ticks = 1;
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	9e 83       	std	Y+6, r25	; 0x06
     fdc:	8d 83       	std	Y+5, r24	; 0x05
     fde:	3f c0       	rjmp	.+126    	; 0x105e <Get_Password+0x1f2>
	else if (__tmp > 65535)
     fe0:	6f 81       	ldd	r22, Y+7	; 0x07
     fe2:	78 85       	ldd	r23, Y+8	; 0x08
     fe4:	89 85       	ldd	r24, Y+9	; 0x09
     fe6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	3f ef       	ldi	r19, 0xFF	; 255
     fec:	4f e7       	ldi	r20, 0x7F	; 127
     fee:	57 e4       	ldi	r21, 0x47	; 71
     ff0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ff4:	18 16       	cp	r1, r24
     ff6:	4c f5       	brge	.+82     	; 0x104a <Get_Password+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ff8:	6b 85       	ldd	r22, Y+11	; 0x0b
     ffa:	7c 85       	ldd	r23, Y+12	; 0x0c
     ffc:	8d 85       	ldd	r24, Y+13	; 0x0d
     ffe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	40 e2       	ldi	r20, 0x20	; 32
    1006:	51 e4       	ldi	r21, 0x41	; 65
    1008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    100c:	dc 01       	movw	r26, r24
    100e:	cb 01       	movw	r24, r22
    1010:	bc 01       	movw	r22, r24
    1012:	cd 01       	movw	r24, r26
    1014:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1018:	dc 01       	movw	r26, r24
    101a:	cb 01       	movw	r24, r22
    101c:	9e 83       	std	Y+6, r25	; 0x06
    101e:	8d 83       	std	Y+5, r24	; 0x05
    1020:	0f c0       	rjmp	.+30     	; 0x1040 <Get_Password+0x1d4>
    1022:	89 e1       	ldi	r24, 0x19	; 25
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	9c 83       	std	Y+4, r25	; 0x04
    1028:	8b 83       	std	Y+3, r24	; 0x03
    102a:	8b 81       	ldd	r24, Y+3	; 0x03
    102c:	9c 81       	ldd	r25, Y+4	; 0x04
    102e:	01 97       	sbiw	r24, 0x01	; 1
    1030:	f1 f7       	brne	.-4      	; 0x102e <Get_Password+0x1c2>
    1032:	9c 83       	std	Y+4, r25	; 0x04
    1034:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1036:	8d 81       	ldd	r24, Y+5	; 0x05
    1038:	9e 81       	ldd	r25, Y+6	; 0x06
    103a:	01 97       	sbiw	r24, 0x01	; 1
    103c:	9e 83       	std	Y+6, r25	; 0x06
    103e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1040:	8d 81       	ldd	r24, Y+5	; 0x05
    1042:	9e 81       	ldd	r25, Y+6	; 0x06
    1044:	00 97       	sbiw	r24, 0x00	; 0
    1046:	69 f7       	brne	.-38     	; 0x1022 <Get_Password+0x1b6>
    1048:	14 c0       	rjmp	.+40     	; 0x1072 <Get_Password+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    104a:	6f 81       	ldd	r22, Y+7	; 0x07
    104c:	78 85       	ldd	r23, Y+8	; 0x08
    104e:	89 85       	ldd	r24, Y+9	; 0x09
    1050:	9a 85       	ldd	r25, Y+10	; 0x0a
    1052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1056:	dc 01       	movw	r26, r24
    1058:	cb 01       	movw	r24, r22
    105a:	9e 83       	std	Y+6, r25	; 0x06
    105c:	8d 83       	std	Y+5, r24	; 0x05
    105e:	8d 81       	ldd	r24, Y+5	; 0x05
    1060:	9e 81       	ldd	r25, Y+6	; 0x06
    1062:	9a 83       	std	Y+2, r25	; 0x02
    1064:	89 83       	std	Y+1, r24	; 0x01
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	9a 81       	ldd	r25, Y+2	; 0x02
    106a:	01 97       	sbiw	r24, 0x01	; 1
    106c:	f1 f7       	brne	.-4      	; 0x106a <Get_Password+0x1fe>
    106e:	9a 83       	std	Y+2, r25	; 0x02
    1070:	89 83       	std	Y+1, r24	; 0x01
/*save the password entered from keypad*/
void Get_Password (uint8* pass,uint8 size){
	uint8 key, i;

	/*loop for Receiving password from keypad and save it in the array*/
	for(i=0;i<size;i++){
    1072:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1074:	8f 5f       	subi	r24, 0xFF	; 255
    1076:	8d 8f       	std	Y+29, r24	; 0x1d
    1078:	9d 8d       	ldd	r25, Y+29	; 0x1d
    107a:	89 a1       	ldd	r24, Y+33	; 0x21
    107c:	98 17       	cp	r25, r24
    107e:	08 f4       	brcc	.+2      	; 0x1082 <Get_Password+0x216>
    1080:	04 cf       	rjmp	.-504    	; 0xe8a <Get_Password+0x1e>
		pass[i] = key;
		_delay_ms(200);
	}

	/*for conform the password*/
	while(KEYPAD_getPressedKey() != ENTER);
    1082:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <KEYPAD_getPressedKey>
    1086:	8d 30       	cpi	r24, 0x0D	; 13
    1088:	e1 f7       	brne	.-8      	; 0x1082 <Get_Password+0x216>
}
    108a:	a1 96       	adiw	r28, 0x21	; 33
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	f8 94       	cli
    1090:	de bf       	out	0x3e, r29	; 62
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	cd bf       	out	0x3d, r28	; 61
    1096:	cf 91       	pop	r28
    1098:	df 91       	pop	r29
    109a:	08 95       	ret

0000109c <Send_Password>:
/*******************************************************************************/

/*Sending the password to MC2 using UART*/
void Send_Password (uint8* pass){
    109c:	df 93       	push	r29
    109e:	cf 93       	push	r28
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
    10a4:	61 97       	sbiw	r28, 0x11	; 17
    10a6:	0f b6       	in	r0, 0x3f	; 63
    10a8:	f8 94       	cli
    10aa:	de bf       	out	0x3e, r29	; 62
    10ac:	0f be       	out	0x3f, r0	; 63
    10ae:	cd bf       	out	0x3d, r28	; 61
    10b0:	99 8b       	std	Y+17, r25	; 0x11
    10b2:	88 8b       	std	Y+16, r24	; 0x10
	UART_sendByte(READY_TO_COMMUNICATE);
    10b4:	80 e8       	ldi	r24, 0x80	; 128
    10b6:	0e 94 42 16 	call	0x2c84	; 0x2c84 <UART_sendByte>

	while(UART_recieveByte() != READY_TO_COMMUNICATE);
    10ba:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <UART_recieveByte>
    10be:	80 38       	cpi	r24, 0x80	; 128
    10c0:	e1 f7       	brne	.-8      	; 0x10ba <Send_Password+0x1e>

	for (uint8 i=0;i<PASSWORD_LONG;i++)
    10c2:	1f 86       	std	Y+15, r1	; 0x0f
    10c4:	80 c0       	rjmp	.+256    	; 0x11c6 <Send_Password+0x12a>
	{
		UART_sendByte(pass[i]);
    10c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	88 89       	ldd	r24, Y+16	; 0x10
    10ce:	99 89       	ldd	r25, Y+17	; 0x11
    10d0:	fc 01       	movw	r30, r24
    10d2:	e2 0f       	add	r30, r18
    10d4:	f3 1f       	adc	r31, r19
    10d6:	80 81       	ld	r24, Z
    10d8:	0e 94 42 16 	call	0x2c84	; 0x2c84 <UART_sendByte>
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	a8 e4       	ldi	r26, 0x48	; 72
    10e2:	b2 e4       	ldi	r27, 0x42	; 66
    10e4:	8b 87       	std	Y+11, r24	; 0x0b
    10e6:	9c 87       	std	Y+12, r25	; 0x0c
    10e8:	ad 87       	std	Y+13, r26	; 0x0d
    10ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    10ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    10f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    10f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    10f4:	20 e0       	ldi	r18, 0x00	; 0
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	4a e7       	ldi	r20, 0x7A	; 122
    10fa:	53 e4       	ldi	r21, 0x43	; 67
    10fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1100:	dc 01       	movw	r26, r24
    1102:	cb 01       	movw	r24, r22
    1104:	8f 83       	std	Y+7, r24	; 0x07
    1106:	98 87       	std	Y+8, r25	; 0x08
    1108:	a9 87       	std	Y+9, r26	; 0x09
    110a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    110c:	6f 81       	ldd	r22, Y+7	; 0x07
    110e:	78 85       	ldd	r23, Y+8	; 0x08
    1110:	89 85       	ldd	r24, Y+9	; 0x09
    1112:	9a 85       	ldd	r25, Y+10	; 0x0a
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	40 e8       	ldi	r20, 0x80	; 128
    111a:	5f e3       	ldi	r21, 0x3F	; 63
    111c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1120:	88 23       	and	r24, r24
    1122:	2c f4       	brge	.+10     	; 0x112e <Send_Password+0x92>
		__ticks = 1;
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	9e 83       	std	Y+6, r25	; 0x06
    112a:	8d 83       	std	Y+5, r24	; 0x05
    112c:	3f c0       	rjmp	.+126    	; 0x11ac <Send_Password+0x110>
	else if (__tmp > 65535)
    112e:	6f 81       	ldd	r22, Y+7	; 0x07
    1130:	78 85       	ldd	r23, Y+8	; 0x08
    1132:	89 85       	ldd	r24, Y+9	; 0x09
    1134:	9a 85       	ldd	r25, Y+10	; 0x0a
    1136:	20 e0       	ldi	r18, 0x00	; 0
    1138:	3f ef       	ldi	r19, 0xFF	; 255
    113a:	4f e7       	ldi	r20, 0x7F	; 127
    113c:	57 e4       	ldi	r21, 0x47	; 71
    113e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1142:	18 16       	cp	r1, r24
    1144:	4c f5       	brge	.+82     	; 0x1198 <Send_Password+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1146:	6b 85       	ldd	r22, Y+11	; 0x0b
    1148:	7c 85       	ldd	r23, Y+12	; 0x0c
    114a:	8d 85       	ldd	r24, Y+13	; 0x0d
    114c:	9e 85       	ldd	r25, Y+14	; 0x0e
    114e:	20 e0       	ldi	r18, 0x00	; 0
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	40 e2       	ldi	r20, 0x20	; 32
    1154:	51 e4       	ldi	r21, 0x41	; 65
    1156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    115a:	dc 01       	movw	r26, r24
    115c:	cb 01       	movw	r24, r22
    115e:	bc 01       	movw	r22, r24
    1160:	cd 01       	movw	r24, r26
    1162:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1166:	dc 01       	movw	r26, r24
    1168:	cb 01       	movw	r24, r22
    116a:	9e 83       	std	Y+6, r25	; 0x06
    116c:	8d 83       	std	Y+5, r24	; 0x05
    116e:	0f c0       	rjmp	.+30     	; 0x118e <Send_Password+0xf2>
    1170:	89 e1       	ldi	r24, 0x19	; 25
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	9c 83       	std	Y+4, r25	; 0x04
    1176:	8b 83       	std	Y+3, r24	; 0x03
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	9c 81       	ldd	r25, Y+4	; 0x04
    117c:	01 97       	sbiw	r24, 0x01	; 1
    117e:	f1 f7       	brne	.-4      	; 0x117c <Send_Password+0xe0>
    1180:	9c 83       	std	Y+4, r25	; 0x04
    1182:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1184:	8d 81       	ldd	r24, Y+5	; 0x05
    1186:	9e 81       	ldd	r25, Y+6	; 0x06
    1188:	01 97       	sbiw	r24, 0x01	; 1
    118a:	9e 83       	std	Y+6, r25	; 0x06
    118c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    118e:	8d 81       	ldd	r24, Y+5	; 0x05
    1190:	9e 81       	ldd	r25, Y+6	; 0x06
    1192:	00 97       	sbiw	r24, 0x00	; 0
    1194:	69 f7       	brne	.-38     	; 0x1170 <Send_Password+0xd4>
    1196:	14 c0       	rjmp	.+40     	; 0x11c0 <Send_Password+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1198:	6f 81       	ldd	r22, Y+7	; 0x07
    119a:	78 85       	ldd	r23, Y+8	; 0x08
    119c:	89 85       	ldd	r24, Y+9	; 0x09
    119e:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a4:	dc 01       	movw	r26, r24
    11a6:	cb 01       	movw	r24, r22
    11a8:	9e 83       	std	Y+6, r25	; 0x06
    11aa:	8d 83       	std	Y+5, r24	; 0x05
    11ac:	8d 81       	ldd	r24, Y+5	; 0x05
    11ae:	9e 81       	ldd	r25, Y+6	; 0x06
    11b0:	9a 83       	std	Y+2, r25	; 0x02
    11b2:	89 83       	std	Y+1, r24	; 0x01
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	9a 81       	ldd	r25, Y+2	; 0x02
    11b8:	01 97       	sbiw	r24, 0x01	; 1
    11ba:	f1 f7       	brne	.-4      	; 0x11b8 <Send_Password+0x11c>
    11bc:	9a 83       	std	Y+2, r25	; 0x02
    11be:	89 83       	std	Y+1, r24	; 0x01
void Send_Password (uint8* pass){
	UART_sendByte(READY_TO_COMMUNICATE);

	while(UART_recieveByte() != READY_TO_COMMUNICATE);

	for (uint8 i=0;i<PASSWORD_LONG;i++)
    11c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    11c2:	8f 5f       	subi	r24, 0xFF	; 255
    11c4:	8f 87       	std	Y+15, r24	; 0x0f
    11c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    11c8:	85 30       	cpi	r24, 0x05	; 5
    11ca:	08 f4       	brcc	.+2      	; 0x11ce <Send_Password+0x132>
    11cc:	7c cf       	rjmp	.-264    	; 0x10c6 <Send_Password+0x2a>
	{
		UART_sendByte(pass[i]);
		_delay_ms(50);
	}
}
    11ce:	61 96       	adiw	r28, 0x11	; 17
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	f8 94       	cli
    11d4:	de bf       	out	0x3e, r29	; 62
    11d6:	0f be       	out	0x3f, r0	; 63
    11d8:	cd bf       	out	0x3d, r28	; 61
    11da:	cf 91       	pop	r28
    11dc:	df 91       	pop	r29
    11de:	08 95       	ret

000011e0 <Opening_the_Door>:
/*******************************************************************************/

/*Opening the door then holding it then closing it after a certain time*/
void Opening_the_Door(){
    11e0:	df 93       	push	r29
    11e2:	cf 93       	push	r28
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62

	/*Opening time*/
	LCD_clearScreen();
    11e8:	0e 94 b2 14 	call	0x2964	; 0x2964 <LCD_clearScreen>
	LCD_displayString("opening the Door");
    11ec:	80 e6       	ldi	r24, 0x60	; 96
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	0e 94 0b 14 	call	0x2816	; 0x2816 <LCD_displayString>
	g_ticks = 0;
    11f4:	10 92 3b 01 	sts	0x013B, r1
    11f8:	10 92 3a 01 	sts	0x013A, r1
	while (g_ticks<=Time_To_Open_The_Door);
    11fc:	80 91 3a 01 	lds	r24, 0x013A
    1200:	90 91 3b 01 	lds	r25, 0x013B
    1204:	80 31       	cpi	r24, 0x10	; 16
    1206:	91 05       	cpc	r25, r1
    1208:	c8 f3       	brcs	.-14     	; 0x11fc <Opening_the_Door+0x1c>

	/*Holding time*/
	LCD_clearScreen();
    120a:	0e 94 b2 14 	call	0x2964	; 0x2964 <LCD_clearScreen>
	LCD_displayString("Door is opened");
    120e:	81 e7       	ldi	r24, 0x71	; 113
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	0e 94 0b 14 	call	0x2816	; 0x2816 <LCD_displayString>
	g_ticks = 0;
    1216:	10 92 3b 01 	sts	0x013B, r1
    121a:	10 92 3a 01 	sts	0x013A, r1
	while (g_ticks<=Time_To_Hold_The_Door);
    121e:	80 91 3a 01 	lds	r24, 0x013A
    1222:	90 91 3b 01 	lds	r25, 0x013B
    1226:	84 30       	cpi	r24, 0x04	; 4
    1228:	91 05       	cpc	r25, r1
    122a:	c8 f3       	brcs	.-14     	; 0x121e <Opening_the_Door+0x3e>

	/*Closing time*/
	LCD_clearScreen();
    122c:	0e 94 b2 14 	call	0x2964	; 0x2964 <LCD_clearScreen>
	LCD_displayString("closing the Door");
    1230:	80 e8       	ldi	r24, 0x80	; 128
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	0e 94 0b 14 	call	0x2816	; 0x2816 <LCD_displayString>
	g_ticks = 0;
    1238:	10 92 3b 01 	sts	0x013B, r1
    123c:	10 92 3a 01 	sts	0x013A, r1
	while (g_ticks<=Time_To_Close_The_Door);
    1240:	80 91 3a 01 	lds	r24, 0x013A
    1244:	90 91 3b 01 	lds	r25, 0x013B
    1248:	80 31       	cpi	r24, 0x10	; 16
    124a:	91 05       	cpc	r25, r1
    124c:	c8 f3       	brcs	.-14     	; 0x1240 <Opening_the_Door+0x60>

	LCD_clearScreen();
    124e:	0e 94 b2 14 	call	0x2964	; 0x2964 <LCD_clearScreen>
}
    1252:	cf 91       	pop	r28
    1254:	df 91       	pop	r29
    1256:	08 95       	ret

00001258 <Main_Options_Display>:
/*******************************************************************************/
/*								LCD Display	Screen							   */
/*******************************************************************************/
void Main_Options_Display (void){
    1258:	df 93       	push	r29
    125a:	cf 93       	push	r28
    125c:	cd b7       	in	r28, 0x3d	; 61
    125e:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1260:	0e 94 b2 14 	call	0x2964	; 0x2964 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0," + : Open door");
    1264:	21 e9       	ldi	r18, 0x91	; 145
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	60 e0       	ldi	r22, 0x00	; 0
    126c:	a9 01       	movw	r20, r18
    126e:	0e 94 76 14 	call	0x28ec	; 0x28ec <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0," - : Change Pass");
    1272:	20 ea       	ldi	r18, 0xA0	; 160
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	60 e0       	ldi	r22, 0x00	; 0
    127a:	a9 01       	movw	r20, r18
    127c:	0e 94 76 14 	call	0x28ec	; 0x28ec <LCD_displayStringRowColumn>
}
    1280:	cf 91       	pop	r28
    1282:	df 91       	pop	r29
    1284:	08 95       	ret

00001286 <PASS_matched_Message>:
/*******************************************************************************/
void PASS_matched_Message(void){
    1286:	df 93       	push	r29
    1288:	cf 93       	push	r28
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
    128e:	2e 97       	sbiw	r28, 0x0e	; 14
    1290:	0f b6       	in	r0, 0x3f	; 63
    1292:	f8 94       	cli
    1294:	de bf       	out	0x3e, r29	; 62
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    129a:	0e 94 b2 14 	call	0x2964	; 0x2964 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,3,"Password");
    129e:	21 eb       	ldi	r18, 0xB1	; 177
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	63 e0       	ldi	r22, 0x03	; 3
    12a6:	a9 01       	movw	r20, r18
    12a8:	0e 94 76 14 	call	0x28ec	; 0x28ec <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,5,"Saved");
    12ac:	2a eb       	ldi	r18, 0xBA	; 186
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	65 e0       	ldi	r22, 0x05	; 5
    12b4:	a9 01       	movw	r20, r18
    12b6:	0e 94 76 14 	call	0x28ec	; 0x28ec <LCD_displayStringRowColumn>
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	90 e8       	ldi	r25, 0x80	; 128
    12be:	ab eb       	ldi	r26, 0xBB	; 187
    12c0:	b4 e4       	ldi	r27, 0x44	; 68
    12c2:	8b 87       	std	Y+11, r24	; 0x0b
    12c4:	9c 87       	std	Y+12, r25	; 0x0c
    12c6:	ad 87       	std	Y+13, r26	; 0x0d
    12c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    12cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    12ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    12d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	4a e7       	ldi	r20, 0x7A	; 122
    12d8:	53 e4       	ldi	r21, 0x43	; 67
    12da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12de:	dc 01       	movw	r26, r24
    12e0:	cb 01       	movw	r24, r22
    12e2:	8f 83       	std	Y+7, r24	; 0x07
    12e4:	98 87       	std	Y+8, r25	; 0x08
    12e6:	a9 87       	std	Y+9, r26	; 0x09
    12e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12ea:	6f 81       	ldd	r22, Y+7	; 0x07
    12ec:	78 85       	ldd	r23, Y+8	; 0x08
    12ee:	89 85       	ldd	r24, Y+9	; 0x09
    12f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	40 e8       	ldi	r20, 0x80	; 128
    12f8:	5f e3       	ldi	r21, 0x3F	; 63
    12fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12fe:	88 23       	and	r24, r24
    1300:	2c f4       	brge	.+10     	; 0x130c <PASS_matched_Message+0x86>
		__ticks = 1;
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	9e 83       	std	Y+6, r25	; 0x06
    1308:	8d 83       	std	Y+5, r24	; 0x05
    130a:	3f c0       	rjmp	.+126    	; 0x138a <PASS_matched_Message+0x104>
	else if (__tmp > 65535)
    130c:	6f 81       	ldd	r22, Y+7	; 0x07
    130e:	78 85       	ldd	r23, Y+8	; 0x08
    1310:	89 85       	ldd	r24, Y+9	; 0x09
    1312:	9a 85       	ldd	r25, Y+10	; 0x0a
    1314:	20 e0       	ldi	r18, 0x00	; 0
    1316:	3f ef       	ldi	r19, 0xFF	; 255
    1318:	4f e7       	ldi	r20, 0x7F	; 127
    131a:	57 e4       	ldi	r21, 0x47	; 71
    131c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1320:	18 16       	cp	r1, r24
    1322:	4c f5       	brge	.+82     	; 0x1376 <PASS_matched_Message+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1324:	6b 85       	ldd	r22, Y+11	; 0x0b
    1326:	7c 85       	ldd	r23, Y+12	; 0x0c
    1328:	8d 85       	ldd	r24, Y+13	; 0x0d
    132a:	9e 85       	ldd	r25, Y+14	; 0x0e
    132c:	20 e0       	ldi	r18, 0x00	; 0
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	40 e2       	ldi	r20, 0x20	; 32
    1332:	51 e4       	ldi	r21, 0x41	; 65
    1334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1338:	dc 01       	movw	r26, r24
    133a:	cb 01       	movw	r24, r22
    133c:	bc 01       	movw	r22, r24
    133e:	cd 01       	movw	r24, r26
    1340:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1344:	dc 01       	movw	r26, r24
    1346:	cb 01       	movw	r24, r22
    1348:	9e 83       	std	Y+6, r25	; 0x06
    134a:	8d 83       	std	Y+5, r24	; 0x05
    134c:	0f c0       	rjmp	.+30     	; 0x136c <PASS_matched_Message+0xe6>
    134e:	89 e1       	ldi	r24, 0x19	; 25
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	9c 83       	std	Y+4, r25	; 0x04
    1354:	8b 83       	std	Y+3, r24	; 0x03
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	9c 81       	ldd	r25, Y+4	; 0x04
    135a:	01 97       	sbiw	r24, 0x01	; 1
    135c:	f1 f7       	brne	.-4      	; 0x135a <PASS_matched_Message+0xd4>
    135e:	9c 83       	std	Y+4, r25	; 0x04
    1360:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1362:	8d 81       	ldd	r24, Y+5	; 0x05
    1364:	9e 81       	ldd	r25, Y+6	; 0x06
    1366:	01 97       	sbiw	r24, 0x01	; 1
    1368:	9e 83       	std	Y+6, r25	; 0x06
    136a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    136c:	8d 81       	ldd	r24, Y+5	; 0x05
    136e:	9e 81       	ldd	r25, Y+6	; 0x06
    1370:	00 97       	sbiw	r24, 0x00	; 0
    1372:	69 f7       	brne	.-38     	; 0x134e <PASS_matched_Message+0xc8>
    1374:	14 c0       	rjmp	.+40     	; 0x139e <PASS_matched_Message+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1376:	6f 81       	ldd	r22, Y+7	; 0x07
    1378:	78 85       	ldd	r23, Y+8	; 0x08
    137a:	89 85       	ldd	r24, Y+9	; 0x09
    137c:	9a 85       	ldd	r25, Y+10	; 0x0a
    137e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1382:	dc 01       	movw	r26, r24
    1384:	cb 01       	movw	r24, r22
    1386:	9e 83       	std	Y+6, r25	; 0x06
    1388:	8d 83       	std	Y+5, r24	; 0x05
    138a:	8d 81       	ldd	r24, Y+5	; 0x05
    138c:	9e 81       	ldd	r25, Y+6	; 0x06
    138e:	9a 83       	std	Y+2, r25	; 0x02
    1390:	89 83       	std	Y+1, r24	; 0x01
    1392:	89 81       	ldd	r24, Y+1	; 0x01
    1394:	9a 81       	ldd	r25, Y+2	; 0x02
    1396:	01 97       	sbiw	r24, 0x01	; 1
    1398:	f1 f7       	brne	.-4      	; 0x1396 <PASS_matched_Message+0x110>
    139a:	9a 83       	std	Y+2, r25	; 0x02
    139c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1500);
}
    139e:	2e 96       	adiw	r28, 0x0e	; 14
    13a0:	0f b6       	in	r0, 0x3f	; 63
    13a2:	f8 94       	cli
    13a4:	de bf       	out	0x3e, r29	; 62
    13a6:	0f be       	out	0x3f, r0	; 63
    13a8:	cd bf       	out	0x3d, r28	; 61
    13aa:	cf 91       	pop	r28
    13ac:	df 91       	pop	r29
    13ae:	08 95       	ret

000013b0 <Wrong_Password_Message>:
/*******************************************************************************/
void Wrong_Password_Message(void){
    13b0:	df 93       	push	r29
    13b2:	cf 93       	push	r28
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    13b8:	2e 97       	sbiw	r28, 0x0e	; 14
    13ba:	0f b6       	in	r0, 0x3f	; 63
    13bc:	f8 94       	cli
    13be:	de bf       	out	0x3e, r29	; 62
    13c0:	0f be       	out	0x3f, r0	; 63
    13c2:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    13c4:	0e 94 b2 14 	call	0x2964	; 0x2964 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,3,"Wrong pass");
    13c8:	20 ec       	ldi	r18, 0xC0	; 192
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	63 e0       	ldi	r22, 0x03	; 3
    13d0:	a9 01       	movw	r20, r18
    13d2:	0e 94 76 14 	call	0x28ec	; 0x28ec <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,3,"Try again");
    13d6:	2b ec       	ldi	r18, 0xCB	; 203
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	63 e0       	ldi	r22, 0x03	; 3
    13de:	a9 01       	movw	r20, r18
    13e0:	0e 94 76 14 	call	0x28ec	; 0x28ec <LCD_displayStringRowColumn>
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	90 e8       	ldi	r25, 0x80	; 128
    13e8:	ab eb       	ldi	r26, 0xBB	; 187
    13ea:	b4 e4       	ldi	r27, 0x44	; 68
    13ec:	8b 87       	std	Y+11, r24	; 0x0b
    13ee:	9c 87       	std	Y+12, r25	; 0x0c
    13f0:	ad 87       	std	Y+13, r26	; 0x0d
    13f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    13f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    13f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    13fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	4a e7       	ldi	r20, 0x7A	; 122
    1402:	53 e4       	ldi	r21, 0x43	; 67
    1404:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	8f 83       	std	Y+7, r24	; 0x07
    140e:	98 87       	std	Y+8, r25	; 0x08
    1410:	a9 87       	std	Y+9, r26	; 0x09
    1412:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1414:	6f 81       	ldd	r22, Y+7	; 0x07
    1416:	78 85       	ldd	r23, Y+8	; 0x08
    1418:	89 85       	ldd	r24, Y+9	; 0x09
    141a:	9a 85       	ldd	r25, Y+10	; 0x0a
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	40 e8       	ldi	r20, 0x80	; 128
    1422:	5f e3       	ldi	r21, 0x3F	; 63
    1424:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1428:	88 23       	and	r24, r24
    142a:	2c f4       	brge	.+10     	; 0x1436 <Wrong_Password_Message+0x86>
		__ticks = 1;
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	9e 83       	std	Y+6, r25	; 0x06
    1432:	8d 83       	std	Y+5, r24	; 0x05
    1434:	3f c0       	rjmp	.+126    	; 0x14b4 <Wrong_Password_Message+0x104>
	else if (__tmp > 65535)
    1436:	6f 81       	ldd	r22, Y+7	; 0x07
    1438:	78 85       	ldd	r23, Y+8	; 0x08
    143a:	89 85       	ldd	r24, Y+9	; 0x09
    143c:	9a 85       	ldd	r25, Y+10	; 0x0a
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	3f ef       	ldi	r19, 0xFF	; 255
    1442:	4f e7       	ldi	r20, 0x7F	; 127
    1444:	57 e4       	ldi	r21, 0x47	; 71
    1446:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    144a:	18 16       	cp	r1, r24
    144c:	4c f5       	brge	.+82     	; 0x14a0 <Wrong_Password_Message+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    144e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1450:	7c 85       	ldd	r23, Y+12	; 0x0c
    1452:	8d 85       	ldd	r24, Y+13	; 0x0d
    1454:	9e 85       	ldd	r25, Y+14	; 0x0e
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	40 e2       	ldi	r20, 0x20	; 32
    145c:	51 e4       	ldi	r21, 0x41	; 65
    145e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	bc 01       	movw	r22, r24
    1468:	cd 01       	movw	r24, r26
    146a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	9e 83       	std	Y+6, r25	; 0x06
    1474:	8d 83       	std	Y+5, r24	; 0x05
    1476:	0f c0       	rjmp	.+30     	; 0x1496 <Wrong_Password_Message+0xe6>
    1478:	89 e1       	ldi	r24, 0x19	; 25
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	9c 83       	std	Y+4, r25	; 0x04
    147e:	8b 83       	std	Y+3, r24	; 0x03
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	9c 81       	ldd	r25, Y+4	; 0x04
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	f1 f7       	brne	.-4      	; 0x1484 <Wrong_Password_Message+0xd4>
    1488:	9c 83       	std	Y+4, r25	; 0x04
    148a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    148c:	8d 81       	ldd	r24, Y+5	; 0x05
    148e:	9e 81       	ldd	r25, Y+6	; 0x06
    1490:	01 97       	sbiw	r24, 0x01	; 1
    1492:	9e 83       	std	Y+6, r25	; 0x06
    1494:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1496:	8d 81       	ldd	r24, Y+5	; 0x05
    1498:	9e 81       	ldd	r25, Y+6	; 0x06
    149a:	00 97       	sbiw	r24, 0x00	; 0
    149c:	69 f7       	brne	.-38     	; 0x1478 <Wrong_Password_Message+0xc8>
    149e:	14 c0       	rjmp	.+40     	; 0x14c8 <Wrong_Password_Message+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14a0:	6f 81       	ldd	r22, Y+7	; 0x07
    14a2:	78 85       	ldd	r23, Y+8	; 0x08
    14a4:	89 85       	ldd	r24, Y+9	; 0x09
    14a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	9e 83       	std	Y+6, r25	; 0x06
    14b2:	8d 83       	std	Y+5, r24	; 0x05
    14b4:	8d 81       	ldd	r24, Y+5	; 0x05
    14b6:	9e 81       	ldd	r25, Y+6	; 0x06
    14b8:	9a 83       	std	Y+2, r25	; 0x02
    14ba:	89 83       	std	Y+1, r24	; 0x01
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
    14be:	9a 81       	ldd	r25, Y+2	; 0x02
    14c0:	01 97       	sbiw	r24, 0x01	; 1
    14c2:	f1 f7       	brne	.-4      	; 0x14c0 <Wrong_Password_Message+0x110>
    14c4:	9a 83       	std	Y+2, r25	; 0x02
    14c6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1500);
}
    14c8:	2e 96       	adiw	r28, 0x0e	; 14
    14ca:	0f b6       	in	r0, 0x3f	; 63
    14cc:	f8 94       	cli
    14ce:	de bf       	out	0x3e, r29	; 62
    14d0:	0f be       	out	0x3f, r0	; 63
    14d2:	cd bf       	out	0x3d, r28	; 61
    14d4:	cf 91       	pop	r28
    14d6:	df 91       	pop	r29
    14d8:	08 95       	ret

000014da <Warning_Message>:
/*******************************************************************************/
void Warning_Message(void){
    14da:	df 93       	push	r29
    14dc:	cf 93       	push	r28
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
    14e2:	6c 97       	sbiw	r28, 0x1c	; 28
    14e4:	0f b6       	in	r0, 0x3f	; 63
    14e6:	f8 94       	cli
    14e8:	de bf       	out	0x3e, r29	; 62
    14ea:	0f be       	out	0x3f, r0	; 63
    14ec:	cd bf       	out	0x3d, r28	; 61
	g_ticks=0;
    14ee:	10 92 3b 01 	sts	0x013B, r1
    14f2:	10 92 3a 01 	sts	0x013A, r1
    14f6:	f6 c0       	rjmp	.+492    	; 0x16e4 <Warning_Message+0x20a>
	/*Flashing Warning massage*/
	while(g_ticks < Warning_Time ){
		LCD_clearScreen();
    14f8:	0e 94 b2 14 	call	0x2964	; 0x2964 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"    Warning     ");
    14fc:	25 ed       	ldi	r18, 0xD5	; 213
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	80 e0       	ldi	r24, 0x00	; 0
    1502:	60 e0       	ldi	r22, 0x00	; 0
    1504:	a9 01       	movw	r20, r18
    1506:	0e 94 76 14 	call	0x28ec	; 0x28ec <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,"  !!!!!!!!!!!!  ");
    150a:	26 ee       	ldi	r18, 0xE6	; 230
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	60 e0       	ldi	r22, 0x00	; 0
    1512:	a9 01       	movw	r20, r18
    1514:	0e 94 76 14 	call	0x28ec	; 0x28ec <LCD_displayStringRowColumn>
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	a6 e9       	ldi	r26, 0x96	; 150
    151e:	b3 e4       	ldi	r27, 0x43	; 67
    1520:	89 8f       	std	Y+25, r24	; 0x19
    1522:	9a 8f       	std	Y+26, r25	; 0x1a
    1524:	ab 8f       	std	Y+27, r26	; 0x1b
    1526:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1528:	69 8d       	ldd	r22, Y+25	; 0x19
    152a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    152c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    152e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	4a e7       	ldi	r20, 0x7A	; 122
    1536:	53 e4       	ldi	r21, 0x43	; 67
    1538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    153c:	dc 01       	movw	r26, r24
    153e:	cb 01       	movw	r24, r22
    1540:	8d 8b       	std	Y+21, r24	; 0x15
    1542:	9e 8b       	std	Y+22, r25	; 0x16
    1544:	af 8b       	std	Y+23, r26	; 0x17
    1546:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1548:	6d 89       	ldd	r22, Y+21	; 0x15
    154a:	7e 89       	ldd	r23, Y+22	; 0x16
    154c:	8f 89       	ldd	r24, Y+23	; 0x17
    154e:	98 8d       	ldd	r25, Y+24	; 0x18
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	40 e8       	ldi	r20, 0x80	; 128
    1556:	5f e3       	ldi	r21, 0x3F	; 63
    1558:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    155c:	88 23       	and	r24, r24
    155e:	2c f4       	brge	.+10     	; 0x156a <Warning_Message+0x90>
		__ticks = 1;
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	9c 8b       	std	Y+20, r25	; 0x14
    1566:	8b 8b       	std	Y+19, r24	; 0x13
    1568:	3f c0       	rjmp	.+126    	; 0x15e8 <Warning_Message+0x10e>
	else if (__tmp > 65535)
    156a:	6d 89       	ldd	r22, Y+21	; 0x15
    156c:	7e 89       	ldd	r23, Y+22	; 0x16
    156e:	8f 89       	ldd	r24, Y+23	; 0x17
    1570:	98 8d       	ldd	r25, Y+24	; 0x18
    1572:	20 e0       	ldi	r18, 0x00	; 0
    1574:	3f ef       	ldi	r19, 0xFF	; 255
    1576:	4f e7       	ldi	r20, 0x7F	; 127
    1578:	57 e4       	ldi	r21, 0x47	; 71
    157a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    157e:	18 16       	cp	r1, r24
    1580:	4c f5       	brge	.+82     	; 0x15d4 <Warning_Message+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1582:	69 8d       	ldd	r22, Y+25	; 0x19
    1584:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1586:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1588:	9c 8d       	ldd	r25, Y+28	; 0x1c
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	40 e2       	ldi	r20, 0x20	; 32
    1590:	51 e4       	ldi	r21, 0x41	; 65
    1592:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1596:	dc 01       	movw	r26, r24
    1598:	cb 01       	movw	r24, r22
    159a:	bc 01       	movw	r22, r24
    159c:	cd 01       	movw	r24, r26
    159e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15a2:	dc 01       	movw	r26, r24
    15a4:	cb 01       	movw	r24, r22
    15a6:	9c 8b       	std	Y+20, r25	; 0x14
    15a8:	8b 8b       	std	Y+19, r24	; 0x13
    15aa:	0f c0       	rjmp	.+30     	; 0x15ca <Warning_Message+0xf0>
    15ac:	89 e1       	ldi	r24, 0x19	; 25
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	9a 8b       	std	Y+18, r25	; 0x12
    15b2:	89 8b       	std	Y+17, r24	; 0x11
    15b4:	89 89       	ldd	r24, Y+17	; 0x11
    15b6:	9a 89       	ldd	r25, Y+18	; 0x12
    15b8:	01 97       	sbiw	r24, 0x01	; 1
    15ba:	f1 f7       	brne	.-4      	; 0x15b8 <Warning_Message+0xde>
    15bc:	9a 8b       	std	Y+18, r25	; 0x12
    15be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15c0:	8b 89       	ldd	r24, Y+19	; 0x13
    15c2:	9c 89       	ldd	r25, Y+20	; 0x14
    15c4:	01 97       	sbiw	r24, 0x01	; 1
    15c6:	9c 8b       	std	Y+20, r25	; 0x14
    15c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ca:	8b 89       	ldd	r24, Y+19	; 0x13
    15cc:	9c 89       	ldd	r25, Y+20	; 0x14
    15ce:	00 97       	sbiw	r24, 0x00	; 0
    15d0:	69 f7       	brne	.-38     	; 0x15ac <Warning_Message+0xd2>
    15d2:	14 c0       	rjmp	.+40     	; 0x15fc <Warning_Message+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15d4:	6d 89       	ldd	r22, Y+21	; 0x15
    15d6:	7e 89       	ldd	r23, Y+22	; 0x16
    15d8:	8f 89       	ldd	r24, Y+23	; 0x17
    15da:	98 8d       	ldd	r25, Y+24	; 0x18
    15dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e0:	dc 01       	movw	r26, r24
    15e2:	cb 01       	movw	r24, r22
    15e4:	9c 8b       	std	Y+20, r25	; 0x14
    15e6:	8b 8b       	std	Y+19, r24	; 0x13
    15e8:	8b 89       	ldd	r24, Y+19	; 0x13
    15ea:	9c 89       	ldd	r25, Y+20	; 0x14
    15ec:	98 8b       	std	Y+16, r25	; 0x10
    15ee:	8f 87       	std	Y+15, r24	; 0x0f
    15f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    15f2:	98 89       	ldd	r25, Y+16	; 0x10
    15f4:	01 97       	sbiw	r24, 0x01	; 1
    15f6:	f1 f7       	brne	.-4      	; 0x15f4 <Warning_Message+0x11a>
    15f8:	98 8b       	std	Y+16, r25	; 0x10
    15fa:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(300);
		LCD_clearScreen();
    15fc:	0e 94 b2 14 	call	0x2964	; 0x2964 <LCD_clearScreen>
    1600:	80 e0       	ldi	r24, 0x00	; 0
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	a8 e4       	ldi	r26, 0x48	; 72
    1606:	b3 e4       	ldi	r27, 0x43	; 67
    1608:	8b 87       	std	Y+11, r24	; 0x0b
    160a:	9c 87       	std	Y+12, r25	; 0x0c
    160c:	ad 87       	std	Y+13, r26	; 0x0d
    160e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1610:	6b 85       	ldd	r22, Y+11	; 0x0b
    1612:	7c 85       	ldd	r23, Y+12	; 0x0c
    1614:	8d 85       	ldd	r24, Y+13	; 0x0d
    1616:	9e 85       	ldd	r25, Y+14	; 0x0e
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	4a e7       	ldi	r20, 0x7A	; 122
    161e:	53 e4       	ldi	r21, 0x43	; 67
    1620:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1624:	dc 01       	movw	r26, r24
    1626:	cb 01       	movw	r24, r22
    1628:	8f 83       	std	Y+7, r24	; 0x07
    162a:	98 87       	std	Y+8, r25	; 0x08
    162c:	a9 87       	std	Y+9, r26	; 0x09
    162e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1630:	6f 81       	ldd	r22, Y+7	; 0x07
    1632:	78 85       	ldd	r23, Y+8	; 0x08
    1634:	89 85       	ldd	r24, Y+9	; 0x09
    1636:	9a 85       	ldd	r25, Y+10	; 0x0a
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	40 e8       	ldi	r20, 0x80	; 128
    163e:	5f e3       	ldi	r21, 0x3F	; 63
    1640:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1644:	88 23       	and	r24, r24
    1646:	2c f4       	brge	.+10     	; 0x1652 <Warning_Message+0x178>
		__ticks = 1;
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	9e 83       	std	Y+6, r25	; 0x06
    164e:	8d 83       	std	Y+5, r24	; 0x05
    1650:	3f c0       	rjmp	.+126    	; 0x16d0 <Warning_Message+0x1f6>
	else if (__tmp > 65535)
    1652:	6f 81       	ldd	r22, Y+7	; 0x07
    1654:	78 85       	ldd	r23, Y+8	; 0x08
    1656:	89 85       	ldd	r24, Y+9	; 0x09
    1658:	9a 85       	ldd	r25, Y+10	; 0x0a
    165a:	20 e0       	ldi	r18, 0x00	; 0
    165c:	3f ef       	ldi	r19, 0xFF	; 255
    165e:	4f e7       	ldi	r20, 0x7F	; 127
    1660:	57 e4       	ldi	r21, 0x47	; 71
    1662:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1666:	18 16       	cp	r1, r24
    1668:	4c f5       	brge	.+82     	; 0x16bc <Warning_Message+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    166a:	6b 85       	ldd	r22, Y+11	; 0x0b
    166c:	7c 85       	ldd	r23, Y+12	; 0x0c
    166e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1670:	9e 85       	ldd	r25, Y+14	; 0x0e
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	40 e2       	ldi	r20, 0x20	; 32
    1678:	51 e4       	ldi	r21, 0x41	; 65
    167a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    167e:	dc 01       	movw	r26, r24
    1680:	cb 01       	movw	r24, r22
    1682:	bc 01       	movw	r22, r24
    1684:	cd 01       	movw	r24, r26
    1686:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    168a:	dc 01       	movw	r26, r24
    168c:	cb 01       	movw	r24, r22
    168e:	9e 83       	std	Y+6, r25	; 0x06
    1690:	8d 83       	std	Y+5, r24	; 0x05
    1692:	0f c0       	rjmp	.+30     	; 0x16b2 <Warning_Message+0x1d8>
    1694:	89 e1       	ldi	r24, 0x19	; 25
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	9c 83       	std	Y+4, r25	; 0x04
    169a:	8b 83       	std	Y+3, r24	; 0x03
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	9c 81       	ldd	r25, Y+4	; 0x04
    16a0:	01 97       	sbiw	r24, 0x01	; 1
    16a2:	f1 f7       	brne	.-4      	; 0x16a0 <Warning_Message+0x1c6>
    16a4:	9c 83       	std	Y+4, r25	; 0x04
    16a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16a8:	8d 81       	ldd	r24, Y+5	; 0x05
    16aa:	9e 81       	ldd	r25, Y+6	; 0x06
    16ac:	01 97       	sbiw	r24, 0x01	; 1
    16ae:	9e 83       	std	Y+6, r25	; 0x06
    16b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16b2:	8d 81       	ldd	r24, Y+5	; 0x05
    16b4:	9e 81       	ldd	r25, Y+6	; 0x06
    16b6:	00 97       	sbiw	r24, 0x00	; 0
    16b8:	69 f7       	brne	.-38     	; 0x1694 <Warning_Message+0x1ba>
    16ba:	14 c0       	rjmp	.+40     	; 0x16e4 <Warning_Message+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16bc:	6f 81       	ldd	r22, Y+7	; 0x07
    16be:	78 85       	ldd	r23, Y+8	; 0x08
    16c0:	89 85       	ldd	r24, Y+9	; 0x09
    16c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c8:	dc 01       	movw	r26, r24
    16ca:	cb 01       	movw	r24, r22
    16cc:	9e 83       	std	Y+6, r25	; 0x06
    16ce:	8d 83       	std	Y+5, r24	; 0x05
    16d0:	8d 81       	ldd	r24, Y+5	; 0x05
    16d2:	9e 81       	ldd	r25, Y+6	; 0x06
    16d4:	9a 83       	std	Y+2, r25	; 0x02
    16d6:	89 83       	std	Y+1, r24	; 0x01
    16d8:	89 81       	ldd	r24, Y+1	; 0x01
    16da:	9a 81       	ldd	r25, Y+2	; 0x02
    16dc:	01 97       	sbiw	r24, 0x01	; 1
    16de:	f1 f7       	brne	.-4      	; 0x16dc <Warning_Message+0x202>
    16e0:	9a 83       	std	Y+2, r25	; 0x02
    16e2:	89 83       	std	Y+1, r24	; 0x01
}
/*******************************************************************************/
void Warning_Message(void){
	g_ticks=0;
	/*Flashing Warning massage*/
	while(g_ticks < Warning_Time ){
    16e4:	80 91 3a 01 	lds	r24, 0x013A
    16e8:	90 91 3b 01 	lds	r25, 0x013B
    16ec:	8c 33       	cpi	r24, 0x3C	; 60
    16ee:	91 05       	cpc	r25, r1
    16f0:	08 f4       	brcc	.+2      	; 0x16f4 <Warning_Message+0x21a>
    16f2:	02 cf       	rjmp	.-508    	; 0x14f8 <Warning_Message+0x1e>
		LCD_displayStringRowColumn(1,0,"  !!!!!!!!!!!!  ");
		_delay_ms(300);
		LCD_clearScreen();
		_delay_ms(200);
	}
}
    16f4:	6c 96       	adiw	r28, 0x1c	; 28
    16f6:	0f b6       	in	r0, 0x3f	; 63
    16f8:	f8 94       	cli
    16fa:	de bf       	out	0x3e, r29	; 62
    16fc:	0f be       	out	0x3f, r0	; 63
    16fe:	cd bf       	out	0x3d, r28	; 61
    1700:	cf 91       	pop	r28
    1702:	df 91       	pop	r29
    1704:	08 95       	ret

00001706 <Enter_Pass_Message>:
/*******************************************************************************/
void Enter_Pass_Message(void){
    1706:	df 93       	push	r29
    1708:	cf 93       	push	r28
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    170e:	0e 94 b2 14 	call	0x2964	; 0x2964 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Please enter ");
    1712:	27 ef       	ldi	r18, 0xF7	; 247
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	60 e0       	ldi	r22, 0x00	; 0
    171a:	a9 01       	movw	r20, r18
    171c:	0e 94 76 14 	call	0x28ec	; 0x28ec <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"Pass: ");
    1720:	25 e0       	ldi	r18, 0x05	; 5
    1722:	31 e0       	ldi	r19, 0x01	; 1
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	60 e0       	ldi	r22, 0x00	; 0
    1728:	a9 01       	movw	r20, r18
    172a:	0e 94 76 14 	call	0x28ec	; 0x28ec <LCD_displayStringRowColumn>
}
    172e:	cf 91       	pop	r28
    1730:	df 91       	pop	r29
    1732:	08 95       	ret

00001734 <RePassword_display>:
/*******************************************************************************/
void RePassword_display(void){
    1734:	df 93       	push	r29
    1736:	cf 93       	push	r28
    1738:	cd b7       	in	r28, 0x3d	; 61
    173a:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    173c:	0e 94 b2 14 	call	0x2964	; 0x2964 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"re-enter ");
    1740:	2c e0       	ldi	r18, 0x0C	; 12
    1742:	31 e0       	ldi	r19, 0x01	; 1
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	60 e0       	ldi	r22, 0x00	; 0
    1748:	a9 01       	movw	r20, r18
    174a:	0e 94 76 14 	call	0x28ec	; 0x28ec <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"Pass: ");
    174e:	25 e0       	ldi	r18, 0x05	; 5
    1750:	31 e0       	ldi	r19, 0x01	; 1
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	60 e0       	ldi	r22, 0x00	; 0
    1756:	a9 01       	movw	r20, r18
    1758:	0e 94 76 14 	call	0x28ec	; 0x28ec <LCD_displayStringRowColumn>
}
    175c:	cf 91       	pop	r28
    175e:	df 91       	pop	r29
    1760:	08 95       	ret

00001762 <change_Pass_Message>:
/*******************************************************************************/
void change_Pass_Message(void){
    1762:	df 93       	push	r29
    1764:	cf 93       	push	r28
    1766:	cd b7       	in	r28, 0x3d	; 61
    1768:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    176a:	0e 94 b2 14 	call	0x2964	; 0x2964 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"change pass ");
    176e:	26 e1       	ldi	r18, 0x16	; 22
    1770:	31 e0       	ldi	r19, 0x01	; 1
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	60 e0       	ldi	r22, 0x00	; 0
    1776:	a9 01       	movw	r20, r18
    1778:	0e 94 76 14 	call	0x28ec	; 0x28ec <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"Pass: ");
    177c:	25 e0       	ldi	r18, 0x05	; 5
    177e:	31 e0       	ldi	r19, 0x01	; 1
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	60 e0       	ldi	r22, 0x00	; 0
    1784:	a9 01       	movw	r20, r18
    1786:	0e 94 76 14 	call	0x28ec	; 0x28ec <LCD_displayStringRowColumn>
}
    178a:	cf 91       	pop	r28
    178c:	df 91       	pop	r29
    178e:	08 95       	ret

00001790 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1790:	df 93       	push	r29
    1792:	cf 93       	push	r28
    1794:	00 d0       	rcall	.+0      	; 0x1796 <GPIO_setupPinDirection+0x6>
    1796:	00 d0       	rcall	.+0      	; 0x1798 <GPIO_setupPinDirection+0x8>
    1798:	0f 92       	push	r0
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62
    179e:	89 83       	std	Y+1, r24	; 0x01
    17a0:	6a 83       	std	Y+2, r22	; 0x02
    17a2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	88 30       	cpi	r24, 0x08	; 8
    17a8:	08 f0       	brcs	.+2      	; 0x17ac <GPIO_setupPinDirection+0x1c>
    17aa:	d5 c0       	rjmp	.+426    	; 0x1956 <GPIO_setupPinDirection+0x1c6>
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
    17ae:	84 30       	cpi	r24, 0x04	; 4
    17b0:	08 f0       	brcs	.+2      	; 0x17b4 <GPIO_setupPinDirection+0x24>
    17b2:	d1 c0       	rjmp	.+418    	; 0x1956 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    17b4:	89 81       	ldd	r24, Y+1	; 0x01
    17b6:	28 2f       	mov	r18, r24
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	3d 83       	std	Y+5, r19	; 0x05
    17bc:	2c 83       	std	Y+4, r18	; 0x04
    17be:	8c 81       	ldd	r24, Y+4	; 0x04
    17c0:	9d 81       	ldd	r25, Y+5	; 0x05
    17c2:	81 30       	cpi	r24, 0x01	; 1
    17c4:	91 05       	cpc	r25, r1
    17c6:	09 f4       	brne	.+2      	; 0x17ca <GPIO_setupPinDirection+0x3a>
    17c8:	43 c0       	rjmp	.+134    	; 0x1850 <GPIO_setupPinDirection+0xc0>
    17ca:	2c 81       	ldd	r18, Y+4	; 0x04
    17cc:	3d 81       	ldd	r19, Y+5	; 0x05
    17ce:	22 30       	cpi	r18, 0x02	; 2
    17d0:	31 05       	cpc	r19, r1
    17d2:	2c f4       	brge	.+10     	; 0x17de <GPIO_setupPinDirection+0x4e>
    17d4:	8c 81       	ldd	r24, Y+4	; 0x04
    17d6:	9d 81       	ldd	r25, Y+5	; 0x05
    17d8:	00 97       	sbiw	r24, 0x00	; 0
    17da:	71 f0       	breq	.+28     	; 0x17f8 <GPIO_setupPinDirection+0x68>
    17dc:	bc c0       	rjmp	.+376    	; 0x1956 <GPIO_setupPinDirection+0x1c6>
    17de:	2c 81       	ldd	r18, Y+4	; 0x04
    17e0:	3d 81       	ldd	r19, Y+5	; 0x05
    17e2:	22 30       	cpi	r18, 0x02	; 2
    17e4:	31 05       	cpc	r19, r1
    17e6:	09 f4       	brne	.+2      	; 0x17ea <GPIO_setupPinDirection+0x5a>
    17e8:	5f c0       	rjmp	.+190    	; 0x18a8 <GPIO_setupPinDirection+0x118>
    17ea:	8c 81       	ldd	r24, Y+4	; 0x04
    17ec:	9d 81       	ldd	r25, Y+5	; 0x05
    17ee:	83 30       	cpi	r24, 0x03	; 3
    17f0:	91 05       	cpc	r25, r1
    17f2:	09 f4       	brne	.+2      	; 0x17f6 <GPIO_setupPinDirection+0x66>
    17f4:	85 c0       	rjmp	.+266    	; 0x1900 <GPIO_setupPinDirection+0x170>
    17f6:	af c0       	rjmp	.+350    	; 0x1956 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    17f8:	8b 81       	ldd	r24, Y+3	; 0x03
    17fa:	81 30       	cpi	r24, 0x01	; 1
    17fc:	a1 f4       	brne	.+40     	; 0x1826 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    17fe:	aa e3       	ldi	r26, 0x3A	; 58
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	ea e3       	ldi	r30, 0x3A	; 58
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	48 2f       	mov	r20, r24
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	28 2f       	mov	r18, r24
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	02 2e       	mov	r0, r18
    1816:	02 c0       	rjmp	.+4      	; 0x181c <GPIO_setupPinDirection+0x8c>
    1818:	88 0f       	add	r24, r24
    181a:	99 1f       	adc	r25, r25
    181c:	0a 94       	dec	r0
    181e:	e2 f7       	brpl	.-8      	; 0x1818 <GPIO_setupPinDirection+0x88>
    1820:	84 2b       	or	r24, r20
    1822:	8c 93       	st	X, r24
    1824:	98 c0       	rjmp	.+304    	; 0x1956 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1826:	aa e3       	ldi	r26, 0x3A	; 58
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	ea e3       	ldi	r30, 0x3A	; 58
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	48 2f       	mov	r20, r24
    1832:	8a 81       	ldd	r24, Y+2	; 0x02
    1834:	28 2f       	mov	r18, r24
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	02 2e       	mov	r0, r18
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <GPIO_setupPinDirection+0xb4>
    1840:	88 0f       	add	r24, r24
    1842:	99 1f       	adc	r25, r25
    1844:	0a 94       	dec	r0
    1846:	e2 f7       	brpl	.-8      	; 0x1840 <GPIO_setupPinDirection+0xb0>
    1848:	80 95       	com	r24
    184a:	84 23       	and	r24, r20
    184c:	8c 93       	st	X, r24
    184e:	83 c0       	rjmp	.+262    	; 0x1956 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
    1852:	81 30       	cpi	r24, 0x01	; 1
    1854:	a1 f4       	brne	.+40     	; 0x187e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1856:	a7 e3       	ldi	r26, 0x37	; 55
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	e7 e3       	ldi	r30, 0x37	; 55
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	48 2f       	mov	r20, r24
    1862:	8a 81       	ldd	r24, Y+2	; 0x02
    1864:	28 2f       	mov	r18, r24
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	02 2e       	mov	r0, r18
    186e:	02 c0       	rjmp	.+4      	; 0x1874 <GPIO_setupPinDirection+0xe4>
    1870:	88 0f       	add	r24, r24
    1872:	99 1f       	adc	r25, r25
    1874:	0a 94       	dec	r0
    1876:	e2 f7       	brpl	.-8      	; 0x1870 <GPIO_setupPinDirection+0xe0>
    1878:	84 2b       	or	r24, r20
    187a:	8c 93       	st	X, r24
    187c:	6c c0       	rjmp	.+216    	; 0x1956 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    187e:	a7 e3       	ldi	r26, 0x37	; 55
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	e7 e3       	ldi	r30, 0x37	; 55
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	48 2f       	mov	r20, r24
    188a:	8a 81       	ldd	r24, Y+2	; 0x02
    188c:	28 2f       	mov	r18, r24
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	02 2e       	mov	r0, r18
    1896:	02 c0       	rjmp	.+4      	; 0x189c <GPIO_setupPinDirection+0x10c>
    1898:	88 0f       	add	r24, r24
    189a:	99 1f       	adc	r25, r25
    189c:	0a 94       	dec	r0
    189e:	e2 f7       	brpl	.-8      	; 0x1898 <GPIO_setupPinDirection+0x108>
    18a0:	80 95       	com	r24
    18a2:	84 23       	and	r24, r20
    18a4:	8c 93       	st	X, r24
    18a6:	57 c0       	rjmp	.+174    	; 0x1956 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    18a8:	8b 81       	ldd	r24, Y+3	; 0x03
    18aa:	81 30       	cpi	r24, 0x01	; 1
    18ac:	a1 f4       	brne	.+40     	; 0x18d6 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    18ae:	a4 e3       	ldi	r26, 0x34	; 52
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	e4 e3       	ldi	r30, 0x34	; 52
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	48 2f       	mov	r20, r24
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	28 2f       	mov	r18, r24
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	02 2e       	mov	r0, r18
    18c6:	02 c0       	rjmp	.+4      	; 0x18cc <GPIO_setupPinDirection+0x13c>
    18c8:	88 0f       	add	r24, r24
    18ca:	99 1f       	adc	r25, r25
    18cc:	0a 94       	dec	r0
    18ce:	e2 f7       	brpl	.-8      	; 0x18c8 <GPIO_setupPinDirection+0x138>
    18d0:	84 2b       	or	r24, r20
    18d2:	8c 93       	st	X, r24
    18d4:	40 c0       	rjmp	.+128    	; 0x1956 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    18d6:	a4 e3       	ldi	r26, 0x34	; 52
    18d8:	b0 e0       	ldi	r27, 0x00	; 0
    18da:	e4 e3       	ldi	r30, 0x34	; 52
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	48 2f       	mov	r20, r24
    18e2:	8a 81       	ldd	r24, Y+2	; 0x02
    18e4:	28 2f       	mov	r18, r24
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	02 2e       	mov	r0, r18
    18ee:	02 c0       	rjmp	.+4      	; 0x18f4 <GPIO_setupPinDirection+0x164>
    18f0:	88 0f       	add	r24, r24
    18f2:	99 1f       	adc	r25, r25
    18f4:	0a 94       	dec	r0
    18f6:	e2 f7       	brpl	.-8      	; 0x18f0 <GPIO_setupPinDirection+0x160>
    18f8:	80 95       	com	r24
    18fa:	84 23       	and	r24, r20
    18fc:	8c 93       	st	X, r24
    18fe:	2b c0       	rjmp	.+86     	; 0x1956 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1900:	8b 81       	ldd	r24, Y+3	; 0x03
    1902:	81 30       	cpi	r24, 0x01	; 1
    1904:	a1 f4       	brne	.+40     	; 0x192e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1906:	a1 e3       	ldi	r26, 0x31	; 49
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	e1 e3       	ldi	r30, 0x31	; 49
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	48 2f       	mov	r20, r24
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
    1914:	28 2f       	mov	r18, r24
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	02 2e       	mov	r0, r18
    191e:	02 c0       	rjmp	.+4      	; 0x1924 <GPIO_setupPinDirection+0x194>
    1920:	88 0f       	add	r24, r24
    1922:	99 1f       	adc	r25, r25
    1924:	0a 94       	dec	r0
    1926:	e2 f7       	brpl	.-8      	; 0x1920 <GPIO_setupPinDirection+0x190>
    1928:	84 2b       	or	r24, r20
    192a:	8c 93       	st	X, r24
    192c:	14 c0       	rjmp	.+40     	; 0x1956 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    192e:	a1 e3       	ldi	r26, 0x31	; 49
    1930:	b0 e0       	ldi	r27, 0x00	; 0
    1932:	e1 e3       	ldi	r30, 0x31	; 49
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	48 2f       	mov	r20, r24
    193a:	8a 81       	ldd	r24, Y+2	; 0x02
    193c:	28 2f       	mov	r18, r24
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	02 2e       	mov	r0, r18
    1946:	02 c0       	rjmp	.+4      	; 0x194c <GPIO_setupPinDirection+0x1bc>
    1948:	88 0f       	add	r24, r24
    194a:	99 1f       	adc	r25, r25
    194c:	0a 94       	dec	r0
    194e:	e2 f7       	brpl	.-8      	; 0x1948 <GPIO_setupPinDirection+0x1b8>
    1950:	80 95       	com	r24
    1952:	84 23       	and	r24, r20
    1954:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1956:	0f 90       	pop	r0
    1958:	0f 90       	pop	r0
    195a:	0f 90       	pop	r0
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	cf 91       	pop	r28
    1962:	df 91       	pop	r29
    1964:	08 95       	ret

00001966 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1966:	df 93       	push	r29
    1968:	cf 93       	push	r28
    196a:	00 d0       	rcall	.+0      	; 0x196c <GPIO_writePin+0x6>
    196c:	00 d0       	rcall	.+0      	; 0x196e <GPIO_writePin+0x8>
    196e:	0f 92       	push	r0
    1970:	cd b7       	in	r28, 0x3d	; 61
    1972:	de b7       	in	r29, 0x3e	; 62
    1974:	89 83       	std	Y+1, r24	; 0x01
    1976:	6a 83       	std	Y+2, r22	; 0x02
    1978:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    197a:	8a 81       	ldd	r24, Y+2	; 0x02
    197c:	88 30       	cpi	r24, 0x08	; 8
    197e:	08 f0       	brcs	.+2      	; 0x1982 <GPIO_writePin+0x1c>
    1980:	d5 c0       	rjmp	.+426    	; 0x1b2c <GPIO_writePin+0x1c6>
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	84 30       	cpi	r24, 0x04	; 4
    1986:	08 f0       	brcs	.+2      	; 0x198a <GPIO_writePin+0x24>
    1988:	d1 c0       	rjmp	.+418    	; 0x1b2c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    198a:	89 81       	ldd	r24, Y+1	; 0x01
    198c:	28 2f       	mov	r18, r24
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	3d 83       	std	Y+5, r19	; 0x05
    1992:	2c 83       	std	Y+4, r18	; 0x04
    1994:	8c 81       	ldd	r24, Y+4	; 0x04
    1996:	9d 81       	ldd	r25, Y+5	; 0x05
    1998:	81 30       	cpi	r24, 0x01	; 1
    199a:	91 05       	cpc	r25, r1
    199c:	09 f4       	brne	.+2      	; 0x19a0 <GPIO_writePin+0x3a>
    199e:	43 c0       	rjmp	.+134    	; 0x1a26 <GPIO_writePin+0xc0>
    19a0:	2c 81       	ldd	r18, Y+4	; 0x04
    19a2:	3d 81       	ldd	r19, Y+5	; 0x05
    19a4:	22 30       	cpi	r18, 0x02	; 2
    19a6:	31 05       	cpc	r19, r1
    19a8:	2c f4       	brge	.+10     	; 0x19b4 <GPIO_writePin+0x4e>
    19aa:	8c 81       	ldd	r24, Y+4	; 0x04
    19ac:	9d 81       	ldd	r25, Y+5	; 0x05
    19ae:	00 97       	sbiw	r24, 0x00	; 0
    19b0:	71 f0       	breq	.+28     	; 0x19ce <GPIO_writePin+0x68>
    19b2:	bc c0       	rjmp	.+376    	; 0x1b2c <GPIO_writePin+0x1c6>
    19b4:	2c 81       	ldd	r18, Y+4	; 0x04
    19b6:	3d 81       	ldd	r19, Y+5	; 0x05
    19b8:	22 30       	cpi	r18, 0x02	; 2
    19ba:	31 05       	cpc	r19, r1
    19bc:	09 f4       	brne	.+2      	; 0x19c0 <GPIO_writePin+0x5a>
    19be:	5f c0       	rjmp	.+190    	; 0x1a7e <GPIO_writePin+0x118>
    19c0:	8c 81       	ldd	r24, Y+4	; 0x04
    19c2:	9d 81       	ldd	r25, Y+5	; 0x05
    19c4:	83 30       	cpi	r24, 0x03	; 3
    19c6:	91 05       	cpc	r25, r1
    19c8:	09 f4       	brne	.+2      	; 0x19cc <GPIO_writePin+0x66>
    19ca:	85 c0       	rjmp	.+266    	; 0x1ad6 <GPIO_writePin+0x170>
    19cc:	af c0       	rjmp	.+350    	; 0x1b2c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    19ce:	8b 81       	ldd	r24, Y+3	; 0x03
    19d0:	81 30       	cpi	r24, 0x01	; 1
    19d2:	a1 f4       	brne	.+40     	; 0x19fc <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    19d4:	ab e3       	ldi	r26, 0x3B	; 59
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	eb e3       	ldi	r30, 0x3B	; 59
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	48 2f       	mov	r20, r24
    19e0:	8a 81       	ldd	r24, Y+2	; 0x02
    19e2:	28 2f       	mov	r18, r24
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	02 2e       	mov	r0, r18
    19ec:	02 c0       	rjmp	.+4      	; 0x19f2 <GPIO_writePin+0x8c>
    19ee:	88 0f       	add	r24, r24
    19f0:	99 1f       	adc	r25, r25
    19f2:	0a 94       	dec	r0
    19f4:	e2 f7       	brpl	.-8      	; 0x19ee <GPIO_writePin+0x88>
    19f6:	84 2b       	or	r24, r20
    19f8:	8c 93       	st	X, r24
    19fa:	98 c0       	rjmp	.+304    	; 0x1b2c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    19fc:	ab e3       	ldi	r26, 0x3B	; 59
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	eb e3       	ldi	r30, 0x3B	; 59
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	48 2f       	mov	r20, r24
    1a08:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0a:	28 2f       	mov	r18, r24
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	02 2e       	mov	r0, r18
    1a14:	02 c0       	rjmp	.+4      	; 0x1a1a <GPIO_writePin+0xb4>
    1a16:	88 0f       	add	r24, r24
    1a18:	99 1f       	adc	r25, r25
    1a1a:	0a 94       	dec	r0
    1a1c:	e2 f7       	brpl	.-8      	; 0x1a16 <GPIO_writePin+0xb0>
    1a1e:	80 95       	com	r24
    1a20:	84 23       	and	r24, r20
    1a22:	8c 93       	st	X, r24
    1a24:	83 c0       	rjmp	.+262    	; 0x1b2c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1a26:	8b 81       	ldd	r24, Y+3	; 0x03
    1a28:	81 30       	cpi	r24, 0x01	; 1
    1a2a:	a1 f4       	brne	.+40     	; 0x1a54 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1a2c:	a8 e3       	ldi	r26, 0x38	; 56
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	e8 e3       	ldi	r30, 0x38	; 56
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	48 2f       	mov	r20, r24
    1a38:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3a:	28 2f       	mov	r18, r24
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	02 2e       	mov	r0, r18
    1a44:	02 c0       	rjmp	.+4      	; 0x1a4a <GPIO_writePin+0xe4>
    1a46:	88 0f       	add	r24, r24
    1a48:	99 1f       	adc	r25, r25
    1a4a:	0a 94       	dec	r0
    1a4c:	e2 f7       	brpl	.-8      	; 0x1a46 <GPIO_writePin+0xe0>
    1a4e:	84 2b       	or	r24, r20
    1a50:	8c 93       	st	X, r24
    1a52:	6c c0       	rjmp	.+216    	; 0x1b2c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1a54:	a8 e3       	ldi	r26, 0x38	; 56
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	e8 e3       	ldi	r30, 0x38	; 56
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	48 2f       	mov	r20, r24
    1a60:	8a 81       	ldd	r24, Y+2	; 0x02
    1a62:	28 2f       	mov	r18, r24
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	02 2e       	mov	r0, r18
    1a6c:	02 c0       	rjmp	.+4      	; 0x1a72 <GPIO_writePin+0x10c>
    1a6e:	88 0f       	add	r24, r24
    1a70:	99 1f       	adc	r25, r25
    1a72:	0a 94       	dec	r0
    1a74:	e2 f7       	brpl	.-8      	; 0x1a6e <GPIO_writePin+0x108>
    1a76:	80 95       	com	r24
    1a78:	84 23       	and	r24, r20
    1a7a:	8c 93       	st	X, r24
    1a7c:	57 c0       	rjmp	.+174    	; 0x1b2c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a80:	81 30       	cpi	r24, 0x01	; 1
    1a82:	a1 f4       	brne	.+40     	; 0x1aac <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1a84:	a5 e3       	ldi	r26, 0x35	; 53
    1a86:	b0 e0       	ldi	r27, 0x00	; 0
    1a88:	e5 e3       	ldi	r30, 0x35	; 53
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	48 2f       	mov	r20, r24
    1a90:	8a 81       	ldd	r24, Y+2	; 0x02
    1a92:	28 2f       	mov	r18, r24
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	02 2e       	mov	r0, r18
    1a9c:	02 c0       	rjmp	.+4      	; 0x1aa2 <GPIO_writePin+0x13c>
    1a9e:	88 0f       	add	r24, r24
    1aa0:	99 1f       	adc	r25, r25
    1aa2:	0a 94       	dec	r0
    1aa4:	e2 f7       	brpl	.-8      	; 0x1a9e <GPIO_writePin+0x138>
    1aa6:	84 2b       	or	r24, r20
    1aa8:	8c 93       	st	X, r24
    1aaa:	40 c0       	rjmp	.+128    	; 0x1b2c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1aac:	a5 e3       	ldi	r26, 0x35	; 53
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	e5 e3       	ldi	r30, 0x35	; 53
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	48 2f       	mov	r20, r24
    1ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aba:	28 2f       	mov	r18, r24
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	02 2e       	mov	r0, r18
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <GPIO_writePin+0x164>
    1ac6:	88 0f       	add	r24, r24
    1ac8:	99 1f       	adc	r25, r25
    1aca:	0a 94       	dec	r0
    1acc:	e2 f7       	brpl	.-8      	; 0x1ac6 <GPIO_writePin+0x160>
    1ace:	80 95       	com	r24
    1ad0:	84 23       	and	r24, r20
    1ad2:	8c 93       	st	X, r24
    1ad4:	2b c0       	rjmp	.+86     	; 0x1b2c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad8:	81 30       	cpi	r24, 0x01	; 1
    1ada:	a1 f4       	brne	.+40     	; 0x1b04 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1adc:	a2 e3       	ldi	r26, 0x32	; 50
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	e2 e3       	ldi	r30, 0x32	; 50
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	48 2f       	mov	r20, r24
    1ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aea:	28 2f       	mov	r18, r24
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	02 2e       	mov	r0, r18
    1af4:	02 c0       	rjmp	.+4      	; 0x1afa <GPIO_writePin+0x194>
    1af6:	88 0f       	add	r24, r24
    1af8:	99 1f       	adc	r25, r25
    1afa:	0a 94       	dec	r0
    1afc:	e2 f7       	brpl	.-8      	; 0x1af6 <GPIO_writePin+0x190>
    1afe:	84 2b       	or	r24, r20
    1b00:	8c 93       	st	X, r24
    1b02:	14 c0       	rjmp	.+40     	; 0x1b2c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1b04:	a2 e3       	ldi	r26, 0x32	; 50
    1b06:	b0 e0       	ldi	r27, 0x00	; 0
    1b08:	e2 e3       	ldi	r30, 0x32	; 50
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	48 2f       	mov	r20, r24
    1b10:	8a 81       	ldd	r24, Y+2	; 0x02
    1b12:	28 2f       	mov	r18, r24
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	02 2e       	mov	r0, r18
    1b1c:	02 c0       	rjmp	.+4      	; 0x1b22 <GPIO_writePin+0x1bc>
    1b1e:	88 0f       	add	r24, r24
    1b20:	99 1f       	adc	r25, r25
    1b22:	0a 94       	dec	r0
    1b24:	e2 f7       	brpl	.-8      	; 0x1b1e <GPIO_writePin+0x1b8>
    1b26:	80 95       	com	r24
    1b28:	84 23       	and	r24, r20
    1b2a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1b2c:	0f 90       	pop	r0
    1b2e:	0f 90       	pop	r0
    1b30:	0f 90       	pop	r0
    1b32:	0f 90       	pop	r0
    1b34:	0f 90       	pop	r0
    1b36:	cf 91       	pop	r28
    1b38:	df 91       	pop	r29
    1b3a:	08 95       	ret

00001b3c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1b3c:	df 93       	push	r29
    1b3e:	cf 93       	push	r28
    1b40:	00 d0       	rcall	.+0      	; 0x1b42 <GPIO_readPin+0x6>
    1b42:	00 d0       	rcall	.+0      	; 0x1b44 <GPIO_readPin+0x8>
    1b44:	0f 92       	push	r0
    1b46:	cd b7       	in	r28, 0x3d	; 61
    1b48:	de b7       	in	r29, 0x3e	; 62
    1b4a:	8a 83       	std	Y+2, r24	; 0x02
    1b4c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1b4e:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1b50:	8b 81       	ldd	r24, Y+3	; 0x03
    1b52:	88 30       	cpi	r24, 0x08	; 8
    1b54:	08 f0       	brcs	.+2      	; 0x1b58 <GPIO_readPin+0x1c>
    1b56:	84 c0       	rjmp	.+264    	; 0x1c60 <GPIO_readPin+0x124>
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	84 30       	cpi	r24, 0x04	; 4
    1b5c:	08 f0       	brcs	.+2      	; 0x1b60 <GPIO_readPin+0x24>
    1b5e:	80 c0       	rjmp	.+256    	; 0x1c60 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1b60:	8a 81       	ldd	r24, Y+2	; 0x02
    1b62:	28 2f       	mov	r18, r24
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	3d 83       	std	Y+5, r19	; 0x05
    1b68:	2c 83       	std	Y+4, r18	; 0x04
    1b6a:	4c 81       	ldd	r20, Y+4	; 0x04
    1b6c:	5d 81       	ldd	r21, Y+5	; 0x05
    1b6e:	41 30       	cpi	r20, 0x01	; 1
    1b70:	51 05       	cpc	r21, r1
    1b72:	79 f1       	breq	.+94     	; 0x1bd2 <GPIO_readPin+0x96>
    1b74:	8c 81       	ldd	r24, Y+4	; 0x04
    1b76:	9d 81       	ldd	r25, Y+5	; 0x05
    1b78:	82 30       	cpi	r24, 0x02	; 2
    1b7a:	91 05       	cpc	r25, r1
    1b7c:	34 f4       	brge	.+12     	; 0x1b8a <GPIO_readPin+0x4e>
    1b7e:	2c 81       	ldd	r18, Y+4	; 0x04
    1b80:	3d 81       	ldd	r19, Y+5	; 0x05
    1b82:	21 15       	cp	r18, r1
    1b84:	31 05       	cpc	r19, r1
    1b86:	69 f0       	breq	.+26     	; 0x1ba2 <GPIO_readPin+0x66>
    1b88:	6b c0       	rjmp	.+214    	; 0x1c60 <GPIO_readPin+0x124>
    1b8a:	4c 81       	ldd	r20, Y+4	; 0x04
    1b8c:	5d 81       	ldd	r21, Y+5	; 0x05
    1b8e:	42 30       	cpi	r20, 0x02	; 2
    1b90:	51 05       	cpc	r21, r1
    1b92:	b9 f1       	breq	.+110    	; 0x1c02 <GPIO_readPin+0xc6>
    1b94:	8c 81       	ldd	r24, Y+4	; 0x04
    1b96:	9d 81       	ldd	r25, Y+5	; 0x05
    1b98:	83 30       	cpi	r24, 0x03	; 3
    1b9a:	91 05       	cpc	r25, r1
    1b9c:	09 f4       	brne	.+2      	; 0x1ba0 <GPIO_readPin+0x64>
    1b9e:	49 c0       	rjmp	.+146    	; 0x1c32 <GPIO_readPin+0xf6>
    1ba0:	5f c0       	rjmp	.+190    	; 0x1c60 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1ba2:	e9 e3       	ldi	r30, 0x39	; 57
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	28 2f       	mov	r18, r24
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	8b 81       	ldd	r24, Y+3	; 0x03
    1bae:	88 2f       	mov	r24, r24
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	a9 01       	movw	r20, r18
    1bb4:	02 c0       	rjmp	.+4      	; 0x1bba <GPIO_readPin+0x7e>
    1bb6:	55 95       	asr	r21
    1bb8:	47 95       	ror	r20
    1bba:	8a 95       	dec	r24
    1bbc:	e2 f7       	brpl	.-8      	; 0x1bb6 <GPIO_readPin+0x7a>
    1bbe:	ca 01       	movw	r24, r20
    1bc0:	81 70       	andi	r24, 0x01	; 1
    1bc2:	90 70       	andi	r25, 0x00	; 0
    1bc4:	88 23       	and	r24, r24
    1bc6:	19 f0       	breq	.+6      	; 0x1bce <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	89 83       	std	Y+1, r24	; 0x01
    1bcc:	49 c0       	rjmp	.+146    	; 0x1c60 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1bce:	19 82       	std	Y+1, r1	; 0x01
    1bd0:	47 c0       	rjmp	.+142    	; 0x1c60 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1bd2:	e6 e3       	ldi	r30, 0x36	; 54
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	28 2f       	mov	r18, r24
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bde:	88 2f       	mov	r24, r24
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	a9 01       	movw	r20, r18
    1be4:	02 c0       	rjmp	.+4      	; 0x1bea <GPIO_readPin+0xae>
    1be6:	55 95       	asr	r21
    1be8:	47 95       	ror	r20
    1bea:	8a 95       	dec	r24
    1bec:	e2 f7       	brpl	.-8      	; 0x1be6 <GPIO_readPin+0xaa>
    1bee:	ca 01       	movw	r24, r20
    1bf0:	81 70       	andi	r24, 0x01	; 1
    1bf2:	90 70       	andi	r25, 0x00	; 0
    1bf4:	88 23       	and	r24, r24
    1bf6:	19 f0       	breq	.+6      	; 0x1bfe <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	89 83       	std	Y+1, r24	; 0x01
    1bfc:	31 c0       	rjmp	.+98     	; 0x1c60 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1bfe:	19 82       	std	Y+1, r1	; 0x01
    1c00:	2f c0       	rjmp	.+94     	; 0x1c60 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1c02:	e3 e3       	ldi	r30, 0x33	; 51
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	28 2f       	mov	r18, r24
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0e:	88 2f       	mov	r24, r24
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	a9 01       	movw	r20, r18
    1c14:	02 c0       	rjmp	.+4      	; 0x1c1a <GPIO_readPin+0xde>
    1c16:	55 95       	asr	r21
    1c18:	47 95       	ror	r20
    1c1a:	8a 95       	dec	r24
    1c1c:	e2 f7       	brpl	.-8      	; 0x1c16 <GPIO_readPin+0xda>
    1c1e:	ca 01       	movw	r24, r20
    1c20:	81 70       	andi	r24, 0x01	; 1
    1c22:	90 70       	andi	r25, 0x00	; 0
    1c24:	88 23       	and	r24, r24
    1c26:	19 f0       	breq	.+6      	; 0x1c2e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	89 83       	std	Y+1, r24	; 0x01
    1c2c:	19 c0       	rjmp	.+50     	; 0x1c60 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c2e:	19 82       	std	Y+1, r1	; 0x01
    1c30:	17 c0       	rjmp	.+46     	; 0x1c60 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1c32:	e0 e3       	ldi	r30, 0x30	; 48
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	28 2f       	mov	r18, r24
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3e:	88 2f       	mov	r24, r24
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	a9 01       	movw	r20, r18
    1c44:	02 c0       	rjmp	.+4      	; 0x1c4a <GPIO_readPin+0x10e>
    1c46:	55 95       	asr	r21
    1c48:	47 95       	ror	r20
    1c4a:	8a 95       	dec	r24
    1c4c:	e2 f7       	brpl	.-8      	; 0x1c46 <GPIO_readPin+0x10a>
    1c4e:	ca 01       	movw	r24, r20
    1c50:	81 70       	andi	r24, 0x01	; 1
    1c52:	90 70       	andi	r25, 0x00	; 0
    1c54:	88 23       	and	r24, r24
    1c56:	19 f0       	breq	.+6      	; 0x1c5e <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	89 83       	std	Y+1, r24	; 0x01
    1c5c:	01 c0       	rjmp	.+2      	; 0x1c60 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c5e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1c60:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	cf 91       	pop	r28
    1c6e:	df 91       	pop	r29
    1c70:	08 95       	ret

00001c72 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1c72:	df 93       	push	r29
    1c74:	cf 93       	push	r28
    1c76:	00 d0       	rcall	.+0      	; 0x1c78 <GPIO_setupPortDirection+0x6>
    1c78:	00 d0       	rcall	.+0      	; 0x1c7a <GPIO_setupPortDirection+0x8>
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
    1c7e:	89 83       	std	Y+1, r24	; 0x01
    1c80:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c82:	89 81       	ldd	r24, Y+1	; 0x01
    1c84:	84 30       	cpi	r24, 0x04	; 4
    1c86:	90 f5       	brcc	.+100    	; 0x1cec <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1c88:	89 81       	ldd	r24, Y+1	; 0x01
    1c8a:	28 2f       	mov	r18, r24
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	3c 83       	std	Y+4, r19	; 0x04
    1c90:	2b 83       	std	Y+3, r18	; 0x03
    1c92:	8b 81       	ldd	r24, Y+3	; 0x03
    1c94:	9c 81       	ldd	r25, Y+4	; 0x04
    1c96:	81 30       	cpi	r24, 0x01	; 1
    1c98:	91 05       	cpc	r25, r1
    1c9a:	d1 f0       	breq	.+52     	; 0x1cd0 <GPIO_setupPortDirection+0x5e>
    1c9c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c9e:	3c 81       	ldd	r19, Y+4	; 0x04
    1ca0:	22 30       	cpi	r18, 0x02	; 2
    1ca2:	31 05       	cpc	r19, r1
    1ca4:	2c f4       	brge	.+10     	; 0x1cb0 <GPIO_setupPortDirection+0x3e>
    1ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca8:	9c 81       	ldd	r25, Y+4	; 0x04
    1caa:	00 97       	sbiw	r24, 0x00	; 0
    1cac:	61 f0       	breq	.+24     	; 0x1cc6 <GPIO_setupPortDirection+0x54>
    1cae:	1e c0       	rjmp	.+60     	; 0x1cec <GPIO_setupPortDirection+0x7a>
    1cb0:	2b 81       	ldd	r18, Y+3	; 0x03
    1cb2:	3c 81       	ldd	r19, Y+4	; 0x04
    1cb4:	22 30       	cpi	r18, 0x02	; 2
    1cb6:	31 05       	cpc	r19, r1
    1cb8:	81 f0       	breq	.+32     	; 0x1cda <GPIO_setupPortDirection+0x68>
    1cba:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cbe:	83 30       	cpi	r24, 0x03	; 3
    1cc0:	91 05       	cpc	r25, r1
    1cc2:	81 f0       	breq	.+32     	; 0x1ce4 <GPIO_setupPortDirection+0x72>
    1cc4:	13 c0       	rjmp	.+38     	; 0x1cec <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1cc6:	ea e3       	ldi	r30, 0x3A	; 58
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ccc:	80 83       	st	Z, r24
    1cce:	0e c0       	rjmp	.+28     	; 0x1cec <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1cd0:	e7 e3       	ldi	r30, 0x37	; 55
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd6:	80 83       	st	Z, r24
    1cd8:	09 c0       	rjmp	.+18     	; 0x1cec <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1cda:	e4 e3       	ldi	r30, 0x34	; 52
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce0:	80 83       	st	Z, r24
    1ce2:	04 c0       	rjmp	.+8      	; 0x1cec <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1ce4:	e1 e3       	ldi	r30, 0x31	; 49
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cea:	80 83       	st	Z, r24
			break;
		}
	}
}
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	0f 90       	pop	r0
    1cf4:	cf 91       	pop	r28
    1cf6:	df 91       	pop	r29
    1cf8:	08 95       	ret

00001cfa <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1cfa:	df 93       	push	r29
    1cfc:	cf 93       	push	r28
    1cfe:	00 d0       	rcall	.+0      	; 0x1d00 <GPIO_writePort+0x6>
    1d00:	00 d0       	rcall	.+0      	; 0x1d02 <GPIO_writePort+0x8>
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
    1d06:	89 83       	std	Y+1, r24	; 0x01
    1d08:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1d0a:	89 81       	ldd	r24, Y+1	; 0x01
    1d0c:	84 30       	cpi	r24, 0x04	; 4
    1d0e:	90 f5       	brcc	.+100    	; 0x1d74 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1d10:	89 81       	ldd	r24, Y+1	; 0x01
    1d12:	28 2f       	mov	r18, r24
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	3c 83       	std	Y+4, r19	; 0x04
    1d18:	2b 83       	std	Y+3, r18	; 0x03
    1d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1e:	81 30       	cpi	r24, 0x01	; 1
    1d20:	91 05       	cpc	r25, r1
    1d22:	d1 f0       	breq	.+52     	; 0x1d58 <GPIO_writePort+0x5e>
    1d24:	2b 81       	ldd	r18, Y+3	; 0x03
    1d26:	3c 81       	ldd	r19, Y+4	; 0x04
    1d28:	22 30       	cpi	r18, 0x02	; 2
    1d2a:	31 05       	cpc	r19, r1
    1d2c:	2c f4       	brge	.+10     	; 0x1d38 <GPIO_writePort+0x3e>
    1d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d30:	9c 81       	ldd	r25, Y+4	; 0x04
    1d32:	00 97       	sbiw	r24, 0x00	; 0
    1d34:	61 f0       	breq	.+24     	; 0x1d4e <GPIO_writePort+0x54>
    1d36:	1e c0       	rjmp	.+60     	; 0x1d74 <GPIO_writePort+0x7a>
    1d38:	2b 81       	ldd	r18, Y+3	; 0x03
    1d3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d3c:	22 30       	cpi	r18, 0x02	; 2
    1d3e:	31 05       	cpc	r19, r1
    1d40:	81 f0       	breq	.+32     	; 0x1d62 <GPIO_writePort+0x68>
    1d42:	8b 81       	ldd	r24, Y+3	; 0x03
    1d44:	9c 81       	ldd	r25, Y+4	; 0x04
    1d46:	83 30       	cpi	r24, 0x03	; 3
    1d48:	91 05       	cpc	r25, r1
    1d4a:	81 f0       	breq	.+32     	; 0x1d6c <GPIO_writePort+0x72>
    1d4c:	13 c0       	rjmp	.+38     	; 0x1d74 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1d4e:	eb e3       	ldi	r30, 0x3B	; 59
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	8a 81       	ldd	r24, Y+2	; 0x02
    1d54:	80 83       	st	Z, r24
    1d56:	0e c0       	rjmp	.+28     	; 0x1d74 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1d58:	e8 e3       	ldi	r30, 0x38	; 56
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5e:	80 83       	st	Z, r24
    1d60:	09 c0       	rjmp	.+18     	; 0x1d74 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1d62:	e5 e3       	ldi	r30, 0x35	; 53
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	8a 81       	ldd	r24, Y+2	; 0x02
    1d68:	80 83       	st	Z, r24
    1d6a:	04 c0       	rjmp	.+8      	; 0x1d74 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1d6c:	e2 e3       	ldi	r30, 0x32	; 50
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	8a 81       	ldd	r24, Y+2	; 0x02
    1d72:	80 83       	st	Z, r24
			break;
		}
	}
}
    1d74:	0f 90       	pop	r0
    1d76:	0f 90       	pop	r0
    1d78:	0f 90       	pop	r0
    1d7a:	0f 90       	pop	r0
    1d7c:	cf 91       	pop	r28
    1d7e:	df 91       	pop	r29
    1d80:	08 95       	ret

00001d82 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1d82:	df 93       	push	r29
    1d84:	cf 93       	push	r28
    1d86:	00 d0       	rcall	.+0      	; 0x1d88 <GPIO_readPort+0x6>
    1d88:	00 d0       	rcall	.+0      	; 0x1d8a <GPIO_readPort+0x8>
    1d8a:	cd b7       	in	r28, 0x3d	; 61
    1d8c:	de b7       	in	r29, 0x3e	; 62
    1d8e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1d90:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1d92:	8a 81       	ldd	r24, Y+2	; 0x02
    1d94:	84 30       	cpi	r24, 0x04	; 4
    1d96:	90 f5       	brcc	.+100    	; 0x1dfc <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	28 2f       	mov	r18, r24
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	3c 83       	std	Y+4, r19	; 0x04
    1da0:	2b 83       	std	Y+3, r18	; 0x03
    1da2:	8b 81       	ldd	r24, Y+3	; 0x03
    1da4:	9c 81       	ldd	r25, Y+4	; 0x04
    1da6:	81 30       	cpi	r24, 0x01	; 1
    1da8:	91 05       	cpc	r25, r1
    1daa:	d1 f0       	breq	.+52     	; 0x1de0 <GPIO_readPort+0x5e>
    1dac:	2b 81       	ldd	r18, Y+3	; 0x03
    1dae:	3c 81       	ldd	r19, Y+4	; 0x04
    1db0:	22 30       	cpi	r18, 0x02	; 2
    1db2:	31 05       	cpc	r19, r1
    1db4:	2c f4       	brge	.+10     	; 0x1dc0 <GPIO_readPort+0x3e>
    1db6:	8b 81       	ldd	r24, Y+3	; 0x03
    1db8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dba:	00 97       	sbiw	r24, 0x00	; 0
    1dbc:	61 f0       	breq	.+24     	; 0x1dd6 <GPIO_readPort+0x54>
    1dbe:	1e c0       	rjmp	.+60     	; 0x1dfc <GPIO_readPort+0x7a>
    1dc0:	2b 81       	ldd	r18, Y+3	; 0x03
    1dc2:	3c 81       	ldd	r19, Y+4	; 0x04
    1dc4:	22 30       	cpi	r18, 0x02	; 2
    1dc6:	31 05       	cpc	r19, r1
    1dc8:	81 f0       	breq	.+32     	; 0x1dea <GPIO_readPort+0x68>
    1dca:	8b 81       	ldd	r24, Y+3	; 0x03
    1dcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dce:	83 30       	cpi	r24, 0x03	; 3
    1dd0:	91 05       	cpc	r25, r1
    1dd2:	81 f0       	breq	.+32     	; 0x1df4 <GPIO_readPort+0x72>
    1dd4:	13 c0       	rjmp	.+38     	; 0x1dfc <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1dd6:	e9 e3       	ldi	r30, 0x39	; 57
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	89 83       	std	Y+1, r24	; 0x01
    1dde:	0e c0       	rjmp	.+28     	; 0x1dfc <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1de0:	e6 e3       	ldi	r30, 0x36	; 54
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	80 81       	ld	r24, Z
    1de6:	89 83       	std	Y+1, r24	; 0x01
    1de8:	09 c0       	rjmp	.+18     	; 0x1dfc <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1dea:	e3 e3       	ldi	r30, 0x33	; 51
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	80 81       	ld	r24, Z
    1df0:	89 83       	std	Y+1, r24	; 0x01
    1df2:	04 c0       	rjmp	.+8      	; 0x1dfc <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1df4:	e0 e3       	ldi	r30, 0x30	; 48
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1dfc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dfe:	0f 90       	pop	r0
    1e00:	0f 90       	pop	r0
    1e02:	0f 90       	pop	r0
    1e04:	0f 90       	pop	r0
    1e06:	cf 91       	pop	r28
    1e08:	df 91       	pop	r29
    1e0a:	08 95       	ret

00001e0c <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1e0c:	df 93       	push	r29
    1e0e:	cf 93       	push	r28
    1e10:	00 d0       	rcall	.+0      	; 0x1e12 <KEYPAD_getPressedKey+0x6>
    1e12:	0f 92       	push	r0
    1e14:	cd b7       	in	r28, 0x3d	; 61
    1e16:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1e18:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1e1a:	1b 82       	std	Y+3, r1	; 0x03
    1e1c:	43 c0       	rjmp	.+134    	; 0x1ea4 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	60 e0       	ldi	r22, 0x00	; 0
    1e22:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1e26:	8b 81       	ldd	r24, Y+3	; 0x03
    1e28:	98 2f       	mov	r25, r24
    1e2a:	9c 5f       	subi	r25, 0xFC	; 252
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	69 2f       	mov	r22, r25
    1e30:	41 e0       	ldi	r20, 0x01	; 1
    1e32:	0e 94 c8 0b 	call	0x1790	; 0x1790 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1e36:	8b 81       	ldd	r24, Y+3	; 0x03
    1e38:	88 2f       	mov	r24, r24
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	9c 01       	movw	r18, r24
    1e3e:	2c 5f       	subi	r18, 0xFC	; 252
    1e40:	3f 4f       	sbci	r19, 0xFF	; 255
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	02 c0       	rjmp	.+4      	; 0x1e4c <KEYPAD_getPressedKey+0x40>
    1e48:	88 0f       	add	r24, r24
    1e4a:	99 1f       	adc	r25, r25
    1e4c:	2a 95       	dec	r18
    1e4e:	e2 f7       	brpl	.-8      	; 0x1e48 <KEYPAD_getPressedKey+0x3c>
    1e50:	80 95       	com	r24
    1e52:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	69 81       	ldd	r22, Y+1	; 0x01
    1e58:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1e5c:	1a 82       	std	Y+2, r1	; 0x02
    1e5e:	1c c0       	rjmp	.+56     	; 0x1e98 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	6a 81       	ldd	r22, Y+2	; 0x02
    1e64:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <GPIO_readPin>
    1e68:	88 23       	and	r24, r24
    1e6a:	99 f4       	brne	.+38     	; 0x1e92 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6e:	88 2f       	mov	r24, r24
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	88 0f       	add	r24, r24
    1e74:	99 1f       	adc	r25, r25
    1e76:	88 0f       	add	r24, r24
    1e78:	99 1f       	adc	r25, r25
    1e7a:	98 2f       	mov	r25, r24
    1e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7e:	89 0f       	add	r24, r25
    1e80:	8f 5f       	subi	r24, 0xFF	; 255
    1e82:	0e 94 57 0f 	call	0x1eae	; 0x1eae <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1e86:	0f 90       	pop	r0
    1e88:	0f 90       	pop	r0
    1e8a:	0f 90       	pop	r0
    1e8c:	cf 91       	pop	r28
    1e8e:	df 91       	pop	r29
    1e90:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1e92:	8a 81       	ldd	r24, Y+2	; 0x02
    1e94:	8f 5f       	subi	r24, 0xFF	; 255
    1e96:	8a 83       	std	Y+2, r24	; 0x02
    1e98:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9a:	84 30       	cpi	r24, 0x04	; 4
    1e9c:	08 f3       	brcs	.-62     	; 0x1e60 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea0:	8f 5f       	subi	r24, 0xFF	; 255
    1ea2:	8b 83       	std	Y+3, r24	; 0x03
    1ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea6:	84 30       	cpi	r24, 0x04	; 4
    1ea8:	08 f4       	brcc	.+2      	; 0x1eac <KEYPAD_getPressedKey+0xa0>
    1eaa:	b9 cf       	rjmp	.-142    	; 0x1e1e <KEYPAD_getPressedKey+0x12>
    1eac:	b6 cf       	rjmp	.-148    	; 0x1e1a <KEYPAD_getPressedKey+0xe>

00001eae <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1eae:	df 93       	push	r29
    1eb0:	cf 93       	push	r28
    1eb2:	00 d0       	rcall	.+0      	; 0x1eb4 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1eb4:	00 d0       	rcall	.+0      	; 0x1eb6 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1eb6:	cd b7       	in	r28, 0x3d	; 61
    1eb8:	de b7       	in	r29, 0x3e	; 62
    1eba:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1ebc:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec0:	28 2f       	mov	r18, r24
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	3c 83       	std	Y+4, r19	; 0x04
    1ec6:	2b 83       	std	Y+3, r18	; 0x03
    1ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eca:	9c 81       	ldd	r25, Y+4	; 0x04
    1ecc:	88 30       	cpi	r24, 0x08	; 8
    1ece:	91 05       	cpc	r25, r1
    1ed0:	09 f4       	brne	.+2      	; 0x1ed4 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1ed2:	70 c0       	rjmp	.+224    	; 0x1fb4 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1ed4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ed6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ed8:	29 30       	cpi	r18, 0x09	; 9
    1eda:	31 05       	cpc	r19, r1
    1edc:	5c f5       	brge	.+86     	; 0x1f34 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1ede:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee2:	84 30       	cpi	r24, 0x04	; 4
    1ee4:	91 05       	cpc	r25, r1
    1ee6:	09 f4       	brne	.+2      	; 0x1eea <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1ee8:	59 c0       	rjmp	.+178    	; 0x1f9c <KEYPAD_4x4_adjustKeyNumber+0xee>
    1eea:	2b 81       	ldd	r18, Y+3	; 0x03
    1eec:	3c 81       	ldd	r19, Y+4	; 0x04
    1eee:	25 30       	cpi	r18, 0x05	; 5
    1ef0:	31 05       	cpc	r19, r1
    1ef2:	9c f4       	brge	.+38     	; 0x1f1a <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef8:	82 30       	cpi	r24, 0x02	; 2
    1efa:	91 05       	cpc	r25, r1
    1efc:	09 f4       	brne	.+2      	; 0x1f00 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1efe:	48 c0       	rjmp	.+144    	; 0x1f90 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1f00:	2b 81       	ldd	r18, Y+3	; 0x03
    1f02:	3c 81       	ldd	r19, Y+4	; 0x04
    1f04:	23 30       	cpi	r18, 0x03	; 3
    1f06:	31 05       	cpc	r19, r1
    1f08:	0c f0       	brlt	.+2      	; 0x1f0c <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1f0a:	45 c0       	rjmp	.+138    	; 0x1f96 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f10:	81 30       	cpi	r24, 0x01	; 1
    1f12:	91 05       	cpc	r25, r1
    1f14:	09 f4       	brne	.+2      	; 0x1f18 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1f16:	39 c0       	rjmp	.+114    	; 0x1f8a <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1f18:	67 c0       	rjmp	.+206    	; 0x1fe8 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1f1a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f1c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f1e:	26 30       	cpi	r18, 0x06	; 6
    1f20:	31 05       	cpc	r19, r1
    1f22:	09 f4       	brne	.+2      	; 0x1f26 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1f24:	41 c0       	rjmp	.+130    	; 0x1fa8 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1f26:	8b 81       	ldd	r24, Y+3	; 0x03
    1f28:	9c 81       	ldd	r25, Y+4	; 0x04
    1f2a:	87 30       	cpi	r24, 0x07	; 7
    1f2c:	91 05       	cpc	r25, r1
    1f2e:	0c f0       	brlt	.+2      	; 0x1f32 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1f30:	3e c0       	rjmp	.+124    	; 0x1fae <KEYPAD_4x4_adjustKeyNumber+0x100>
    1f32:	37 c0       	rjmp	.+110    	; 0x1fa2 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1f34:	2b 81       	ldd	r18, Y+3	; 0x03
    1f36:	3c 81       	ldd	r19, Y+4	; 0x04
    1f38:	2c 30       	cpi	r18, 0x0C	; 12
    1f3a:	31 05       	cpc	r19, r1
    1f3c:	09 f4       	brne	.+2      	; 0x1f40 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1f3e:	46 c0       	rjmp	.+140    	; 0x1fcc <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1f40:	8b 81       	ldd	r24, Y+3	; 0x03
    1f42:	9c 81       	ldd	r25, Y+4	; 0x04
    1f44:	8d 30       	cpi	r24, 0x0D	; 13
    1f46:	91 05       	cpc	r25, r1
    1f48:	5c f4       	brge	.+22     	; 0x1f60 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1f4a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f4c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f4e:	2a 30       	cpi	r18, 0x0A	; 10
    1f50:	31 05       	cpc	r19, r1
    1f52:	b1 f1       	breq	.+108    	; 0x1fc0 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1f54:	8b 81       	ldd	r24, Y+3	; 0x03
    1f56:	9c 81       	ldd	r25, Y+4	; 0x04
    1f58:	8b 30       	cpi	r24, 0x0B	; 11
    1f5a:	91 05       	cpc	r25, r1
    1f5c:	a4 f5       	brge	.+104    	; 0x1fc6 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1f5e:	2d c0       	rjmp	.+90     	; 0x1fba <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1f60:	2b 81       	ldd	r18, Y+3	; 0x03
    1f62:	3c 81       	ldd	r19, Y+4	; 0x04
    1f64:	2e 30       	cpi	r18, 0x0E	; 14
    1f66:	31 05       	cpc	r19, r1
    1f68:	b9 f1       	breq	.+110    	; 0x1fd8 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f6e:	8e 30       	cpi	r24, 0x0E	; 14
    1f70:	91 05       	cpc	r25, r1
    1f72:	7c f1       	brlt	.+94     	; 0x1fd2 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1f74:	2b 81       	ldd	r18, Y+3	; 0x03
    1f76:	3c 81       	ldd	r19, Y+4	; 0x04
    1f78:	2f 30       	cpi	r18, 0x0F	; 15
    1f7a:	31 05       	cpc	r19, r1
    1f7c:	79 f1       	breq	.+94     	; 0x1fdc <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f80:	9c 81       	ldd	r25, Y+4	; 0x04
    1f82:	80 31       	cpi	r24, 0x10	; 16
    1f84:	91 05       	cpc	r25, r1
    1f86:	69 f1       	breq	.+90     	; 0x1fe2 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1f88:	2f c0       	rjmp	.+94     	; 0x1fe8 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1f8a:	87 e0       	ldi	r24, 0x07	; 7
    1f8c:	89 83       	std	Y+1, r24	; 0x01
    1f8e:	2e c0       	rjmp	.+92     	; 0x1fec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1f90:	88 e0       	ldi	r24, 0x08	; 8
    1f92:	89 83       	std	Y+1, r24	; 0x01
    1f94:	2b c0       	rjmp	.+86     	; 0x1fec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1f96:	89 e0       	ldi	r24, 0x09	; 9
    1f98:	89 83       	std	Y+1, r24	; 0x01
    1f9a:	28 c0       	rjmp	.+80     	; 0x1fec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1f9c:	85 e2       	ldi	r24, 0x25	; 37
    1f9e:	89 83       	std	Y+1, r24	; 0x01
    1fa0:	25 c0       	rjmp	.+74     	; 0x1fec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1fa2:	84 e0       	ldi	r24, 0x04	; 4
    1fa4:	89 83       	std	Y+1, r24	; 0x01
    1fa6:	22 c0       	rjmp	.+68     	; 0x1fec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1fa8:	85 e0       	ldi	r24, 0x05	; 5
    1faa:	89 83       	std	Y+1, r24	; 0x01
    1fac:	1f c0       	rjmp	.+62     	; 0x1fec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1fae:	86 e0       	ldi	r24, 0x06	; 6
    1fb0:	89 83       	std	Y+1, r24	; 0x01
    1fb2:	1c c0       	rjmp	.+56     	; 0x1fec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1fb4:	8a e2       	ldi	r24, 0x2A	; 42
    1fb6:	89 83       	std	Y+1, r24	; 0x01
    1fb8:	19 c0       	rjmp	.+50     	; 0x1fec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	89 83       	std	Y+1, r24	; 0x01
    1fbe:	16 c0       	rjmp	.+44     	; 0x1fec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1fc0:	82 e0       	ldi	r24, 0x02	; 2
    1fc2:	89 83       	std	Y+1, r24	; 0x01
    1fc4:	13 c0       	rjmp	.+38     	; 0x1fec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1fc6:	83 e0       	ldi	r24, 0x03	; 3
    1fc8:	89 83       	std	Y+1, r24	; 0x01
    1fca:	10 c0       	rjmp	.+32     	; 0x1fec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1fcc:	8d e2       	ldi	r24, 0x2D	; 45
    1fce:	89 83       	std	Y+1, r24	; 0x01
    1fd0:	0d c0       	rjmp	.+26     	; 0x1fec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1fd2:	8d e0       	ldi	r24, 0x0D	; 13
    1fd4:	89 83       	std	Y+1, r24	; 0x01
    1fd6:	0a c0       	rjmp	.+20     	; 0x1fec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1fd8:	19 82       	std	Y+1, r1	; 0x01
    1fda:	08 c0       	rjmp	.+16     	; 0x1fec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1fdc:	8d e3       	ldi	r24, 0x3D	; 61
    1fde:	89 83       	std	Y+1, r24	; 0x01
    1fe0:	05 c0       	rjmp	.+10     	; 0x1fec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1fe2:	8b e2       	ldi	r24, 0x2B	; 43
    1fe4:	89 83       	std	Y+1, r24	; 0x01
    1fe6:	02 c0       	rjmp	.+4      	; 0x1fec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fea:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1fec:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1fee:	0f 90       	pop	r0
    1ff0:	0f 90       	pop	r0
    1ff2:	0f 90       	pop	r0
    1ff4:	0f 90       	pop	r0
    1ff6:	cf 91       	pop	r28
    1ff8:	df 91       	pop	r29
    1ffa:	08 95       	ret

00001ffc <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1ffc:	df 93       	push	r29
    1ffe:	cf 93       	push	r28
    2000:	cd b7       	in	r28, 0x3d	; 61
    2002:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2004:	83 e0       	ldi	r24, 0x03	; 3
    2006:	64 e0       	ldi	r22, 0x04	; 4
    2008:	41 e0       	ldi	r20, 0x01	; 1
    200a:	0e 94 c8 0b 	call	0x1790	; 0x1790 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    200e:	83 e0       	ldi	r24, 0x03	; 3
    2010:	65 e0       	ldi	r22, 0x05	; 5
    2012:	41 e0       	ldi	r20, 0x01	; 1
    2014:	0e 94 c8 0b 	call	0x1790	; 0x1790 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2018:	83 e0       	ldi	r24, 0x03	; 3
    201a:	66 e0       	ldi	r22, 0x06	; 6
    201c:	41 e0       	ldi	r20, 0x01	; 1
    201e:	0e 94 c8 0b 	call	0x1790	; 0x1790 <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2022:	82 e0       	ldi	r24, 0x02	; 2
    2024:	6f ef       	ldi	r22, 0xFF	; 255
    2026:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    202a:	88 e3       	ldi	r24, 0x38	; 56
    202c:	0e 94 21 10 	call	0x2042	; 0x2042 <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2030:	8c e0       	ldi	r24, 0x0C	; 12
    2032:	0e 94 21 10 	call	0x2042	; 0x2042 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	0e 94 21 10 	call	0x2042	; 0x2042 <LCD_sendCommand>
}
    203c:	cf 91       	pop	r28
    203e:	df 91       	pop	r29
    2040:	08 95       	ret

00002042 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2042:	df 93       	push	r29
    2044:	cf 93       	push	r28
    2046:	cd b7       	in	r28, 0x3d	; 61
    2048:	de b7       	in	r29, 0x3e	; 62
    204a:	ea 97       	sbiw	r28, 0x3a	; 58
    204c:	0f b6       	in	r0, 0x3f	; 63
    204e:	f8 94       	cli
    2050:	de bf       	out	0x3e, r29	; 62
    2052:	0f be       	out	0x3f, r0	; 63
    2054:	cd bf       	out	0x3d, r28	; 61
    2056:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    2058:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    205a:	83 e0       	ldi	r24, 0x03	; 3
    205c:	64 e0       	ldi	r22, 0x04	; 4
    205e:	40 e0       	ldi	r20, 0x00	; 0
    2060:	0e 94 b3 0c 	call	0x1966	; 0x1966 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2064:	83 e0       	ldi	r24, 0x03	; 3
    2066:	65 e0       	ldi	r22, 0x05	; 5
    2068:	40 e0       	ldi	r20, 0x00	; 0
    206a:	0e 94 b3 0c 	call	0x1966	; 0x1966 <GPIO_writePin>
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	a0 e8       	ldi	r26, 0x80	; 128
    2074:	bf e3       	ldi	r27, 0x3F	; 63
    2076:	8d ab       	std	Y+53, r24	; 0x35
    2078:	9e ab       	std	Y+54, r25	; 0x36
    207a:	af ab       	std	Y+55, r26	; 0x37
    207c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    207e:	6d a9       	ldd	r22, Y+53	; 0x35
    2080:	7e a9       	ldd	r23, Y+54	; 0x36
    2082:	8f a9       	ldd	r24, Y+55	; 0x37
    2084:	98 ad       	ldd	r25, Y+56	; 0x38
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	4a e7       	ldi	r20, 0x7A	; 122
    208c:	53 e4       	ldi	r21, 0x43	; 67
    208e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	89 ab       	std	Y+49, r24	; 0x31
    2098:	9a ab       	std	Y+50, r25	; 0x32
    209a:	ab ab       	std	Y+51, r26	; 0x33
    209c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    209e:	69 a9       	ldd	r22, Y+49	; 0x31
    20a0:	7a a9       	ldd	r23, Y+50	; 0x32
    20a2:	8b a9       	ldd	r24, Y+51	; 0x33
    20a4:	9c a9       	ldd	r25, Y+52	; 0x34
    20a6:	20 e0       	ldi	r18, 0x00	; 0
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	40 e8       	ldi	r20, 0x80	; 128
    20ac:	5f e3       	ldi	r21, 0x3F	; 63
    20ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20b2:	88 23       	and	r24, r24
    20b4:	2c f4       	brge	.+10     	; 0x20c0 <LCD_sendCommand+0x7e>
		__ticks = 1;
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	98 ab       	std	Y+48, r25	; 0x30
    20bc:	8f a7       	std	Y+47, r24	; 0x2f
    20be:	3f c0       	rjmp	.+126    	; 0x213e <LCD_sendCommand+0xfc>
	else if (__tmp > 65535)
    20c0:	69 a9       	ldd	r22, Y+49	; 0x31
    20c2:	7a a9       	ldd	r23, Y+50	; 0x32
    20c4:	8b a9       	ldd	r24, Y+51	; 0x33
    20c6:	9c a9       	ldd	r25, Y+52	; 0x34
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	3f ef       	ldi	r19, 0xFF	; 255
    20cc:	4f e7       	ldi	r20, 0x7F	; 127
    20ce:	57 e4       	ldi	r21, 0x47	; 71
    20d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20d4:	18 16       	cp	r1, r24
    20d6:	4c f5       	brge	.+82     	; 0x212a <LCD_sendCommand+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d8:	6d a9       	ldd	r22, Y+53	; 0x35
    20da:	7e a9       	ldd	r23, Y+54	; 0x36
    20dc:	8f a9       	ldd	r24, Y+55	; 0x37
    20de:	98 ad       	ldd	r25, Y+56	; 0x38
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	40 e2       	ldi	r20, 0x20	; 32
    20e6:	51 e4       	ldi	r21, 0x41	; 65
    20e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ec:	dc 01       	movw	r26, r24
    20ee:	cb 01       	movw	r24, r22
    20f0:	bc 01       	movw	r22, r24
    20f2:	cd 01       	movw	r24, r26
    20f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	98 ab       	std	Y+48, r25	; 0x30
    20fe:	8f a7       	std	Y+47, r24	; 0x2f
    2100:	0f c0       	rjmp	.+30     	; 0x2120 <LCD_sendCommand+0xde>
    2102:	89 e1       	ldi	r24, 0x19	; 25
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	9e a7       	std	Y+46, r25	; 0x2e
    2108:	8d a7       	std	Y+45, r24	; 0x2d
    210a:	8d a5       	ldd	r24, Y+45	; 0x2d
    210c:	9e a5       	ldd	r25, Y+46	; 0x2e
    210e:	01 97       	sbiw	r24, 0x01	; 1
    2110:	f1 f7       	brne	.-4      	; 0x210e <LCD_sendCommand+0xcc>
    2112:	9e a7       	std	Y+46, r25	; 0x2e
    2114:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2116:	8f a5       	ldd	r24, Y+47	; 0x2f
    2118:	98 a9       	ldd	r25, Y+48	; 0x30
    211a:	01 97       	sbiw	r24, 0x01	; 1
    211c:	98 ab       	std	Y+48, r25	; 0x30
    211e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2120:	8f a5       	ldd	r24, Y+47	; 0x2f
    2122:	98 a9       	ldd	r25, Y+48	; 0x30
    2124:	00 97       	sbiw	r24, 0x00	; 0
    2126:	69 f7       	brne	.-38     	; 0x2102 <LCD_sendCommand+0xc0>
    2128:	14 c0       	rjmp	.+40     	; 0x2152 <LCD_sendCommand+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    212a:	69 a9       	ldd	r22, Y+49	; 0x31
    212c:	7a a9       	ldd	r23, Y+50	; 0x32
    212e:	8b a9       	ldd	r24, Y+51	; 0x33
    2130:	9c a9       	ldd	r25, Y+52	; 0x34
    2132:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	98 ab       	std	Y+48, r25	; 0x30
    213c:	8f a7       	std	Y+47, r24	; 0x2f
    213e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2140:	98 a9       	ldd	r25, Y+48	; 0x30
    2142:	9c a7       	std	Y+44, r25	; 0x2c
    2144:	8b a7       	std	Y+43, r24	; 0x2b
    2146:	8b a5       	ldd	r24, Y+43	; 0x2b
    2148:	9c a5       	ldd	r25, Y+44	; 0x2c
    214a:	01 97       	sbiw	r24, 0x01	; 1
    214c:	f1 f7       	brne	.-4      	; 0x214a <LCD_sendCommand+0x108>
    214e:	9c a7       	std	Y+44, r25	; 0x2c
    2150:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2152:	83 e0       	ldi	r24, 0x03	; 3
    2154:	66 e0       	ldi	r22, 0x06	; 6
    2156:	41 e0       	ldi	r20, 0x01	; 1
    2158:	0e 94 b3 0c 	call	0x1966	; 0x1966 <GPIO_writePin>
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	a0 e8       	ldi	r26, 0x80	; 128
    2162:	bf e3       	ldi	r27, 0x3F	; 63
    2164:	8f a3       	std	Y+39, r24	; 0x27
    2166:	98 a7       	std	Y+40, r25	; 0x28
    2168:	a9 a7       	std	Y+41, r26	; 0x29
    216a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    216c:	6f a1       	ldd	r22, Y+39	; 0x27
    216e:	78 a5       	ldd	r23, Y+40	; 0x28
    2170:	89 a5       	ldd	r24, Y+41	; 0x29
    2172:	9a a5       	ldd	r25, Y+42	; 0x2a
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	4a e7       	ldi	r20, 0x7A	; 122
    217a:	53 e4       	ldi	r21, 0x43	; 67
    217c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	8b a3       	std	Y+35, r24	; 0x23
    2186:	9c a3       	std	Y+36, r25	; 0x24
    2188:	ad a3       	std	Y+37, r26	; 0x25
    218a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    218c:	6b a1       	ldd	r22, Y+35	; 0x23
    218e:	7c a1       	ldd	r23, Y+36	; 0x24
    2190:	8d a1       	ldd	r24, Y+37	; 0x25
    2192:	9e a1       	ldd	r25, Y+38	; 0x26
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	40 e8       	ldi	r20, 0x80	; 128
    219a:	5f e3       	ldi	r21, 0x3F	; 63
    219c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21a0:	88 23       	and	r24, r24
    21a2:	2c f4       	brge	.+10     	; 0x21ae <LCD_sendCommand+0x16c>
		__ticks = 1;
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	9a a3       	std	Y+34, r25	; 0x22
    21aa:	89 a3       	std	Y+33, r24	; 0x21
    21ac:	3f c0       	rjmp	.+126    	; 0x222c <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    21ae:	6b a1       	ldd	r22, Y+35	; 0x23
    21b0:	7c a1       	ldd	r23, Y+36	; 0x24
    21b2:	8d a1       	ldd	r24, Y+37	; 0x25
    21b4:	9e a1       	ldd	r25, Y+38	; 0x26
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	3f ef       	ldi	r19, 0xFF	; 255
    21ba:	4f e7       	ldi	r20, 0x7F	; 127
    21bc:	57 e4       	ldi	r21, 0x47	; 71
    21be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21c2:	18 16       	cp	r1, r24
    21c4:	4c f5       	brge	.+82     	; 0x2218 <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c6:	6f a1       	ldd	r22, Y+39	; 0x27
    21c8:	78 a5       	ldd	r23, Y+40	; 0x28
    21ca:	89 a5       	ldd	r24, Y+41	; 0x29
    21cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	40 e2       	ldi	r20, 0x20	; 32
    21d4:	51 e4       	ldi	r21, 0x41	; 65
    21d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	bc 01       	movw	r22, r24
    21e0:	cd 01       	movw	r24, r26
    21e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e6:	dc 01       	movw	r26, r24
    21e8:	cb 01       	movw	r24, r22
    21ea:	9a a3       	std	Y+34, r25	; 0x22
    21ec:	89 a3       	std	Y+33, r24	; 0x21
    21ee:	0f c0       	rjmp	.+30     	; 0x220e <LCD_sendCommand+0x1cc>
    21f0:	89 e1       	ldi	r24, 0x19	; 25
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	98 a3       	std	Y+32, r25	; 0x20
    21f6:	8f 8f       	std	Y+31, r24	; 0x1f
    21f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21fa:	98 a1       	ldd	r25, Y+32	; 0x20
    21fc:	01 97       	sbiw	r24, 0x01	; 1
    21fe:	f1 f7       	brne	.-4      	; 0x21fc <LCD_sendCommand+0x1ba>
    2200:	98 a3       	std	Y+32, r25	; 0x20
    2202:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2204:	89 a1       	ldd	r24, Y+33	; 0x21
    2206:	9a a1       	ldd	r25, Y+34	; 0x22
    2208:	01 97       	sbiw	r24, 0x01	; 1
    220a:	9a a3       	std	Y+34, r25	; 0x22
    220c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    220e:	89 a1       	ldd	r24, Y+33	; 0x21
    2210:	9a a1       	ldd	r25, Y+34	; 0x22
    2212:	00 97       	sbiw	r24, 0x00	; 0
    2214:	69 f7       	brne	.-38     	; 0x21f0 <LCD_sendCommand+0x1ae>
    2216:	14 c0       	rjmp	.+40     	; 0x2240 <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2218:	6b a1       	ldd	r22, Y+35	; 0x23
    221a:	7c a1       	ldd	r23, Y+36	; 0x24
    221c:	8d a1       	ldd	r24, Y+37	; 0x25
    221e:	9e a1       	ldd	r25, Y+38	; 0x26
    2220:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2224:	dc 01       	movw	r26, r24
    2226:	cb 01       	movw	r24, r22
    2228:	9a a3       	std	Y+34, r25	; 0x22
    222a:	89 a3       	std	Y+33, r24	; 0x21
    222c:	89 a1       	ldd	r24, Y+33	; 0x21
    222e:	9a a1       	ldd	r25, Y+34	; 0x22
    2230:	9e 8f       	std	Y+30, r25	; 0x1e
    2232:	8d 8f       	std	Y+29, r24	; 0x1d
    2234:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2236:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2238:	01 97       	sbiw	r24, 0x01	; 1
    223a:	f1 f7       	brne	.-4      	; 0x2238 <LCD_sendCommand+0x1f6>
    223c:	9e 8f       	std	Y+30, r25	; 0x1e
    223e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2240:	82 e0       	ldi	r24, 0x02	; 2
    2242:	6a ad       	ldd	r22, Y+58	; 0x3a
    2244:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <GPIO_writePort>
    2248:	80 e0       	ldi	r24, 0x00	; 0
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	a0 e8       	ldi	r26, 0x80	; 128
    224e:	bf e3       	ldi	r27, 0x3F	; 63
    2250:	89 8f       	std	Y+25, r24	; 0x19
    2252:	9a 8f       	std	Y+26, r25	; 0x1a
    2254:	ab 8f       	std	Y+27, r26	; 0x1b
    2256:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2258:	69 8d       	ldd	r22, Y+25	; 0x19
    225a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    225c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    225e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	4a e7       	ldi	r20, 0x7A	; 122
    2266:	53 e4       	ldi	r21, 0x43	; 67
    2268:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    226c:	dc 01       	movw	r26, r24
    226e:	cb 01       	movw	r24, r22
    2270:	8d 8b       	std	Y+21, r24	; 0x15
    2272:	9e 8b       	std	Y+22, r25	; 0x16
    2274:	af 8b       	std	Y+23, r26	; 0x17
    2276:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2278:	6d 89       	ldd	r22, Y+21	; 0x15
    227a:	7e 89       	ldd	r23, Y+22	; 0x16
    227c:	8f 89       	ldd	r24, Y+23	; 0x17
    227e:	98 8d       	ldd	r25, Y+24	; 0x18
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	40 e8       	ldi	r20, 0x80	; 128
    2286:	5f e3       	ldi	r21, 0x3F	; 63
    2288:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    228c:	88 23       	and	r24, r24
    228e:	2c f4       	brge	.+10     	; 0x229a <LCD_sendCommand+0x258>
		__ticks = 1;
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	9c 8b       	std	Y+20, r25	; 0x14
    2296:	8b 8b       	std	Y+19, r24	; 0x13
    2298:	3f c0       	rjmp	.+126    	; 0x2318 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    229a:	6d 89       	ldd	r22, Y+21	; 0x15
    229c:	7e 89       	ldd	r23, Y+22	; 0x16
    229e:	8f 89       	ldd	r24, Y+23	; 0x17
    22a0:	98 8d       	ldd	r25, Y+24	; 0x18
    22a2:	20 e0       	ldi	r18, 0x00	; 0
    22a4:	3f ef       	ldi	r19, 0xFF	; 255
    22a6:	4f e7       	ldi	r20, 0x7F	; 127
    22a8:	57 e4       	ldi	r21, 0x47	; 71
    22aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22ae:	18 16       	cp	r1, r24
    22b0:	4c f5       	brge	.+82     	; 0x2304 <LCD_sendCommand+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22b2:	69 8d       	ldd	r22, Y+25	; 0x19
    22b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	40 e2       	ldi	r20, 0x20	; 32
    22c0:	51 e4       	ldi	r21, 0x41	; 65
    22c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	bc 01       	movw	r22, r24
    22cc:	cd 01       	movw	r24, r26
    22ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	9c 8b       	std	Y+20, r25	; 0x14
    22d8:	8b 8b       	std	Y+19, r24	; 0x13
    22da:	0f c0       	rjmp	.+30     	; 0x22fa <LCD_sendCommand+0x2b8>
    22dc:	89 e1       	ldi	r24, 0x19	; 25
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	9a 8b       	std	Y+18, r25	; 0x12
    22e2:	89 8b       	std	Y+17, r24	; 0x11
    22e4:	89 89       	ldd	r24, Y+17	; 0x11
    22e6:	9a 89       	ldd	r25, Y+18	; 0x12
    22e8:	01 97       	sbiw	r24, 0x01	; 1
    22ea:	f1 f7       	brne	.-4      	; 0x22e8 <LCD_sendCommand+0x2a6>
    22ec:	9a 8b       	std	Y+18, r25	; 0x12
    22ee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22f0:	8b 89       	ldd	r24, Y+19	; 0x13
    22f2:	9c 89       	ldd	r25, Y+20	; 0x14
    22f4:	01 97       	sbiw	r24, 0x01	; 1
    22f6:	9c 8b       	std	Y+20, r25	; 0x14
    22f8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22fa:	8b 89       	ldd	r24, Y+19	; 0x13
    22fc:	9c 89       	ldd	r25, Y+20	; 0x14
    22fe:	00 97       	sbiw	r24, 0x00	; 0
    2300:	69 f7       	brne	.-38     	; 0x22dc <LCD_sendCommand+0x29a>
    2302:	14 c0       	rjmp	.+40     	; 0x232c <LCD_sendCommand+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2304:	6d 89       	ldd	r22, Y+21	; 0x15
    2306:	7e 89       	ldd	r23, Y+22	; 0x16
    2308:	8f 89       	ldd	r24, Y+23	; 0x17
    230a:	98 8d       	ldd	r25, Y+24	; 0x18
    230c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	9c 8b       	std	Y+20, r25	; 0x14
    2316:	8b 8b       	std	Y+19, r24	; 0x13
    2318:	8b 89       	ldd	r24, Y+19	; 0x13
    231a:	9c 89       	ldd	r25, Y+20	; 0x14
    231c:	98 8b       	std	Y+16, r25	; 0x10
    231e:	8f 87       	std	Y+15, r24	; 0x0f
    2320:	8f 85       	ldd	r24, Y+15	; 0x0f
    2322:	98 89       	ldd	r25, Y+16	; 0x10
    2324:	01 97       	sbiw	r24, 0x01	; 1
    2326:	f1 f7       	brne	.-4      	; 0x2324 <LCD_sendCommand+0x2e2>
    2328:	98 8b       	std	Y+16, r25	; 0x10
    232a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    232c:	83 e0       	ldi	r24, 0x03	; 3
    232e:	66 e0       	ldi	r22, 0x06	; 6
    2330:	40 e0       	ldi	r20, 0x00	; 0
    2332:	0e 94 b3 0c 	call	0x1966	; 0x1966 <GPIO_writePin>
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	a0 e8       	ldi	r26, 0x80	; 128
    233c:	bf e3       	ldi	r27, 0x3F	; 63
    233e:	8b 87       	std	Y+11, r24	; 0x0b
    2340:	9c 87       	std	Y+12, r25	; 0x0c
    2342:	ad 87       	std	Y+13, r26	; 0x0d
    2344:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2346:	6b 85       	ldd	r22, Y+11	; 0x0b
    2348:	7c 85       	ldd	r23, Y+12	; 0x0c
    234a:	8d 85       	ldd	r24, Y+13	; 0x0d
    234c:	9e 85       	ldd	r25, Y+14	; 0x0e
    234e:	20 e0       	ldi	r18, 0x00	; 0
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	4a e7       	ldi	r20, 0x7A	; 122
    2354:	53 e4       	ldi	r21, 0x43	; 67
    2356:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    235a:	dc 01       	movw	r26, r24
    235c:	cb 01       	movw	r24, r22
    235e:	8f 83       	std	Y+7, r24	; 0x07
    2360:	98 87       	std	Y+8, r25	; 0x08
    2362:	a9 87       	std	Y+9, r26	; 0x09
    2364:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2366:	6f 81       	ldd	r22, Y+7	; 0x07
    2368:	78 85       	ldd	r23, Y+8	; 0x08
    236a:	89 85       	ldd	r24, Y+9	; 0x09
    236c:	9a 85       	ldd	r25, Y+10	; 0x0a
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	40 e8       	ldi	r20, 0x80	; 128
    2374:	5f e3       	ldi	r21, 0x3F	; 63
    2376:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    237a:	88 23       	and	r24, r24
    237c:	2c f4       	brge	.+10     	; 0x2388 <LCD_sendCommand+0x346>
		__ticks = 1;
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	9e 83       	std	Y+6, r25	; 0x06
    2384:	8d 83       	std	Y+5, r24	; 0x05
    2386:	3f c0       	rjmp	.+126    	; 0x2406 <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
    2388:	6f 81       	ldd	r22, Y+7	; 0x07
    238a:	78 85       	ldd	r23, Y+8	; 0x08
    238c:	89 85       	ldd	r24, Y+9	; 0x09
    238e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	3f ef       	ldi	r19, 0xFF	; 255
    2394:	4f e7       	ldi	r20, 0x7F	; 127
    2396:	57 e4       	ldi	r21, 0x47	; 71
    2398:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    239c:	18 16       	cp	r1, r24
    239e:	4c f5       	brge	.+82     	; 0x23f2 <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    23a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    23a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    23a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    23a8:	20 e0       	ldi	r18, 0x00	; 0
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	40 e2       	ldi	r20, 0x20	; 32
    23ae:	51 e4       	ldi	r21, 0x41	; 65
    23b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b4:	dc 01       	movw	r26, r24
    23b6:	cb 01       	movw	r24, r22
    23b8:	bc 01       	movw	r22, r24
    23ba:	cd 01       	movw	r24, r26
    23bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c0:	dc 01       	movw	r26, r24
    23c2:	cb 01       	movw	r24, r22
    23c4:	9e 83       	std	Y+6, r25	; 0x06
    23c6:	8d 83       	std	Y+5, r24	; 0x05
    23c8:	0f c0       	rjmp	.+30     	; 0x23e8 <LCD_sendCommand+0x3a6>
    23ca:	89 e1       	ldi	r24, 0x19	; 25
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	9c 83       	std	Y+4, r25	; 0x04
    23d0:	8b 83       	std	Y+3, r24	; 0x03
    23d2:	8b 81       	ldd	r24, Y+3	; 0x03
    23d4:	9c 81       	ldd	r25, Y+4	; 0x04
    23d6:	01 97       	sbiw	r24, 0x01	; 1
    23d8:	f1 f7       	brne	.-4      	; 0x23d6 <LCD_sendCommand+0x394>
    23da:	9c 83       	std	Y+4, r25	; 0x04
    23dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23de:	8d 81       	ldd	r24, Y+5	; 0x05
    23e0:	9e 81       	ldd	r25, Y+6	; 0x06
    23e2:	01 97       	sbiw	r24, 0x01	; 1
    23e4:	9e 83       	std	Y+6, r25	; 0x06
    23e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23e8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ea:	9e 81       	ldd	r25, Y+6	; 0x06
    23ec:	00 97       	sbiw	r24, 0x00	; 0
    23ee:	69 f7       	brne	.-38     	; 0x23ca <LCD_sendCommand+0x388>
    23f0:	14 c0       	rjmp	.+40     	; 0x241a <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23f2:	6f 81       	ldd	r22, Y+7	; 0x07
    23f4:	78 85       	ldd	r23, Y+8	; 0x08
    23f6:	89 85       	ldd	r24, Y+9	; 0x09
    23f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fe:	dc 01       	movw	r26, r24
    2400:	cb 01       	movw	r24, r22
    2402:	9e 83       	std	Y+6, r25	; 0x06
    2404:	8d 83       	std	Y+5, r24	; 0x05
    2406:	8d 81       	ldd	r24, Y+5	; 0x05
    2408:	9e 81       	ldd	r25, Y+6	; 0x06
    240a:	9a 83       	std	Y+2, r25	; 0x02
    240c:	89 83       	std	Y+1, r24	; 0x01
    240e:	89 81       	ldd	r24, Y+1	; 0x01
    2410:	9a 81       	ldd	r25, Y+2	; 0x02
    2412:	01 97       	sbiw	r24, 0x01	; 1
    2414:	f1 f7       	brne	.-4      	; 0x2412 <LCD_sendCommand+0x3d0>
    2416:	9a 83       	std	Y+2, r25	; 0x02
    2418:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    241a:	ea 96       	adiw	r28, 0x3a	; 58
    241c:	0f b6       	in	r0, 0x3f	; 63
    241e:	f8 94       	cli
    2420:	de bf       	out	0x3e, r29	; 62
    2422:	0f be       	out	0x3f, r0	; 63
    2424:	cd bf       	out	0x3d, r28	; 61
    2426:	cf 91       	pop	r28
    2428:	df 91       	pop	r29
    242a:	08 95       	ret

0000242c <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    242c:	df 93       	push	r29
    242e:	cf 93       	push	r28
    2430:	cd b7       	in	r28, 0x3d	; 61
    2432:	de b7       	in	r29, 0x3e	; 62
    2434:	ea 97       	sbiw	r28, 0x3a	; 58
    2436:	0f b6       	in	r0, 0x3f	; 63
    2438:	f8 94       	cli
    243a:	de bf       	out	0x3e, r29	; 62
    243c:	0f be       	out	0x3f, r0	; 63
    243e:	cd bf       	out	0x3d, r28	; 61
    2440:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    2442:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2444:	83 e0       	ldi	r24, 0x03	; 3
    2446:	64 e0       	ldi	r22, 0x04	; 4
    2448:	41 e0       	ldi	r20, 0x01	; 1
    244a:	0e 94 b3 0c 	call	0x1966	; 0x1966 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    244e:	83 e0       	ldi	r24, 0x03	; 3
    2450:	65 e0       	ldi	r22, 0x05	; 5
    2452:	40 e0       	ldi	r20, 0x00	; 0
    2454:	0e 94 b3 0c 	call	0x1966	; 0x1966 <GPIO_writePin>
    2458:	80 e0       	ldi	r24, 0x00	; 0
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	a0 e8       	ldi	r26, 0x80	; 128
    245e:	bf e3       	ldi	r27, 0x3F	; 63
    2460:	8d ab       	std	Y+53, r24	; 0x35
    2462:	9e ab       	std	Y+54, r25	; 0x36
    2464:	af ab       	std	Y+55, r26	; 0x37
    2466:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2468:	6d a9       	ldd	r22, Y+53	; 0x35
    246a:	7e a9       	ldd	r23, Y+54	; 0x36
    246c:	8f a9       	ldd	r24, Y+55	; 0x37
    246e:	98 ad       	ldd	r25, Y+56	; 0x38
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	4a e7       	ldi	r20, 0x7A	; 122
    2476:	53 e4       	ldi	r21, 0x43	; 67
    2478:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	89 ab       	std	Y+49, r24	; 0x31
    2482:	9a ab       	std	Y+50, r25	; 0x32
    2484:	ab ab       	std	Y+51, r26	; 0x33
    2486:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2488:	69 a9       	ldd	r22, Y+49	; 0x31
    248a:	7a a9       	ldd	r23, Y+50	; 0x32
    248c:	8b a9       	ldd	r24, Y+51	; 0x33
    248e:	9c a9       	ldd	r25, Y+52	; 0x34
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	40 e8       	ldi	r20, 0x80	; 128
    2496:	5f e3       	ldi	r21, 0x3F	; 63
    2498:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    249c:	88 23       	and	r24, r24
    249e:	2c f4       	brge	.+10     	; 0x24aa <LCD_displayCharacter+0x7e>
		__ticks = 1;
    24a0:	81 e0       	ldi	r24, 0x01	; 1
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	98 ab       	std	Y+48, r25	; 0x30
    24a6:	8f a7       	std	Y+47, r24	; 0x2f
    24a8:	3f c0       	rjmp	.+126    	; 0x2528 <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
    24aa:	69 a9       	ldd	r22, Y+49	; 0x31
    24ac:	7a a9       	ldd	r23, Y+50	; 0x32
    24ae:	8b a9       	ldd	r24, Y+51	; 0x33
    24b0:	9c a9       	ldd	r25, Y+52	; 0x34
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	3f ef       	ldi	r19, 0xFF	; 255
    24b6:	4f e7       	ldi	r20, 0x7F	; 127
    24b8:	57 e4       	ldi	r21, 0x47	; 71
    24ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24be:	18 16       	cp	r1, r24
    24c0:	4c f5       	brge	.+82     	; 0x2514 <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c2:	6d a9       	ldd	r22, Y+53	; 0x35
    24c4:	7e a9       	ldd	r23, Y+54	; 0x36
    24c6:	8f a9       	ldd	r24, Y+55	; 0x37
    24c8:	98 ad       	ldd	r25, Y+56	; 0x38
    24ca:	20 e0       	ldi	r18, 0x00	; 0
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	40 e2       	ldi	r20, 0x20	; 32
    24d0:	51 e4       	ldi	r21, 0x41	; 65
    24d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d6:	dc 01       	movw	r26, r24
    24d8:	cb 01       	movw	r24, r22
    24da:	bc 01       	movw	r22, r24
    24dc:	cd 01       	movw	r24, r26
    24de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e2:	dc 01       	movw	r26, r24
    24e4:	cb 01       	movw	r24, r22
    24e6:	98 ab       	std	Y+48, r25	; 0x30
    24e8:	8f a7       	std	Y+47, r24	; 0x2f
    24ea:	0f c0       	rjmp	.+30     	; 0x250a <LCD_displayCharacter+0xde>
    24ec:	89 e1       	ldi	r24, 0x19	; 25
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	9e a7       	std	Y+46, r25	; 0x2e
    24f2:	8d a7       	std	Y+45, r24	; 0x2d
    24f4:	8d a5       	ldd	r24, Y+45	; 0x2d
    24f6:	9e a5       	ldd	r25, Y+46	; 0x2e
    24f8:	01 97       	sbiw	r24, 0x01	; 1
    24fa:	f1 f7       	brne	.-4      	; 0x24f8 <LCD_displayCharacter+0xcc>
    24fc:	9e a7       	std	Y+46, r25	; 0x2e
    24fe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2500:	8f a5       	ldd	r24, Y+47	; 0x2f
    2502:	98 a9       	ldd	r25, Y+48	; 0x30
    2504:	01 97       	sbiw	r24, 0x01	; 1
    2506:	98 ab       	std	Y+48, r25	; 0x30
    2508:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    250a:	8f a5       	ldd	r24, Y+47	; 0x2f
    250c:	98 a9       	ldd	r25, Y+48	; 0x30
    250e:	00 97       	sbiw	r24, 0x00	; 0
    2510:	69 f7       	brne	.-38     	; 0x24ec <LCD_displayCharacter+0xc0>
    2512:	14 c0       	rjmp	.+40     	; 0x253c <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2514:	69 a9       	ldd	r22, Y+49	; 0x31
    2516:	7a a9       	ldd	r23, Y+50	; 0x32
    2518:	8b a9       	ldd	r24, Y+51	; 0x33
    251a:	9c a9       	ldd	r25, Y+52	; 0x34
    251c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2520:	dc 01       	movw	r26, r24
    2522:	cb 01       	movw	r24, r22
    2524:	98 ab       	std	Y+48, r25	; 0x30
    2526:	8f a7       	std	Y+47, r24	; 0x2f
    2528:	8f a5       	ldd	r24, Y+47	; 0x2f
    252a:	98 a9       	ldd	r25, Y+48	; 0x30
    252c:	9c a7       	std	Y+44, r25	; 0x2c
    252e:	8b a7       	std	Y+43, r24	; 0x2b
    2530:	8b a5       	ldd	r24, Y+43	; 0x2b
    2532:	9c a5       	ldd	r25, Y+44	; 0x2c
    2534:	01 97       	sbiw	r24, 0x01	; 1
    2536:	f1 f7       	brne	.-4      	; 0x2534 <LCD_displayCharacter+0x108>
    2538:	9c a7       	std	Y+44, r25	; 0x2c
    253a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    253c:	83 e0       	ldi	r24, 0x03	; 3
    253e:	66 e0       	ldi	r22, 0x06	; 6
    2540:	41 e0       	ldi	r20, 0x01	; 1
    2542:	0e 94 b3 0c 	call	0x1966	; 0x1966 <GPIO_writePin>
    2546:	80 e0       	ldi	r24, 0x00	; 0
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	a0 e8       	ldi	r26, 0x80	; 128
    254c:	bf e3       	ldi	r27, 0x3F	; 63
    254e:	8f a3       	std	Y+39, r24	; 0x27
    2550:	98 a7       	std	Y+40, r25	; 0x28
    2552:	a9 a7       	std	Y+41, r26	; 0x29
    2554:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2556:	6f a1       	ldd	r22, Y+39	; 0x27
    2558:	78 a5       	ldd	r23, Y+40	; 0x28
    255a:	89 a5       	ldd	r24, Y+41	; 0x29
    255c:	9a a5       	ldd	r25, Y+42	; 0x2a
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	4a e7       	ldi	r20, 0x7A	; 122
    2564:	53 e4       	ldi	r21, 0x43	; 67
    2566:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	8b a3       	std	Y+35, r24	; 0x23
    2570:	9c a3       	std	Y+36, r25	; 0x24
    2572:	ad a3       	std	Y+37, r26	; 0x25
    2574:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2576:	6b a1       	ldd	r22, Y+35	; 0x23
    2578:	7c a1       	ldd	r23, Y+36	; 0x24
    257a:	8d a1       	ldd	r24, Y+37	; 0x25
    257c:	9e a1       	ldd	r25, Y+38	; 0x26
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	40 e8       	ldi	r20, 0x80	; 128
    2584:	5f e3       	ldi	r21, 0x3F	; 63
    2586:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    258a:	88 23       	and	r24, r24
    258c:	2c f4       	brge	.+10     	; 0x2598 <LCD_displayCharacter+0x16c>
		__ticks = 1;
    258e:	81 e0       	ldi	r24, 0x01	; 1
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	9a a3       	std	Y+34, r25	; 0x22
    2594:	89 a3       	std	Y+33, r24	; 0x21
    2596:	3f c0       	rjmp	.+126    	; 0x2616 <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    2598:	6b a1       	ldd	r22, Y+35	; 0x23
    259a:	7c a1       	ldd	r23, Y+36	; 0x24
    259c:	8d a1       	ldd	r24, Y+37	; 0x25
    259e:	9e a1       	ldd	r25, Y+38	; 0x26
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	3f ef       	ldi	r19, 0xFF	; 255
    25a4:	4f e7       	ldi	r20, 0x7F	; 127
    25a6:	57 e4       	ldi	r21, 0x47	; 71
    25a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25ac:	18 16       	cp	r1, r24
    25ae:	4c f5       	brge	.+82     	; 0x2602 <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25b0:	6f a1       	ldd	r22, Y+39	; 0x27
    25b2:	78 a5       	ldd	r23, Y+40	; 0x28
    25b4:	89 a5       	ldd	r24, Y+41	; 0x29
    25b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	40 e2       	ldi	r20, 0x20	; 32
    25be:	51 e4       	ldi	r21, 0x41	; 65
    25c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c4:	dc 01       	movw	r26, r24
    25c6:	cb 01       	movw	r24, r22
    25c8:	bc 01       	movw	r22, r24
    25ca:	cd 01       	movw	r24, r26
    25cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d0:	dc 01       	movw	r26, r24
    25d2:	cb 01       	movw	r24, r22
    25d4:	9a a3       	std	Y+34, r25	; 0x22
    25d6:	89 a3       	std	Y+33, r24	; 0x21
    25d8:	0f c0       	rjmp	.+30     	; 0x25f8 <LCD_displayCharacter+0x1cc>
    25da:	89 e1       	ldi	r24, 0x19	; 25
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	98 a3       	std	Y+32, r25	; 0x20
    25e0:	8f 8f       	std	Y+31, r24	; 0x1f
    25e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25e4:	98 a1       	ldd	r25, Y+32	; 0x20
    25e6:	01 97       	sbiw	r24, 0x01	; 1
    25e8:	f1 f7       	brne	.-4      	; 0x25e6 <LCD_displayCharacter+0x1ba>
    25ea:	98 a3       	std	Y+32, r25	; 0x20
    25ec:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ee:	89 a1       	ldd	r24, Y+33	; 0x21
    25f0:	9a a1       	ldd	r25, Y+34	; 0x22
    25f2:	01 97       	sbiw	r24, 0x01	; 1
    25f4:	9a a3       	std	Y+34, r25	; 0x22
    25f6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25f8:	89 a1       	ldd	r24, Y+33	; 0x21
    25fa:	9a a1       	ldd	r25, Y+34	; 0x22
    25fc:	00 97       	sbiw	r24, 0x00	; 0
    25fe:	69 f7       	brne	.-38     	; 0x25da <LCD_displayCharacter+0x1ae>
    2600:	14 c0       	rjmp	.+40     	; 0x262a <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2602:	6b a1       	ldd	r22, Y+35	; 0x23
    2604:	7c a1       	ldd	r23, Y+36	; 0x24
    2606:	8d a1       	ldd	r24, Y+37	; 0x25
    2608:	9e a1       	ldd	r25, Y+38	; 0x26
    260a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    260e:	dc 01       	movw	r26, r24
    2610:	cb 01       	movw	r24, r22
    2612:	9a a3       	std	Y+34, r25	; 0x22
    2614:	89 a3       	std	Y+33, r24	; 0x21
    2616:	89 a1       	ldd	r24, Y+33	; 0x21
    2618:	9a a1       	ldd	r25, Y+34	; 0x22
    261a:	9e 8f       	std	Y+30, r25	; 0x1e
    261c:	8d 8f       	std	Y+29, r24	; 0x1d
    261e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2620:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2622:	01 97       	sbiw	r24, 0x01	; 1
    2624:	f1 f7       	brne	.-4      	; 0x2622 <LCD_displayCharacter+0x1f6>
    2626:	9e 8f       	std	Y+30, r25	; 0x1e
    2628:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    262a:	82 e0       	ldi	r24, 0x02	; 2
    262c:	6a ad       	ldd	r22, Y+58	; 0x3a
    262e:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <GPIO_writePort>
    2632:	80 e0       	ldi	r24, 0x00	; 0
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	a0 e8       	ldi	r26, 0x80	; 128
    2638:	bf e3       	ldi	r27, 0x3F	; 63
    263a:	89 8f       	std	Y+25, r24	; 0x19
    263c:	9a 8f       	std	Y+26, r25	; 0x1a
    263e:	ab 8f       	std	Y+27, r26	; 0x1b
    2640:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2642:	69 8d       	ldd	r22, Y+25	; 0x19
    2644:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2646:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2648:	9c 8d       	ldd	r25, Y+28	; 0x1c
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	4a e7       	ldi	r20, 0x7A	; 122
    2650:	53 e4       	ldi	r21, 0x43	; 67
    2652:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2656:	dc 01       	movw	r26, r24
    2658:	cb 01       	movw	r24, r22
    265a:	8d 8b       	std	Y+21, r24	; 0x15
    265c:	9e 8b       	std	Y+22, r25	; 0x16
    265e:	af 8b       	std	Y+23, r26	; 0x17
    2660:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2662:	6d 89       	ldd	r22, Y+21	; 0x15
    2664:	7e 89       	ldd	r23, Y+22	; 0x16
    2666:	8f 89       	ldd	r24, Y+23	; 0x17
    2668:	98 8d       	ldd	r25, Y+24	; 0x18
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	40 e8       	ldi	r20, 0x80	; 128
    2670:	5f e3       	ldi	r21, 0x3F	; 63
    2672:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2676:	88 23       	and	r24, r24
    2678:	2c f4       	brge	.+10     	; 0x2684 <LCD_displayCharacter+0x258>
		__ticks = 1;
    267a:	81 e0       	ldi	r24, 0x01	; 1
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	9c 8b       	std	Y+20, r25	; 0x14
    2680:	8b 8b       	std	Y+19, r24	; 0x13
    2682:	3f c0       	rjmp	.+126    	; 0x2702 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2684:	6d 89       	ldd	r22, Y+21	; 0x15
    2686:	7e 89       	ldd	r23, Y+22	; 0x16
    2688:	8f 89       	ldd	r24, Y+23	; 0x17
    268a:	98 8d       	ldd	r25, Y+24	; 0x18
    268c:	20 e0       	ldi	r18, 0x00	; 0
    268e:	3f ef       	ldi	r19, 0xFF	; 255
    2690:	4f e7       	ldi	r20, 0x7F	; 127
    2692:	57 e4       	ldi	r21, 0x47	; 71
    2694:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2698:	18 16       	cp	r1, r24
    269a:	4c f5       	brge	.+82     	; 0x26ee <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    269c:	69 8d       	ldd	r22, Y+25	; 0x19
    269e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26a4:	20 e0       	ldi	r18, 0x00	; 0
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	40 e2       	ldi	r20, 0x20	; 32
    26aa:	51 e4       	ldi	r21, 0x41	; 65
    26ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b0:	dc 01       	movw	r26, r24
    26b2:	cb 01       	movw	r24, r22
    26b4:	bc 01       	movw	r22, r24
    26b6:	cd 01       	movw	r24, r26
    26b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26bc:	dc 01       	movw	r26, r24
    26be:	cb 01       	movw	r24, r22
    26c0:	9c 8b       	std	Y+20, r25	; 0x14
    26c2:	8b 8b       	std	Y+19, r24	; 0x13
    26c4:	0f c0       	rjmp	.+30     	; 0x26e4 <LCD_displayCharacter+0x2b8>
    26c6:	89 e1       	ldi	r24, 0x19	; 25
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	9a 8b       	std	Y+18, r25	; 0x12
    26cc:	89 8b       	std	Y+17, r24	; 0x11
    26ce:	89 89       	ldd	r24, Y+17	; 0x11
    26d0:	9a 89       	ldd	r25, Y+18	; 0x12
    26d2:	01 97       	sbiw	r24, 0x01	; 1
    26d4:	f1 f7       	brne	.-4      	; 0x26d2 <LCD_displayCharacter+0x2a6>
    26d6:	9a 8b       	std	Y+18, r25	; 0x12
    26d8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26da:	8b 89       	ldd	r24, Y+19	; 0x13
    26dc:	9c 89       	ldd	r25, Y+20	; 0x14
    26de:	01 97       	sbiw	r24, 0x01	; 1
    26e0:	9c 8b       	std	Y+20, r25	; 0x14
    26e2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26e4:	8b 89       	ldd	r24, Y+19	; 0x13
    26e6:	9c 89       	ldd	r25, Y+20	; 0x14
    26e8:	00 97       	sbiw	r24, 0x00	; 0
    26ea:	69 f7       	brne	.-38     	; 0x26c6 <LCD_displayCharacter+0x29a>
    26ec:	14 c0       	rjmp	.+40     	; 0x2716 <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ee:	6d 89       	ldd	r22, Y+21	; 0x15
    26f0:	7e 89       	ldd	r23, Y+22	; 0x16
    26f2:	8f 89       	ldd	r24, Y+23	; 0x17
    26f4:	98 8d       	ldd	r25, Y+24	; 0x18
    26f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26fa:	dc 01       	movw	r26, r24
    26fc:	cb 01       	movw	r24, r22
    26fe:	9c 8b       	std	Y+20, r25	; 0x14
    2700:	8b 8b       	std	Y+19, r24	; 0x13
    2702:	8b 89       	ldd	r24, Y+19	; 0x13
    2704:	9c 89       	ldd	r25, Y+20	; 0x14
    2706:	98 8b       	std	Y+16, r25	; 0x10
    2708:	8f 87       	std	Y+15, r24	; 0x0f
    270a:	8f 85       	ldd	r24, Y+15	; 0x0f
    270c:	98 89       	ldd	r25, Y+16	; 0x10
    270e:	01 97       	sbiw	r24, 0x01	; 1
    2710:	f1 f7       	brne	.-4      	; 0x270e <LCD_displayCharacter+0x2e2>
    2712:	98 8b       	std	Y+16, r25	; 0x10
    2714:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2716:	83 e0       	ldi	r24, 0x03	; 3
    2718:	66 e0       	ldi	r22, 0x06	; 6
    271a:	40 e0       	ldi	r20, 0x00	; 0
    271c:	0e 94 b3 0c 	call	0x1966	; 0x1966 <GPIO_writePin>
    2720:	80 e0       	ldi	r24, 0x00	; 0
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	a0 e8       	ldi	r26, 0x80	; 128
    2726:	bf e3       	ldi	r27, 0x3F	; 63
    2728:	8b 87       	std	Y+11, r24	; 0x0b
    272a:	9c 87       	std	Y+12, r25	; 0x0c
    272c:	ad 87       	std	Y+13, r26	; 0x0d
    272e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2730:	6b 85       	ldd	r22, Y+11	; 0x0b
    2732:	7c 85       	ldd	r23, Y+12	; 0x0c
    2734:	8d 85       	ldd	r24, Y+13	; 0x0d
    2736:	9e 85       	ldd	r25, Y+14	; 0x0e
    2738:	20 e0       	ldi	r18, 0x00	; 0
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	4a e7       	ldi	r20, 0x7A	; 122
    273e:	53 e4       	ldi	r21, 0x43	; 67
    2740:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2744:	dc 01       	movw	r26, r24
    2746:	cb 01       	movw	r24, r22
    2748:	8f 83       	std	Y+7, r24	; 0x07
    274a:	98 87       	std	Y+8, r25	; 0x08
    274c:	a9 87       	std	Y+9, r26	; 0x09
    274e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2750:	6f 81       	ldd	r22, Y+7	; 0x07
    2752:	78 85       	ldd	r23, Y+8	; 0x08
    2754:	89 85       	ldd	r24, Y+9	; 0x09
    2756:	9a 85       	ldd	r25, Y+10	; 0x0a
    2758:	20 e0       	ldi	r18, 0x00	; 0
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	40 e8       	ldi	r20, 0x80	; 128
    275e:	5f e3       	ldi	r21, 0x3F	; 63
    2760:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2764:	88 23       	and	r24, r24
    2766:	2c f4       	brge	.+10     	; 0x2772 <LCD_displayCharacter+0x346>
		__ticks = 1;
    2768:	81 e0       	ldi	r24, 0x01	; 1
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	9e 83       	std	Y+6, r25	; 0x06
    276e:	8d 83       	std	Y+5, r24	; 0x05
    2770:	3f c0       	rjmp	.+126    	; 0x27f0 <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    2772:	6f 81       	ldd	r22, Y+7	; 0x07
    2774:	78 85       	ldd	r23, Y+8	; 0x08
    2776:	89 85       	ldd	r24, Y+9	; 0x09
    2778:	9a 85       	ldd	r25, Y+10	; 0x0a
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	3f ef       	ldi	r19, 0xFF	; 255
    277e:	4f e7       	ldi	r20, 0x7F	; 127
    2780:	57 e4       	ldi	r21, 0x47	; 71
    2782:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2786:	18 16       	cp	r1, r24
    2788:	4c f5       	brge	.+82     	; 0x27dc <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    278a:	6b 85       	ldd	r22, Y+11	; 0x0b
    278c:	7c 85       	ldd	r23, Y+12	; 0x0c
    278e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2790:	9e 85       	ldd	r25, Y+14	; 0x0e
    2792:	20 e0       	ldi	r18, 0x00	; 0
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	40 e2       	ldi	r20, 0x20	; 32
    2798:	51 e4       	ldi	r21, 0x41	; 65
    279a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    279e:	dc 01       	movw	r26, r24
    27a0:	cb 01       	movw	r24, r22
    27a2:	bc 01       	movw	r22, r24
    27a4:	cd 01       	movw	r24, r26
    27a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27aa:	dc 01       	movw	r26, r24
    27ac:	cb 01       	movw	r24, r22
    27ae:	9e 83       	std	Y+6, r25	; 0x06
    27b0:	8d 83       	std	Y+5, r24	; 0x05
    27b2:	0f c0       	rjmp	.+30     	; 0x27d2 <LCD_displayCharacter+0x3a6>
    27b4:	89 e1       	ldi	r24, 0x19	; 25
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	9c 83       	std	Y+4, r25	; 0x04
    27ba:	8b 83       	std	Y+3, r24	; 0x03
    27bc:	8b 81       	ldd	r24, Y+3	; 0x03
    27be:	9c 81       	ldd	r25, Y+4	; 0x04
    27c0:	01 97       	sbiw	r24, 0x01	; 1
    27c2:	f1 f7       	brne	.-4      	; 0x27c0 <LCD_displayCharacter+0x394>
    27c4:	9c 83       	std	Y+4, r25	; 0x04
    27c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27c8:	8d 81       	ldd	r24, Y+5	; 0x05
    27ca:	9e 81       	ldd	r25, Y+6	; 0x06
    27cc:	01 97       	sbiw	r24, 0x01	; 1
    27ce:	9e 83       	std	Y+6, r25	; 0x06
    27d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27d2:	8d 81       	ldd	r24, Y+5	; 0x05
    27d4:	9e 81       	ldd	r25, Y+6	; 0x06
    27d6:	00 97       	sbiw	r24, 0x00	; 0
    27d8:	69 f7       	brne	.-38     	; 0x27b4 <LCD_displayCharacter+0x388>
    27da:	14 c0       	rjmp	.+40     	; 0x2804 <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27dc:	6f 81       	ldd	r22, Y+7	; 0x07
    27de:	78 85       	ldd	r23, Y+8	; 0x08
    27e0:	89 85       	ldd	r24, Y+9	; 0x09
    27e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e8:	dc 01       	movw	r26, r24
    27ea:	cb 01       	movw	r24, r22
    27ec:	9e 83       	std	Y+6, r25	; 0x06
    27ee:	8d 83       	std	Y+5, r24	; 0x05
    27f0:	8d 81       	ldd	r24, Y+5	; 0x05
    27f2:	9e 81       	ldd	r25, Y+6	; 0x06
    27f4:	9a 83       	std	Y+2, r25	; 0x02
    27f6:	89 83       	std	Y+1, r24	; 0x01
    27f8:	89 81       	ldd	r24, Y+1	; 0x01
    27fa:	9a 81       	ldd	r25, Y+2	; 0x02
    27fc:	01 97       	sbiw	r24, 0x01	; 1
    27fe:	f1 f7       	brne	.-4      	; 0x27fc <LCD_displayCharacter+0x3d0>
    2800:	9a 83       	std	Y+2, r25	; 0x02
    2802:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2804:	ea 96       	adiw	r28, 0x3a	; 58
    2806:	0f b6       	in	r0, 0x3f	; 63
    2808:	f8 94       	cli
    280a:	de bf       	out	0x3e, r29	; 62
    280c:	0f be       	out	0x3f, r0	; 63
    280e:	cd bf       	out	0x3d, r28	; 61
    2810:	cf 91       	pop	r28
    2812:	df 91       	pop	r29
    2814:	08 95       	ret

00002816 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2816:	df 93       	push	r29
    2818:	cf 93       	push	r28
    281a:	00 d0       	rcall	.+0      	; 0x281c <LCD_displayString+0x6>
    281c:	0f 92       	push	r0
    281e:	cd b7       	in	r28, 0x3d	; 61
    2820:	de b7       	in	r29, 0x3e	; 62
    2822:	9b 83       	std	Y+3, r25	; 0x03
    2824:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2826:	19 82       	std	Y+1, r1	; 0x01
    2828:	0e c0       	rjmp	.+28     	; 0x2846 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    282a:	89 81       	ldd	r24, Y+1	; 0x01
    282c:	28 2f       	mov	r18, r24
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	8a 81       	ldd	r24, Y+2	; 0x02
    2832:	9b 81       	ldd	r25, Y+3	; 0x03
    2834:	fc 01       	movw	r30, r24
    2836:	e2 0f       	add	r30, r18
    2838:	f3 1f       	adc	r31, r19
    283a:	80 81       	ld	r24, Z
    283c:	0e 94 16 12 	call	0x242c	; 0x242c <LCD_displayCharacter>
		i++;
    2840:	89 81       	ldd	r24, Y+1	; 0x01
    2842:	8f 5f       	subi	r24, 0xFF	; 255
    2844:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2846:	89 81       	ldd	r24, Y+1	; 0x01
    2848:	28 2f       	mov	r18, r24
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	8a 81       	ldd	r24, Y+2	; 0x02
    284e:	9b 81       	ldd	r25, Y+3	; 0x03
    2850:	fc 01       	movw	r30, r24
    2852:	e2 0f       	add	r30, r18
    2854:	f3 1f       	adc	r31, r19
    2856:	80 81       	ld	r24, Z
    2858:	88 23       	and	r24, r24
    285a:	39 f7       	brne	.-50     	; 0x282a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    285c:	0f 90       	pop	r0
    285e:	0f 90       	pop	r0
    2860:	0f 90       	pop	r0
    2862:	cf 91       	pop	r28
    2864:	df 91       	pop	r29
    2866:	08 95       	ret

00002868 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2868:	df 93       	push	r29
    286a:	cf 93       	push	r28
    286c:	00 d0       	rcall	.+0      	; 0x286e <LCD_moveCursor+0x6>
    286e:	00 d0       	rcall	.+0      	; 0x2870 <LCD_moveCursor+0x8>
    2870:	0f 92       	push	r0
    2872:	cd b7       	in	r28, 0x3d	; 61
    2874:	de b7       	in	r29, 0x3e	; 62
    2876:	8a 83       	std	Y+2, r24	; 0x02
    2878:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    287a:	8a 81       	ldd	r24, Y+2	; 0x02
    287c:	28 2f       	mov	r18, r24
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	3d 83       	std	Y+5, r19	; 0x05
    2882:	2c 83       	std	Y+4, r18	; 0x04
    2884:	8c 81       	ldd	r24, Y+4	; 0x04
    2886:	9d 81       	ldd	r25, Y+5	; 0x05
    2888:	81 30       	cpi	r24, 0x01	; 1
    288a:	91 05       	cpc	r25, r1
    288c:	c1 f0       	breq	.+48     	; 0x28be <LCD_moveCursor+0x56>
    288e:	2c 81       	ldd	r18, Y+4	; 0x04
    2890:	3d 81       	ldd	r19, Y+5	; 0x05
    2892:	22 30       	cpi	r18, 0x02	; 2
    2894:	31 05       	cpc	r19, r1
    2896:	2c f4       	brge	.+10     	; 0x28a2 <LCD_moveCursor+0x3a>
    2898:	8c 81       	ldd	r24, Y+4	; 0x04
    289a:	9d 81       	ldd	r25, Y+5	; 0x05
    289c:	00 97       	sbiw	r24, 0x00	; 0
    289e:	61 f0       	breq	.+24     	; 0x28b8 <LCD_moveCursor+0x50>
    28a0:	19 c0       	rjmp	.+50     	; 0x28d4 <LCD_moveCursor+0x6c>
    28a2:	2c 81       	ldd	r18, Y+4	; 0x04
    28a4:	3d 81       	ldd	r19, Y+5	; 0x05
    28a6:	22 30       	cpi	r18, 0x02	; 2
    28a8:	31 05       	cpc	r19, r1
    28aa:	69 f0       	breq	.+26     	; 0x28c6 <LCD_moveCursor+0x5e>
    28ac:	8c 81       	ldd	r24, Y+4	; 0x04
    28ae:	9d 81       	ldd	r25, Y+5	; 0x05
    28b0:	83 30       	cpi	r24, 0x03	; 3
    28b2:	91 05       	cpc	r25, r1
    28b4:	61 f0       	breq	.+24     	; 0x28ce <LCD_moveCursor+0x66>
    28b6:	0e c0       	rjmp	.+28     	; 0x28d4 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    28b8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ba:	89 83       	std	Y+1, r24	; 0x01
    28bc:	0b c0       	rjmp	.+22     	; 0x28d4 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    28be:	8b 81       	ldd	r24, Y+3	; 0x03
    28c0:	80 5c       	subi	r24, 0xC0	; 192
    28c2:	89 83       	std	Y+1, r24	; 0x01
    28c4:	07 c0       	rjmp	.+14     	; 0x28d4 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    28c6:	8b 81       	ldd	r24, Y+3	; 0x03
    28c8:	80 5f       	subi	r24, 0xF0	; 240
    28ca:	89 83       	std	Y+1, r24	; 0x01
    28cc:	03 c0       	rjmp	.+6      	; 0x28d4 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    28ce:	8b 81       	ldd	r24, Y+3	; 0x03
    28d0:	80 5b       	subi	r24, 0xB0	; 176
    28d2:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    28d4:	89 81       	ldd	r24, Y+1	; 0x01
    28d6:	80 68       	ori	r24, 0x80	; 128
    28d8:	0e 94 21 10 	call	0x2042	; 0x2042 <LCD_sendCommand>
}
    28dc:	0f 90       	pop	r0
    28de:	0f 90       	pop	r0
    28e0:	0f 90       	pop	r0
    28e2:	0f 90       	pop	r0
    28e4:	0f 90       	pop	r0
    28e6:	cf 91       	pop	r28
    28e8:	df 91       	pop	r29
    28ea:	08 95       	ret

000028ec <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    28ec:	df 93       	push	r29
    28ee:	cf 93       	push	r28
    28f0:	00 d0       	rcall	.+0      	; 0x28f2 <LCD_displayStringRowColumn+0x6>
    28f2:	00 d0       	rcall	.+0      	; 0x28f4 <LCD_displayStringRowColumn+0x8>
    28f4:	cd b7       	in	r28, 0x3d	; 61
    28f6:	de b7       	in	r29, 0x3e	; 62
    28f8:	89 83       	std	Y+1, r24	; 0x01
    28fa:	6a 83       	std	Y+2, r22	; 0x02
    28fc:	5c 83       	std	Y+4, r21	; 0x04
    28fe:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2900:	89 81       	ldd	r24, Y+1	; 0x01
    2902:	6a 81       	ldd	r22, Y+2	; 0x02
    2904:	0e 94 34 14 	call	0x2868	; 0x2868 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2908:	8b 81       	ldd	r24, Y+3	; 0x03
    290a:	9c 81       	ldd	r25, Y+4	; 0x04
    290c:	0e 94 0b 14 	call	0x2816	; 0x2816 <LCD_displayString>
}
    2910:	0f 90       	pop	r0
    2912:	0f 90       	pop	r0
    2914:	0f 90       	pop	r0
    2916:	0f 90       	pop	r0
    2918:	cf 91       	pop	r28
    291a:	df 91       	pop	r29
    291c:	08 95       	ret

0000291e <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    291e:	df 93       	push	r29
    2920:	cf 93       	push	r28
    2922:	cd b7       	in	r28, 0x3d	; 61
    2924:	de b7       	in	r29, 0x3e	; 62
    2926:	62 97       	sbiw	r28, 0x12	; 18
    2928:	0f b6       	in	r0, 0x3f	; 63
    292a:	f8 94       	cli
    292c:	de bf       	out	0x3e, r29	; 62
    292e:	0f be       	out	0x3f, r0	; 63
    2930:	cd bf       	out	0x3d, r28	; 61
    2932:	9a 8b       	std	Y+18, r25	; 0x12
    2934:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2936:	89 89       	ldd	r24, Y+17	; 0x11
    2938:	9a 89       	ldd	r25, Y+18	; 0x12
    293a:	9e 01       	movw	r18, r28
    293c:	2f 5f       	subi	r18, 0xFF	; 255
    293e:	3f 4f       	sbci	r19, 0xFF	; 255
    2940:	b9 01       	movw	r22, r18
    2942:	4a e0       	ldi	r20, 0x0A	; 10
    2944:	50 e0       	ldi	r21, 0x00	; 0
    2946:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <itoa>
   LCD_displayString(buff); /* Display the string */
    294a:	ce 01       	movw	r24, r28
    294c:	01 96       	adiw	r24, 0x01	; 1
    294e:	0e 94 0b 14 	call	0x2816	; 0x2816 <LCD_displayString>
}
    2952:	62 96       	adiw	r28, 0x12	; 18
    2954:	0f b6       	in	r0, 0x3f	; 63
    2956:	f8 94       	cli
    2958:	de bf       	out	0x3e, r29	; 62
    295a:	0f be       	out	0x3f, r0	; 63
    295c:	cd bf       	out	0x3d, r28	; 61
    295e:	cf 91       	pop	r28
    2960:	df 91       	pop	r29
    2962:	08 95       	ret

00002964 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2964:	df 93       	push	r29
    2966:	cf 93       	push	r28
    2968:	cd b7       	in	r28, 0x3d	; 61
    296a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    296c:	81 e0       	ldi	r24, 0x01	; 1
    296e:	0e 94 21 10 	call	0x2042	; 0x2042 <LCD_sendCommand>
}
    2972:	cf 91       	pop	r28
    2974:	df 91       	pop	r29
    2976:	08 95       	ret

00002978 <__vector_9>:

/********************************************************************************
 	 	 	 	 	 	 	 	 Functions
 *******************************************************************************/

ISR(TIMER0_OVF_vect){
    2978:	1f 92       	push	r1
    297a:	0f 92       	push	r0
    297c:	0f b6       	in	r0, 0x3f	; 63
    297e:	0f 92       	push	r0
    2980:	11 24       	eor	r1, r1
    2982:	2f 93       	push	r18
    2984:	3f 93       	push	r19
    2986:	4f 93       	push	r20
    2988:	5f 93       	push	r21
    298a:	6f 93       	push	r22
    298c:	7f 93       	push	r23
    298e:	8f 93       	push	r24
    2990:	9f 93       	push	r25
    2992:	af 93       	push	r26
    2994:	bf 93       	push	r27
    2996:	ef 93       	push	r30
    2998:	ff 93       	push	r31
    299a:	df 93       	push	r29
    299c:	cf 93       	push	r28
    299e:	cd b7       	in	r28, 0x3d	; 61
    29a0:	de b7       	in	r29, 0x3e	; 62
	if(g_T0_CallBackPtr != NULL_PTR)
    29a2:	80 91 3c 01 	lds	r24, 0x013C
    29a6:	90 91 3d 01 	lds	r25, 0x013D
    29aa:	00 97       	sbiw	r24, 0x00	; 0
    29ac:	29 f0       	breq	.+10     	; 0x29b8 <__vector_9+0x40>
	{
		(*g_T0_CallBackPtr)();
    29ae:	e0 91 3c 01 	lds	r30, 0x013C
    29b2:	f0 91 3d 01 	lds	r31, 0x013D
    29b6:	09 95       	icall
	}
}
    29b8:	cf 91       	pop	r28
    29ba:	df 91       	pop	r29
    29bc:	ff 91       	pop	r31
    29be:	ef 91       	pop	r30
    29c0:	bf 91       	pop	r27
    29c2:	af 91       	pop	r26
    29c4:	9f 91       	pop	r25
    29c6:	8f 91       	pop	r24
    29c8:	7f 91       	pop	r23
    29ca:	6f 91       	pop	r22
    29cc:	5f 91       	pop	r21
    29ce:	4f 91       	pop	r20
    29d0:	3f 91       	pop	r19
    29d2:	2f 91       	pop	r18
    29d4:	0f 90       	pop	r0
    29d6:	0f be       	out	0x3f, r0	; 63
    29d8:	0f 90       	pop	r0
    29da:	1f 90       	pop	r1
    29dc:	18 95       	reti

000029de <__vector_19>:
ISR(TIMER0_COMP_vect){
    29de:	1f 92       	push	r1
    29e0:	0f 92       	push	r0
    29e2:	0f b6       	in	r0, 0x3f	; 63
    29e4:	0f 92       	push	r0
    29e6:	11 24       	eor	r1, r1
    29e8:	2f 93       	push	r18
    29ea:	3f 93       	push	r19
    29ec:	4f 93       	push	r20
    29ee:	5f 93       	push	r21
    29f0:	6f 93       	push	r22
    29f2:	7f 93       	push	r23
    29f4:	8f 93       	push	r24
    29f6:	9f 93       	push	r25
    29f8:	af 93       	push	r26
    29fa:	bf 93       	push	r27
    29fc:	ef 93       	push	r30
    29fe:	ff 93       	push	r31
    2a00:	df 93       	push	r29
    2a02:	cf 93       	push	r28
    2a04:	cd b7       	in	r28, 0x3d	; 61
    2a06:	de b7       	in	r29, 0x3e	; 62
	if(g_T0_CallBackPtr != NULL_PTR)
    2a08:	80 91 3c 01 	lds	r24, 0x013C
    2a0c:	90 91 3d 01 	lds	r25, 0x013D
    2a10:	00 97       	sbiw	r24, 0x00	; 0
    2a12:	29 f0       	breq	.+10     	; 0x2a1e <__vector_19+0x40>
	{
		(*g_T0_CallBackPtr)();
    2a14:	e0 91 3c 01 	lds	r30, 0x013C
    2a18:	f0 91 3d 01 	lds	r31, 0x013D
    2a1c:	09 95       	icall
	}
}
    2a1e:	cf 91       	pop	r28
    2a20:	df 91       	pop	r29
    2a22:	ff 91       	pop	r31
    2a24:	ef 91       	pop	r30
    2a26:	bf 91       	pop	r27
    2a28:	af 91       	pop	r26
    2a2a:	9f 91       	pop	r25
    2a2c:	8f 91       	pop	r24
    2a2e:	7f 91       	pop	r23
    2a30:	6f 91       	pop	r22
    2a32:	5f 91       	pop	r21
    2a34:	4f 91       	pop	r20
    2a36:	3f 91       	pop	r19
    2a38:	2f 91       	pop	r18
    2a3a:	0f 90       	pop	r0
    2a3c:	0f be       	out	0x3f, r0	; 63
    2a3e:	0f 90       	pop	r0
    2a40:	1f 90       	pop	r1
    2a42:	18 95       	reti

00002a44 <Timer0_init>:
 * 		3)Start the timer.
 * 	Arguments :
 * 		---> Structure contain
 * 				{clock_frequancy,Mode(CM,NM),intial-counter,compare-value}
 */
void Timer0_init(const TIMER_ConfigType *config_Ptr){
    2a44:	df 93       	push	r29
    2a46:	cf 93       	push	r28
    2a48:	00 d0       	rcall	.+0      	; 0x2a4a <Timer0_init+0x6>
    2a4a:	cd b7       	in	r28, 0x3d	; 61
    2a4c:	de b7       	in	r29, 0x3e	; 62
    2a4e:	9a 83       	std	Y+2, r25	; 0x02
    2a50:	89 83       	std	Y+1, r24	; 0x01
	// Set Timer initial value to 0
	TCNT0 =  (config_Ptr -> Initial_Count);
    2a52:	a2 e5       	ldi	r26, 0x52	; 82
    2a54:	b0 e0       	ldi	r27, 0x00	; 0
    2a56:	e9 81       	ldd	r30, Y+1	; 0x01
    2a58:	fa 81       	ldd	r31, Y+2	; 0x02
    2a5a:	82 81       	ldd	r24, Z+2	; 0x02
    2a5c:	8c 93       	st	X, r24

	//Setting timer0 clock frequency
	TCCR0 = (TCCR0 & 0xF8) | ((config_Ptr -> clock_frequancy) & 0x07);
    2a5e:	a3 e5       	ldi	r26, 0x53	; 83
    2a60:	b0 e0       	ldi	r27, 0x00	; 0
    2a62:	e3 e5       	ldi	r30, 0x53	; 83
    2a64:	f0 e0       	ldi	r31, 0x00	; 0
    2a66:	80 81       	ld	r24, Z
    2a68:	98 2f       	mov	r25, r24
    2a6a:	98 7f       	andi	r25, 0xF8	; 248
    2a6c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a6e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a70:	80 81       	ld	r24, Z
    2a72:	87 70       	andi	r24, 0x07	; 7
    2a74:	89 2b       	or	r24, r25
    2a76:	8c 93       	st	X, r24

	//Overflow Mode
	if((config_Ptr -> Mode) == Overflow_Mode){
    2a78:	e9 81       	ldd	r30, Y+1	; 0x01
    2a7a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a7c:	81 81       	ldd	r24, Z+1	; 0x01
    2a7e:	88 23       	and	r24, r24
    2a80:	79 f4       	brne	.+30     	; 0x2aa0 <Timer0_init+0x5c>
		TCCR0 |= (1<<FOC0);
    2a82:	a3 e5       	ldi	r26, 0x53	; 83
    2a84:	b0 e0       	ldi	r27, 0x00	; 0
    2a86:	e3 e5       	ldi	r30, 0x53	; 83
    2a88:	f0 e0       	ldi	r31, 0x00	; 0
    2a8a:	80 81       	ld	r24, Z
    2a8c:	80 68       	ori	r24, 0x80	; 128
    2a8e:	8c 93       	st	X, r24
		TIMSK |= (1<<TOIE0);
    2a90:	a9 e5       	ldi	r26, 0x59	; 89
    2a92:	b0 e0       	ldi	r27, 0x00	; 0
    2a94:	e9 e5       	ldi	r30, 0x59	; 89
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	80 81       	ld	r24, Z
    2a9a:	81 60       	ori	r24, 0x01	; 1
    2a9c:	8c 93       	st	X, r24
    2a9e:	17 c0       	rjmp	.+46     	; 0x2ace <Timer0_init+0x8a>
	}

	//For Compare Mode
	else if((config_Ptr -> Mode) == Compare_Mode){
    2aa0:	e9 81       	ldd	r30, Y+1	; 0x01
    2aa2:	fa 81       	ldd	r31, Y+2	; 0x02
    2aa4:	81 81       	ldd	r24, Z+1	; 0x01
    2aa6:	81 30       	cpi	r24, 0x01	; 1
    2aa8:	91 f4       	brne	.+36     	; 0x2ace <Timer0_init+0x8a>
		OCR0 = (config_Ptr -> CM_Compare_Value);
    2aaa:	ac e5       	ldi	r26, 0x5C	; 92
    2aac:	b0 e0       	ldi	r27, 0x00	; 0
    2aae:	e9 81       	ldd	r30, Y+1	; 0x01
    2ab0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ab2:	83 81       	ldd	r24, Z+3	; 0x03
    2ab4:	94 81       	ldd	r25, Z+4	; 0x04
    2ab6:	8c 93       	st	X, r24
		TCCR0 = (1<<FOC0) | (1<<WGM01);
    2ab8:	e3 e5       	ldi	r30, 0x53	; 83
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	88 e8       	ldi	r24, 0x88	; 136
    2abe:	80 83       	st	Z, r24
		TIMSK |= (1<<OCIE0);
    2ac0:	a9 e5       	ldi	r26, 0x59	; 89
    2ac2:	b0 e0       	ldi	r27, 0x00	; 0
    2ac4:	e9 e5       	ldi	r30, 0x59	; 89
    2ac6:	f0 e0       	ldi	r31, 0x00	; 0
    2ac8:	80 81       	ld	r24, Z
    2aca:	82 60       	ori	r24, 0x02	; 2
    2acc:	8c 93       	st	X, r24
	}
}
    2ace:	0f 90       	pop	r0
    2ad0:	0f 90       	pop	r0
    2ad2:	cf 91       	pop	r28
    2ad4:	df 91       	pop	r29
    2ad6:	08 95       	ret

00002ad8 <Timer_DeInit>:

void Timer_DeInit (void){
    2ad8:	df 93       	push	r29
    2ada:	cf 93       	push	r28
    2adc:	cd b7       	in	r28, 0x3d	; 61
    2ade:	de b7       	in	r29, 0x3e	; 62
	TCNT0  = 0;
    2ae0:	e2 e5       	ldi	r30, 0x52	; 82
    2ae2:	f0 e0       	ldi	r31, 0x00	; 0
    2ae4:	10 82       	st	Z, r1
	TCCR0  = 0;
    2ae6:	e3 e5       	ldi	r30, 0x53	; 83
    2ae8:	f0 e0       	ldi	r31, 0x00	; 0
    2aea:	10 82       	st	Z, r1
	TIMSK &= 0xFC;
    2aec:	a9 e5       	ldi	r26, 0x59	; 89
    2aee:	b0 e0       	ldi	r27, 0x00	; 0
    2af0:	e9 e5       	ldi	r30, 0x59	; 89
    2af2:	f0 e0       	ldi	r31, 0x00	; 0
    2af4:	80 81       	ld	r24, Z
    2af6:	8c 7f       	andi	r24, 0xFC	; 252
    2af8:	8c 93       	st	X, r24
}
    2afa:	cf 91       	pop	r28
    2afc:	df 91       	pop	r29
    2afe:	08 95       	ret

00002b00 <Timer0_SetCallBack>:

void Timer0_SetCallBack(void(*T0_ptr)(void)){
    2b00:	df 93       	push	r29
    2b02:	cf 93       	push	r28
    2b04:	00 d0       	rcall	.+0      	; 0x2b06 <Timer0_SetCallBack+0x6>
    2b06:	cd b7       	in	r28, 0x3d	; 61
    2b08:	de b7       	in	r29, 0x3e	; 62
    2b0a:	9a 83       	std	Y+2, r25	; 0x02
    2b0c:	89 83       	std	Y+1, r24	; 0x01
	g_T0_CallBackPtr = T0_ptr;
    2b0e:	89 81       	ldd	r24, Y+1	; 0x01
    2b10:	9a 81       	ldd	r25, Y+2	; 0x02
    2b12:	90 93 3d 01 	sts	0x013D, r25
    2b16:	80 93 3c 01 	sts	0x013C, r24
}
    2b1a:	0f 90       	pop	r0
    2b1c:	0f 90       	pop	r0
    2b1e:	cf 91       	pop	r28
    2b20:	df 91       	pop	r29
    2b22:	08 95       	ret

00002b24 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType* Config_Ptr)
{
    2b24:	df 93       	push	r29
    2b26:	cf 93       	push	r28
    2b28:	00 d0       	rcall	.+0      	; 0x2b2a <UART_init+0x6>
    2b2a:	00 d0       	rcall	.+0      	; 0x2b2c <UART_init+0x8>
    2b2c:	cd b7       	in	r28, 0x3d	; 61
    2b2e:	de b7       	in	r29, 0x3e	; 62
    2b30:	9c 83       	std	Y+4, r25	; 0x04
    2b32:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2b34:	1a 82       	std	Y+2, r1	; 0x02
    2b36:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2b38:	eb e2       	ldi	r30, 0x2B	; 43
    2b3a:	f0 e0       	ldi	r31, 0x00	; 0
    2b3c:	82 e0       	ldi	r24, 0x02	; 2
    2b3e:	80 83       	st	Z, r24

	if(Config_Ptr->DataBits==_9_BITS){
    2b40:	eb 81       	ldd	r30, Y+3	; 0x03
    2b42:	fc 81       	ldd	r31, Y+4	; 0x04
    2b44:	84 81       	ldd	r24, Z+4	; 0x04
    2b46:	84 30       	cpi	r24, 0x04	; 4
    2b48:	e9 f4       	brne	.+58     	; 0x2b84 <UART_init+0x60>
		/*For 9-bit data mode*/
		SET_BIT(UCSRB,UCSZ2);
    2b4a:	aa e2       	ldi	r26, 0x2A	; 42
    2b4c:	b0 e0       	ldi	r27, 0x00	; 0
    2b4e:	ea e2       	ldi	r30, 0x2A	; 42
    2b50:	f0 e0       	ldi	r31, 0x00	; 0
    2b52:	80 81       	ld	r24, Z
    2b54:	84 60       	ori	r24, 0x04	; 4
    2b56:	8c 93       	st	X, r24
		/* URSEL   = 1 The URSEL must be one when writing the UCSRC*/
		SET_BIT(UCSRC,URSEL);
    2b58:	a0 e4       	ldi	r26, 0x40	; 64
    2b5a:	b0 e0       	ldi	r27, 0x00	; 0
    2b5c:	e0 e4       	ldi	r30, 0x40	; 64
    2b5e:	f0 e0       	ldi	r31, 0x00	; 0
    2b60:	80 81       	ld	r24, Z
    2b62:	80 68       	ori	r24, 0x80	; 128
    2b64:	8c 93       	st	X, r24
		/* UCSZ1:0 = 11 For 9-bit data mode*/
		SET_BIT(UCSRC,UCSZ0);
    2b66:	a0 e4       	ldi	r26, 0x40	; 64
    2b68:	b0 e0       	ldi	r27, 0x00	; 0
    2b6a:	e0 e4       	ldi	r30, 0x40	; 64
    2b6c:	f0 e0       	ldi	r31, 0x00	; 0
    2b6e:	80 81       	ld	r24, Z
    2b70:	82 60       	ori	r24, 0x02	; 2
    2b72:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ1);
    2b74:	a0 e4       	ldi	r26, 0x40	; 64
    2b76:	b0 e0       	ldi	r27, 0x00	; 0
    2b78:	e0 e4       	ldi	r30, 0x40	; 64
    2b7a:	f0 e0       	ldi	r31, 0x00	; 0
    2b7c:	80 81       	ld	r24, Z
    2b7e:	84 60       	ori	r24, 0x04	; 4
    2b80:	8c 93       	st	X, r24
    2b82:	17 c0       	rjmp	.+46     	; 0x2bb2 <UART_init+0x8e>
	}
	else{
		/* URSEL   = 1 The URSEL must be one when writing the UCSRC*/
		SET_BIT(UCSRC,URSEL);
    2b84:	a0 e4       	ldi	r26, 0x40	; 64
    2b86:	b0 e0       	ldi	r27, 0x00	; 0
    2b88:	e0 e4       	ldi	r30, 0x40	; 64
    2b8a:	f0 e0       	ldi	r31, 0x00	; 0
    2b8c:	80 81       	ld	r24, Z
    2b8e:	80 68       	ori	r24, 0x80	; 128
    2b90:	8c 93       	st	X, r24
		/* UCSZ1:0 = The required data mode*/
		UCSRC = (UCSRC & 0XF9) | ((Config_Ptr->DataBits)<<1);
    2b92:	a0 e4       	ldi	r26, 0x40	; 64
    2b94:	b0 e0       	ldi	r27, 0x00	; 0
    2b96:	e0 e4       	ldi	r30, 0x40	; 64
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	80 81       	ld	r24, Z
    2b9c:	28 2f       	mov	r18, r24
    2b9e:	29 7f       	andi	r18, 0xF9	; 249
    2ba0:	eb 81       	ldd	r30, Y+3	; 0x03
    2ba2:	fc 81       	ldd	r31, Y+4	; 0x04
    2ba4:	84 81       	ldd	r24, Z+4	; 0x04
    2ba6:	88 2f       	mov	r24, r24
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	88 0f       	add	r24, r24
    2bac:	99 1f       	adc	r25, r25
    2bae:	82 2b       	or	r24, r18
    2bb0:	8c 93       	st	X, r24

	}
	/* UPM1:0  = The required parity mode */
	UCSRC = (UCSRC & 0XCF) | ((Config_Ptr->mode)<<4);
    2bb2:	a0 e4       	ldi	r26, 0x40	; 64
    2bb4:	b0 e0       	ldi	r27, 0x00	; 0
    2bb6:	e0 e4       	ldi	r30, 0x40	; 64
    2bb8:	f0 e0       	ldi	r31, 0x00	; 0
    2bba:	80 81       	ld	r24, Z
    2bbc:	28 2f       	mov	r18, r24
    2bbe:	2f 7c       	andi	r18, 0xCF	; 207
    2bc0:	eb 81       	ldd	r30, Y+3	; 0x03
    2bc2:	fc 81       	ldd	r31, Y+4	; 0x04
    2bc4:	85 81       	ldd	r24, Z+5	; 0x05
    2bc6:	88 2f       	mov	r24, r24
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	82 95       	swap	r24
    2bcc:	92 95       	swap	r25
    2bce:	90 7f       	andi	r25, 0xF0	; 240
    2bd0:	98 27       	eor	r25, r24
    2bd2:	80 7f       	andi	r24, 0xF0	; 240
    2bd4:	98 27       	eor	r25, r24
    2bd6:	82 2b       	or	r24, r18
    2bd8:	8c 93       	st	X, r24
	/* USBS = The required NO.of stop bits*/
	UCSRC = (UCSRC & 0XF7) | ((Config_Ptr->StopBits)<<3);
    2bda:	a0 e4       	ldi	r26, 0x40	; 64
    2bdc:	b0 e0       	ldi	r27, 0x00	; 0
    2bde:	e0 e4       	ldi	r30, 0x40	; 64
    2be0:	f0 e0       	ldi	r31, 0x00	; 0
    2be2:	80 81       	ld	r24, Z
    2be4:	28 2f       	mov	r18, r24
    2be6:	27 7f       	andi	r18, 0xF7	; 247
    2be8:	eb 81       	ldd	r30, Y+3	; 0x03
    2bea:	fc 81       	ldd	r31, Y+4	; 0x04
    2bec:	86 81       	ldd	r24, Z+6	; 0x06
    2bee:	88 2f       	mov	r24, r24
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	88 0f       	add	r24, r24
    2bf4:	99 1f       	adc	r25, r25
    2bf6:	88 0f       	add	r24, r24
    2bf8:	99 1f       	adc	r25, r25
    2bfa:	88 0f       	add	r24, r24
    2bfc:	99 1f       	adc	r25, r25
    2bfe:	82 2b       	or	r24, r18
    2c00:	8c 93       	st	X, r24

	/* RXEN  = 1 Receiver Enable*/
	SET_BIT(UCSRB,RXEN);
    2c02:	aa e2       	ldi	r26, 0x2A	; 42
    2c04:	b0 e0       	ldi	r27, 0x00	; 0
    2c06:	ea e2       	ldi	r30, 0x2A	; 42
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	80 81       	ld	r24, Z
    2c0c:	80 61       	ori	r24, 0x10	; 16
    2c0e:	8c 93       	st	X, r24
	/* RXEN  = 1 Transmitter Enable*/
	SET_BIT(UCSRB,TXEN);
    2c10:	aa e2       	ldi	r26, 0x2A	; 42
    2c12:	b0 e0       	ldi	r27, 0x00	; 0
    2c14:	ea e2       	ldi	r30, 0x2A	; 42
    2c16:	f0 e0       	ldi	r31, 0x00	; 0
    2c18:	80 81       	ld	r24, Z
    2c1a:	88 60       	ori	r24, 0x08	; 8
    2c1c:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value= (uint16)((8000000/((uint32) 8 * Config_Ptr->BaudRate))-1);
    2c1e:	eb 81       	ldd	r30, Y+3	; 0x03
    2c20:	fc 81       	ldd	r31, Y+4	; 0x04
    2c22:	80 81       	ld	r24, Z
    2c24:	91 81       	ldd	r25, Z+1	; 0x01
    2c26:	a2 81       	ldd	r26, Z+2	; 0x02
    2c28:	b3 81       	ldd	r27, Z+3	; 0x03
    2c2a:	88 0f       	add	r24, r24
    2c2c:	99 1f       	adc	r25, r25
    2c2e:	aa 1f       	adc	r26, r26
    2c30:	bb 1f       	adc	r27, r27
    2c32:	88 0f       	add	r24, r24
    2c34:	99 1f       	adc	r25, r25
    2c36:	aa 1f       	adc	r26, r26
    2c38:	bb 1f       	adc	r27, r27
    2c3a:	88 0f       	add	r24, r24
    2c3c:	99 1f       	adc	r25, r25
    2c3e:	aa 1f       	adc	r26, r26
    2c40:	bb 1f       	adc	r27, r27
    2c42:	9c 01       	movw	r18, r24
    2c44:	ad 01       	movw	r20, r26
    2c46:	80 e0       	ldi	r24, 0x00	; 0
    2c48:	92 e1       	ldi	r25, 0x12	; 18
    2c4a:	aa e7       	ldi	r26, 0x7A	; 122
    2c4c:	b0 e0       	ldi	r27, 0x00	; 0
    2c4e:	bc 01       	movw	r22, r24
    2c50:	cd 01       	movw	r24, r26
    2c52:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__udivmodsi4>
    2c56:	da 01       	movw	r26, r20
    2c58:	c9 01       	movw	r24, r18
    2c5a:	01 97       	sbiw	r24, 0x01	; 1
    2c5c:	9a 83       	std	Y+2, r25	; 0x02
    2c5e:	89 83       	std	Y+1, r24	; 0x01


	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRL = ubrr_value;
    2c60:	e9 e2       	ldi	r30, 0x29	; 41
    2c62:	f0 e0       	ldi	r31, 0x00	; 0
    2c64:	89 81       	ldd	r24, Y+1	; 0x01
    2c66:	80 83       	st	Z, r24
	UBRRH = ubrr_value>>8;
    2c68:	e0 e4       	ldi	r30, 0x40	; 64
    2c6a:	f0 e0       	ldi	r31, 0x00	; 0
    2c6c:	89 81       	ldd	r24, Y+1	; 0x01
    2c6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c70:	89 2f       	mov	r24, r25
    2c72:	99 27       	eor	r25, r25
    2c74:	80 83       	st	Z, r24
}
    2c76:	0f 90       	pop	r0
    2c78:	0f 90       	pop	r0
    2c7a:	0f 90       	pop	r0
    2c7c:	0f 90       	pop	r0
    2c7e:	cf 91       	pop	r28
    2c80:	df 91       	pop	r29
    2c82:	08 95       	ret

00002c84 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2c84:	df 93       	push	r29
    2c86:	cf 93       	push	r28
    2c88:	0f 92       	push	r0
    2c8a:	cd b7       	in	r28, 0x3d	; 61
    2c8c:	de b7       	in	r29, 0x3e	; 62
    2c8e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2c90:	eb e2       	ldi	r30, 0x2B	; 43
    2c92:	f0 e0       	ldi	r31, 0x00	; 0
    2c94:	80 81       	ld	r24, Z
    2c96:	88 2f       	mov	r24, r24
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	80 72       	andi	r24, 0x20	; 32
    2c9c:	90 70       	andi	r25, 0x00	; 0
    2c9e:	00 97       	sbiw	r24, 0x00	; 0
    2ca0:	b9 f3       	breq	.-18     	; 0x2c90 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2ca2:	ec e2       	ldi	r30, 0x2C	; 44
    2ca4:	f0 e0       	ldi	r31, 0x00	; 0
    2ca6:	89 81       	ldd	r24, Y+1	; 0x01
    2ca8:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    2caa:	0f 90       	pop	r0
    2cac:	cf 91       	pop	r28
    2cae:	df 91       	pop	r29
    2cb0:	08 95       	ret

00002cb2 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2cb2:	df 93       	push	r29
    2cb4:	cf 93       	push	r28
    2cb6:	cd b7       	in	r28, 0x3d	; 61
    2cb8:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2cba:	eb e2       	ldi	r30, 0x2B	; 43
    2cbc:	f0 e0       	ldi	r31, 0x00	; 0
    2cbe:	80 81       	ld	r24, Z
    2cc0:	88 23       	and	r24, r24
    2cc2:	dc f7       	brge	.-10     	; 0x2cba <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    2cc4:	ec e2       	ldi	r30, 0x2C	; 44
    2cc6:	f0 e0       	ldi	r31, 0x00	; 0
    2cc8:	80 81       	ld	r24, Z
}
    2cca:	cf 91       	pop	r28
    2ccc:	df 91       	pop	r29
    2cce:	08 95       	ret

00002cd0 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2cd0:	df 93       	push	r29
    2cd2:	cf 93       	push	r28
    2cd4:	00 d0       	rcall	.+0      	; 0x2cd6 <UART_sendString+0x6>
    2cd6:	0f 92       	push	r0
    2cd8:	cd b7       	in	r28, 0x3d	; 61
    2cda:	de b7       	in	r29, 0x3e	; 62
    2cdc:	9b 83       	std	Y+3, r25	; 0x03
    2cde:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2ce0:	19 82       	std	Y+1, r1	; 0x01
    2ce2:	0e c0       	rjmp	.+28     	; 0x2d00 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2ce4:	89 81       	ldd	r24, Y+1	; 0x01
    2ce6:	28 2f       	mov	r18, r24
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	8a 81       	ldd	r24, Y+2	; 0x02
    2cec:	9b 81       	ldd	r25, Y+3	; 0x03
    2cee:	fc 01       	movw	r30, r24
    2cf0:	e2 0f       	add	r30, r18
    2cf2:	f3 1f       	adc	r31, r19
    2cf4:	80 81       	ld	r24, Z
    2cf6:	0e 94 42 16 	call	0x2c84	; 0x2c84 <UART_sendByte>
		i++;
    2cfa:	89 81       	ldd	r24, Y+1	; 0x01
    2cfc:	8f 5f       	subi	r24, 0xFF	; 255
    2cfe:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2d00:	89 81       	ldd	r24, Y+1	; 0x01
    2d02:	28 2f       	mov	r18, r24
    2d04:	30 e0       	ldi	r19, 0x00	; 0
    2d06:	8a 81       	ldd	r24, Y+2	; 0x02
    2d08:	9b 81       	ldd	r25, Y+3	; 0x03
    2d0a:	fc 01       	movw	r30, r24
    2d0c:	e2 0f       	add	r30, r18
    2d0e:	f3 1f       	adc	r31, r19
    2d10:	80 81       	ld	r24, Z
    2d12:	88 23       	and	r24, r24
    2d14:	39 f7       	brne	.-50     	; 0x2ce4 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	 *******************************************************************/
}
    2d16:	0f 90       	pop	r0
    2d18:	0f 90       	pop	r0
    2d1a:	0f 90       	pop	r0
    2d1c:	cf 91       	pop	r28
    2d1e:	df 91       	pop	r29
    2d20:	08 95       	ret

00002d22 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2d22:	0f 93       	push	r16
    2d24:	1f 93       	push	r17
    2d26:	df 93       	push	r29
    2d28:	cf 93       	push	r28
    2d2a:	00 d0       	rcall	.+0      	; 0x2d2c <UART_receiveString+0xa>
    2d2c:	0f 92       	push	r0
    2d2e:	cd b7       	in	r28, 0x3d	; 61
    2d30:	de b7       	in	r29, 0x3e	; 62
    2d32:	9b 83       	std	Y+3, r25	; 0x03
    2d34:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d36:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2d38:	89 81       	ldd	r24, Y+1	; 0x01
    2d3a:	28 2f       	mov	r18, r24
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d40:	9b 81       	ldd	r25, Y+3	; 0x03
    2d42:	8c 01       	movw	r16, r24
    2d44:	02 0f       	add	r16, r18
    2d46:	13 1f       	adc	r17, r19
    2d48:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <UART_recieveByte>
    2d4c:	f8 01       	movw	r30, r16
    2d4e:	80 83       	st	Z, r24
    2d50:	0f c0       	rjmp	.+30     	; 0x2d70 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2d52:	89 81       	ldd	r24, Y+1	; 0x01
    2d54:	8f 5f       	subi	r24, 0xFF	; 255
    2d56:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2d58:	89 81       	ldd	r24, Y+1	; 0x01
    2d5a:	28 2f       	mov	r18, r24
    2d5c:	30 e0       	ldi	r19, 0x00	; 0
    2d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d60:	9b 81       	ldd	r25, Y+3	; 0x03
    2d62:	8c 01       	movw	r16, r24
    2d64:	02 0f       	add	r16, r18
    2d66:	13 1f       	adc	r17, r19
    2d68:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <UART_recieveByte>
    2d6c:	f8 01       	movw	r30, r16
    2d6e:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2d70:	89 81       	ldd	r24, Y+1	; 0x01
    2d72:	28 2f       	mov	r18, r24
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	8a 81       	ldd	r24, Y+2	; 0x02
    2d78:	9b 81       	ldd	r25, Y+3	; 0x03
    2d7a:	fc 01       	movw	r30, r24
    2d7c:	e2 0f       	add	r30, r18
    2d7e:	f3 1f       	adc	r31, r19
    2d80:	80 81       	ld	r24, Z
    2d82:	83 32       	cpi	r24, 0x23	; 35
    2d84:	31 f7       	brne	.-52     	; 0x2d52 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2d86:	89 81       	ldd	r24, Y+1	; 0x01
    2d88:	28 2f       	mov	r18, r24
    2d8a:	30 e0       	ldi	r19, 0x00	; 0
    2d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d8e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d90:	fc 01       	movw	r30, r24
    2d92:	e2 0f       	add	r30, r18
    2d94:	f3 1f       	adc	r31, r19
    2d96:	10 82       	st	Z, r1
}
    2d98:	0f 90       	pop	r0
    2d9a:	0f 90       	pop	r0
    2d9c:	0f 90       	pop	r0
    2d9e:	cf 91       	pop	r28
    2da0:	df 91       	pop	r29
    2da2:	1f 91       	pop	r17
    2da4:	0f 91       	pop	r16
    2da6:	08 95       	ret

00002da8 <__udivmodsi4>:
    2da8:	a1 e2       	ldi	r26, 0x21	; 33
    2daa:	1a 2e       	mov	r1, r26
    2dac:	aa 1b       	sub	r26, r26
    2dae:	bb 1b       	sub	r27, r27
    2db0:	fd 01       	movw	r30, r26
    2db2:	0d c0       	rjmp	.+26     	; 0x2dce <__udivmodsi4_ep>

00002db4 <__udivmodsi4_loop>:
    2db4:	aa 1f       	adc	r26, r26
    2db6:	bb 1f       	adc	r27, r27
    2db8:	ee 1f       	adc	r30, r30
    2dba:	ff 1f       	adc	r31, r31
    2dbc:	a2 17       	cp	r26, r18
    2dbe:	b3 07       	cpc	r27, r19
    2dc0:	e4 07       	cpc	r30, r20
    2dc2:	f5 07       	cpc	r31, r21
    2dc4:	20 f0       	brcs	.+8      	; 0x2dce <__udivmodsi4_ep>
    2dc6:	a2 1b       	sub	r26, r18
    2dc8:	b3 0b       	sbc	r27, r19
    2dca:	e4 0b       	sbc	r30, r20
    2dcc:	f5 0b       	sbc	r31, r21

00002dce <__udivmodsi4_ep>:
    2dce:	66 1f       	adc	r22, r22
    2dd0:	77 1f       	adc	r23, r23
    2dd2:	88 1f       	adc	r24, r24
    2dd4:	99 1f       	adc	r25, r25
    2dd6:	1a 94       	dec	r1
    2dd8:	69 f7       	brne	.-38     	; 0x2db4 <__udivmodsi4_loop>
    2dda:	60 95       	com	r22
    2ddc:	70 95       	com	r23
    2dde:	80 95       	com	r24
    2de0:	90 95       	com	r25
    2de2:	9b 01       	movw	r18, r22
    2de4:	ac 01       	movw	r20, r24
    2de6:	bd 01       	movw	r22, r26
    2de8:	cf 01       	movw	r24, r30
    2dea:	08 95       	ret

00002dec <__prologue_saves__>:
    2dec:	2f 92       	push	r2
    2dee:	3f 92       	push	r3
    2df0:	4f 92       	push	r4
    2df2:	5f 92       	push	r5
    2df4:	6f 92       	push	r6
    2df6:	7f 92       	push	r7
    2df8:	8f 92       	push	r8
    2dfa:	9f 92       	push	r9
    2dfc:	af 92       	push	r10
    2dfe:	bf 92       	push	r11
    2e00:	cf 92       	push	r12
    2e02:	df 92       	push	r13
    2e04:	ef 92       	push	r14
    2e06:	ff 92       	push	r15
    2e08:	0f 93       	push	r16
    2e0a:	1f 93       	push	r17
    2e0c:	cf 93       	push	r28
    2e0e:	df 93       	push	r29
    2e10:	cd b7       	in	r28, 0x3d	; 61
    2e12:	de b7       	in	r29, 0x3e	; 62
    2e14:	ca 1b       	sub	r28, r26
    2e16:	db 0b       	sbc	r29, r27
    2e18:	0f b6       	in	r0, 0x3f	; 63
    2e1a:	f8 94       	cli
    2e1c:	de bf       	out	0x3e, r29	; 62
    2e1e:	0f be       	out	0x3f, r0	; 63
    2e20:	cd bf       	out	0x3d, r28	; 61
    2e22:	09 94       	ijmp

00002e24 <__epilogue_restores__>:
    2e24:	2a 88       	ldd	r2, Y+18	; 0x12
    2e26:	39 88       	ldd	r3, Y+17	; 0x11
    2e28:	48 88       	ldd	r4, Y+16	; 0x10
    2e2a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e2c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e2e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e30:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e32:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e34:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e36:	b9 84       	ldd	r11, Y+9	; 0x09
    2e38:	c8 84       	ldd	r12, Y+8	; 0x08
    2e3a:	df 80       	ldd	r13, Y+7	; 0x07
    2e3c:	ee 80       	ldd	r14, Y+6	; 0x06
    2e3e:	fd 80       	ldd	r15, Y+5	; 0x05
    2e40:	0c 81       	ldd	r16, Y+4	; 0x04
    2e42:	1b 81       	ldd	r17, Y+3	; 0x03
    2e44:	aa 81       	ldd	r26, Y+2	; 0x02
    2e46:	b9 81       	ldd	r27, Y+1	; 0x01
    2e48:	ce 0f       	add	r28, r30
    2e4a:	d1 1d       	adc	r29, r1
    2e4c:	0f b6       	in	r0, 0x3f	; 63
    2e4e:	f8 94       	cli
    2e50:	de bf       	out	0x3e, r29	; 62
    2e52:	0f be       	out	0x3f, r0	; 63
    2e54:	cd bf       	out	0x3d, r28	; 61
    2e56:	ed 01       	movw	r28, r26
    2e58:	08 95       	ret

00002e5a <itoa>:
    2e5a:	fb 01       	movw	r30, r22
    2e5c:	9f 01       	movw	r18, r30
    2e5e:	e8 94       	clt
    2e60:	42 30       	cpi	r20, 0x02	; 2
    2e62:	c4 f0       	brlt	.+48     	; 0x2e94 <itoa+0x3a>
    2e64:	45 32       	cpi	r20, 0x25	; 37
    2e66:	b4 f4       	brge	.+44     	; 0x2e94 <itoa+0x3a>
    2e68:	4a 30       	cpi	r20, 0x0A	; 10
    2e6a:	29 f4       	brne	.+10     	; 0x2e76 <itoa+0x1c>
    2e6c:	97 fb       	bst	r25, 7
    2e6e:	1e f4       	brtc	.+6      	; 0x2e76 <itoa+0x1c>
    2e70:	90 95       	com	r25
    2e72:	81 95       	neg	r24
    2e74:	9f 4f       	sbci	r25, 0xFF	; 255
    2e76:	64 2f       	mov	r22, r20
    2e78:	77 27       	eor	r23, r23
    2e7a:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__udivmodhi4>
    2e7e:	80 5d       	subi	r24, 0xD0	; 208
    2e80:	8a 33       	cpi	r24, 0x3A	; 58
    2e82:	0c f0       	brlt	.+2      	; 0x2e86 <itoa+0x2c>
    2e84:	89 5d       	subi	r24, 0xD9	; 217
    2e86:	81 93       	st	Z+, r24
    2e88:	cb 01       	movw	r24, r22
    2e8a:	00 97       	sbiw	r24, 0x00	; 0
    2e8c:	a1 f7       	brne	.-24     	; 0x2e76 <itoa+0x1c>
    2e8e:	16 f4       	brtc	.+4      	; 0x2e94 <itoa+0x3a>
    2e90:	5d e2       	ldi	r21, 0x2D	; 45
    2e92:	51 93       	st	Z+, r21
    2e94:	10 82       	st	Z, r1
    2e96:	c9 01       	movw	r24, r18
    2e98:	0c 94 4e 17 	jmp	0x2e9c	; 0x2e9c <strrev>

00002e9c <strrev>:
    2e9c:	dc 01       	movw	r26, r24
    2e9e:	fc 01       	movw	r30, r24
    2ea0:	67 2f       	mov	r22, r23
    2ea2:	71 91       	ld	r23, Z+
    2ea4:	77 23       	and	r23, r23
    2ea6:	e1 f7       	brne	.-8      	; 0x2ea0 <strrev+0x4>
    2ea8:	32 97       	sbiw	r30, 0x02	; 2
    2eaa:	04 c0       	rjmp	.+8      	; 0x2eb4 <strrev+0x18>
    2eac:	7c 91       	ld	r23, X
    2eae:	6d 93       	st	X+, r22
    2eb0:	70 83       	st	Z, r23
    2eb2:	62 91       	ld	r22, -Z
    2eb4:	ae 17       	cp	r26, r30
    2eb6:	bf 07       	cpc	r27, r31
    2eb8:	c8 f3       	brcs	.-14     	; 0x2eac <strrev+0x10>
    2eba:	08 95       	ret

00002ebc <__udivmodhi4>:
    2ebc:	aa 1b       	sub	r26, r26
    2ebe:	bb 1b       	sub	r27, r27
    2ec0:	51 e1       	ldi	r21, 0x11	; 17
    2ec2:	07 c0       	rjmp	.+14     	; 0x2ed2 <__udivmodhi4_ep>

00002ec4 <__udivmodhi4_loop>:
    2ec4:	aa 1f       	adc	r26, r26
    2ec6:	bb 1f       	adc	r27, r27
    2ec8:	a6 17       	cp	r26, r22
    2eca:	b7 07       	cpc	r27, r23
    2ecc:	10 f0       	brcs	.+4      	; 0x2ed2 <__udivmodhi4_ep>
    2ece:	a6 1b       	sub	r26, r22
    2ed0:	b7 0b       	sbc	r27, r23

00002ed2 <__udivmodhi4_ep>:
    2ed2:	88 1f       	adc	r24, r24
    2ed4:	99 1f       	adc	r25, r25
    2ed6:	5a 95       	dec	r21
    2ed8:	a9 f7       	brne	.-22     	; 0x2ec4 <__udivmodhi4_loop>
    2eda:	80 95       	com	r24
    2edc:	90 95       	com	r25
    2ede:	bc 01       	movw	r22, r24
    2ee0:	cd 01       	movw	r24, r26
    2ee2:	08 95       	ret

00002ee4 <_exit>:
    2ee4:	f8 94       	cli

00002ee6 <__stop_program>:
    2ee6:	ff cf       	rjmp	.-2      	; 0x2ee6 <__stop_program>
