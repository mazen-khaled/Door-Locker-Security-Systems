
Micro2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000212c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  0000212c  000021c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800078  00800078  000021d8  2**0
                  ALLOC
  3 .stab         0000240c  00000000  00000000  000021d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000136e  00000000  00000000  000045e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005952  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005a92  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005c02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000784b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008736  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000094e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009644  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000098d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a09f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 99 0d 	jmp	0x1b32	; 0x1b32 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 cc 0d 	jmp	0x1b98	; 0x1b98 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e2       	ldi	r30, 0x2C	; 44
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 38       	cpi	r26, 0x89	; 137
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cc 05 	call	0xb98	; 0xb98 <main>
      8a:	0c 94 94 10 	jmp	0x2128	; 0x2128 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5d 10 	jmp	0x20ba	; 0x20ba <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 79 10 	jmp	0x20f2	; 0x20f2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 85 10 	jmp	0x210a	; 0x210a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 85 10 	jmp	0x210a	; 0x210a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5d 10 	jmp	0x20ba	; 0x20ba <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 79 10 	jmp	0x20f2	; 0x20f2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 85 10 	jmp	0x210a	; 0x210a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 85 10 	jmp	0x210a	; 0x210a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 85 10 	jmp	0x210a	; 0x210a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6d 10 	jmp	0x20da	; 0x20da <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 89 10 	jmp	0x2112	; 0x2112 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_init>:
 ********************************************************************************/

#include "gpio.h"
#include "Buzzer.h"

void Buzzer_init(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/* Setup the two Buzzer pin as output pin */
	GPIO_setupPinDirection(Buzzer_PORT,Buzzer_PIN,PIN_OUTPUT);
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	62 e0       	ldi	r22, 0x02	; 2
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <GPIO_setupPinDirection>

	/* Buzzer is stopped at the beginning */
	GPIO_writePin(Buzzer_PORT,Buzzer_PIN,LOGIC_LOW);
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	62 e0       	ldi	r22, 0x02	; 2
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 46 0b 	call	0x168c	; 0x168c <GPIO_writePin>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <Buzzer_On>:

void Buzzer_On(void){
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	/* Buzzer is On */
	GPIO_writePin(Buzzer_PORT,Buzzer_PIN,LOGIC_HIGH);
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	62 e0       	ldi	r22, 0x02	; 2
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 46 0b 	call	0x168c	; 0x168c <GPIO_writePin>
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <Buzzer_Off>:

void Buzzer_Off(void){
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	/* Buzzer is Off */
	GPIO_writePin(Buzzer_PORT,Buzzer_PIN,LOGIC_LOW);
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	62 e0       	ldi	r22, 0x02	; 2
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 46 0b 	call	0x168c	; 0x168c <GPIO_writePin>
}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <main>:
/*Rang in danger case */
void Buzzer_Mession(void);
/*******************************************************************************
 *                         		Main Function                                  *
 *******************************************************************************/
int main(void){
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
     ba0:	6e 97       	sbiw	r28, 0x1e	; 30
     ba2:	0f b6       	in	r0, 0x3f	; 63
     ba4:	f8 94       	cli
     ba6:	de bf       	out	0x3e, r29	; 62
     ba8:	0f be       	out	0x3f, r0	; 63
     baa:	cd bf       	out	0x3d, r28	; 61
	SREG|=(1<<7); /*Enable I-bit*/
     bac:	af e5       	ldi	r26, 0x5F	; 95
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	ef e5       	ldi	r30, 0x5F	; 95
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	80 68       	ori	r24, 0x80	; 128
     bb8:	8c 93       	st	X, r24

	/*Initialization UART*/
	UART_ConfigType UART_Configuration ={9600,_8_BITS,DISABLED,_1_BIT};
     bba:	ce 01       	movw	r24, r28
     bbc:	01 96       	adiw	r24, 0x01	; 1
     bbe:	99 8b       	std	Y+17, r25	; 0x11
     bc0:	88 8b       	std	Y+16, r24	; 0x10
     bc2:	e0 e7       	ldi	r30, 0x70	; 112
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	fb 8b       	std	Y+19, r31	; 0x13
     bc8:	ea 8b       	std	Y+18, r30	; 0x12
     bca:	f7 e0       	ldi	r31, 0x07	; 7
     bcc:	fc 8b       	std	Y+20, r31	; 0x14
     bce:	ea 89       	ldd	r30, Y+18	; 0x12
     bd0:	fb 89       	ldd	r31, Y+19	; 0x13
     bd2:	00 80       	ld	r0, Z
     bd4:	8a 89       	ldd	r24, Y+18	; 0x12
     bd6:	9b 89       	ldd	r25, Y+19	; 0x13
     bd8:	01 96       	adiw	r24, 0x01	; 1
     bda:	9b 8b       	std	Y+19, r25	; 0x13
     bdc:	8a 8b       	std	Y+18, r24	; 0x12
     bde:	e8 89       	ldd	r30, Y+16	; 0x10
     be0:	f9 89       	ldd	r31, Y+17	; 0x11
     be2:	00 82       	st	Z, r0
     be4:	88 89       	ldd	r24, Y+16	; 0x10
     be6:	99 89       	ldd	r25, Y+17	; 0x11
     be8:	01 96       	adiw	r24, 0x01	; 1
     bea:	99 8b       	std	Y+17, r25	; 0x11
     bec:	88 8b       	std	Y+16, r24	; 0x10
     bee:	9c 89       	ldd	r25, Y+20	; 0x14
     bf0:	91 50       	subi	r25, 0x01	; 1
     bf2:	9c 8b       	std	Y+20, r25	; 0x14
     bf4:	ec 89       	ldd	r30, Y+20	; 0x14
     bf6:	ee 23       	and	r30, r30
     bf8:	51 f7       	brne	.-44     	; 0xbce <main+0x36>
	UART_init(&UART_Configuration);
     bfa:	ce 01       	movw	r24, r28
     bfc:	01 96       	adiw	r24, 0x01	; 1
     bfe:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <UART_init>

	/*Initialization The timer*/
	TIMER_ConfigType Timer_Configuration={F_CPU_1024,Compare_Mode,0,2900};
     c02:	ce 01       	movw	r24, r28
     c04:	08 96       	adiw	r24, 0x08	; 8
     c06:	9e 8b       	std	Y+22, r25	; 0x16
     c08:	8d 8b       	std	Y+21, r24	; 0x15
     c0a:	eb e6       	ldi	r30, 0x6B	; 107
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	f8 8f       	std	Y+24, r31	; 0x18
     c10:	ef 8b       	std	Y+23, r30	; 0x17
     c12:	f5 e0       	ldi	r31, 0x05	; 5
     c14:	f9 8f       	std	Y+25, r31	; 0x19
     c16:	ef 89       	ldd	r30, Y+23	; 0x17
     c18:	f8 8d       	ldd	r31, Y+24	; 0x18
     c1a:	00 80       	ld	r0, Z
     c1c:	8f 89       	ldd	r24, Y+23	; 0x17
     c1e:	98 8d       	ldd	r25, Y+24	; 0x18
     c20:	01 96       	adiw	r24, 0x01	; 1
     c22:	98 8f       	std	Y+24, r25	; 0x18
     c24:	8f 8b       	std	Y+23, r24	; 0x17
     c26:	ed 89       	ldd	r30, Y+21	; 0x15
     c28:	fe 89       	ldd	r31, Y+22	; 0x16
     c2a:	00 82       	st	Z, r0
     c2c:	8d 89       	ldd	r24, Y+21	; 0x15
     c2e:	9e 89       	ldd	r25, Y+22	; 0x16
     c30:	01 96       	adiw	r24, 0x01	; 1
     c32:	9e 8b       	std	Y+22, r25	; 0x16
     c34:	8d 8b       	std	Y+21, r24	; 0x15
     c36:	99 8d       	ldd	r25, Y+25	; 0x19
     c38:	91 50       	subi	r25, 0x01	; 1
     c3a:	99 8f       	std	Y+25, r25	; 0x19
     c3c:	e9 8d       	ldd	r30, Y+25	; 0x19
     c3e:	ee 23       	and	r30, r30
     c40:	51 f7       	brne	.-44     	; 0xc16 <main+0x7e>
	Timer0_init(&Timer_Configuration);
     c42:	ce 01       	movw	r24, r28
     c44:	08 96       	adiw	r24, 0x08	; 8
     c46:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <Timer0_init>
	Timer0_SetCallBack(Timer0_callBack);
     c4a:	83 ec       	ldi	r24, 0xC3	; 195
     c4c:	96 e0       	ldi	r25, 0x06	; 6
     c4e:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <Timer0_SetCallBack>

	/*Initialization I2C*/
	TWI_ConfigType TWI_configuretion ={Prescaler_1,0x77,0x02};
     c52:	ce 01       	movw	r24, r28
     c54:	0d 96       	adiw	r24, 0x0d	; 13
     c56:	9b 8f       	std	Y+27, r25	; 0x1b
     c58:	8a 8f       	std	Y+26, r24	; 0x1a
     c5a:	e8 e6       	ldi	r30, 0x68	; 104
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	fd 8f       	std	Y+29, r31	; 0x1d
     c60:	ec 8f       	std	Y+28, r30	; 0x1c
     c62:	f3 e0       	ldi	r31, 0x03	; 3
     c64:	fe 8f       	std	Y+30, r31	; 0x1e
     c66:	ec 8d       	ldd	r30, Y+28	; 0x1c
     c68:	fd 8d       	ldd	r31, Y+29	; 0x1d
     c6a:	00 80       	ld	r0, Z
     c6c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c6e:	9d 8d       	ldd	r25, Y+29	; 0x1d
     c70:	01 96       	adiw	r24, 0x01	; 1
     c72:	9d 8f       	std	Y+29, r25	; 0x1d
     c74:	8c 8f       	std	Y+28, r24	; 0x1c
     c76:	ea 8d       	ldd	r30, Y+26	; 0x1a
     c78:	fb 8d       	ldd	r31, Y+27	; 0x1b
     c7a:	00 82       	st	Z, r0
     c7c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c7e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     c80:	01 96       	adiw	r24, 0x01	; 1
     c82:	9b 8f       	std	Y+27, r25	; 0x1b
     c84:	8a 8f       	std	Y+26, r24	; 0x1a
     c86:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c88:	91 50       	subi	r25, 0x01	; 1
     c8a:	9e 8f       	std	Y+30, r25	; 0x1e
     c8c:	ee 8d       	ldd	r30, Y+30	; 0x1e
     c8e:	ee 23       	and	r30, r30
     c90:	51 f7       	brne	.-44     	; 0xc66 <main+0xce>
	TWI_init(&TWI_configuretion);
     c92:	ce 01       	movw	r24, r28
     c94:	0d 96       	adiw	r24, 0x0d	; 13
     c96:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <TWI_init>

	/*Initialization DC-motor */
	DcMotor_Init();
     c9a:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <DcMotor_Init>

	/*Initialization Buzzer*/
	Buzzer_init();
     c9e:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzer_init>

	Password_Setting();
     ca2:	0e 94 d3 06 	call	0xda6	; 0xda6 <Password_Setting>
	while(1){

		/*Begin the process of receiving the password*/
		/*Two options need the password first*/
		UART_Received_Byte = UART_recieveByte();
     ca6:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <UART_recieveByte>
     caa:	80 93 7a 00 	sts	0x007A, r24
		while(UART_Received_Byte != READY_TO_COMMUNICATE);
     cae:	80 91 7a 00 	lds	r24, 0x007A
     cb2:	80 38       	cpi	r24, 0x80	; 128
     cb4:	e1 f7       	brne	.-8      	; 0xcae <main+0x116>
		UART_sendByte(READY_TO_COMMUNICATE);
     cb6:	80 e8       	ldi	r24, 0x80	; 128
     cb8:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <UART_sendByte>

		/*Receiving the password and save it in recieved_password*/
		Recieve_Passowrd(recieved_password);
     cbc:	8f e7       	ldi	r24, 0x7F	; 127
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	0e 94 92 07 	call	0xf24	; 0xf24 <Recieve_Passowrd>

		/*Receiving the option '+' for open the door or '-' for change password*/
		UART_Received_Byte = UART_recieveByte();
     cc4:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <UART_recieveByte>
     cc8:	80 93 7a 00 	sts	0x007A, r24

		/*Compare between the entered password and the password in EEPROM */
		state = Compare_Passowrds(recieved_password,password_Saved_In_EEPROM);
     ccc:	8f e7       	ldi	r24, 0x7F	; 127
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	24 e8       	ldi	r18, 0x84	; 132
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	b9 01       	movw	r22, r18
     cd6:	0e 94 32 08 	call	0x1064	; 0x1064 <Compare_Passowrds>
     cda:	80 93 7c 00 	sts	0x007C, r24

		/* Opening the door '+' */
		if(UART_Received_Byte == OPEN_DOOR_SYMBOL){
     cde:	80 91 7a 00 	lds	r24, 0x007A
     ce2:	8b 32       	cpi	r24, 0x2B	; 43
     ce4:	29 f5       	brne	.+74     	; 0xd30 <main+0x198>

			/*for matched password open the door*/
			if (state == PASSWORD_MATCH){
     ce6:	80 91 7c 00 	lds	r24, 0x007C
     cea:	81 30       	cpi	r24, 0x01	; 1
     cec:	41 f4       	brne	.+16     	; 0xcfe <main+0x166>
				Passowrd_Trials = 0;
     cee:	10 92 7b 00 	sts	0x007B, r1
				UART_sendByte(PASSWORD_MATCH);
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <UART_sendByte>
				Door_Mession();
     cf8:	0e 94 22 09 	call	0x1244	; 0x1244 <Door_Mession>
     cfc:	d4 cf       	rjmp	.-88     	; 0xca6 <main+0x10e>
			}
			/*for Unmatched password try again 2 times*/
			else if (state == PASSWORD_UNMATCH){
     cfe:	80 91 7c 00 	lds	r24, 0x007C
     d02:	88 23       	and	r24, r24
     d04:	81 f6       	brne	.-96     	; 0xca6 <main+0x10e>
				Passowrd_Trials++;
     d06:	80 91 7b 00 	lds	r24, 0x007B
     d0a:	8f 5f       	subi	r24, 0xFF	; 255
     d0c:	80 93 7b 00 	sts	0x007B, r24
				/*Check for the number of trials of entering the password*/
				if(Passowrd_Trials >= MAX_NUMPER_OF_TRIALS){
     d10:	80 91 7b 00 	lds	r24, 0x007B
     d14:	83 30       	cpi	r24, 0x03	; 3
     d16:	40 f0       	brcs	.+16     	; 0xd28 <main+0x190>
					UART_sendByte(DANGER);
     d18:	89 e0       	ldi	r24, 0x09	; 9
     d1a:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <UART_sendByte>
					Buzzer_Mession();
     d1e:	0e 94 56 09 	call	0x12ac	; 0x12ac <Buzzer_Mession>
					Passowrd_Trials = 0;
     d22:	10 92 7b 00 	sts	0x007B, r1
     d26:	bf cf       	rjmp	.-130    	; 0xca6 <main+0x10e>
				}
				else UART_sendByte(PASSWORD_UNMATCH);
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <UART_sendByte>
     d2e:	bb cf       	rjmp	.-138    	; 0xca6 <main+0x10e>
			}
		}

		/*Change the password setting '-' */
		else if (UART_Received_Byte == CHANGE_PASS_SYMBOL){
     d30:	80 91 7a 00 	lds	r24, 0x007A
     d34:	8d 32       	cpi	r24, 0x2D	; 45
     d36:	09 f0       	breq	.+2      	; 0xd3a <main+0x1a2>
     d38:	b6 cf       	rjmp	.-148    	; 0xca6 <main+0x10e>
			/*for matched password New password setting*/
			if (state == PASSWORD_MATCH){
     d3a:	80 91 7c 00 	lds	r24, 0x007C
     d3e:	81 30       	cpi	r24, 0x01	; 1
     d40:	41 f4       	brne	.+16     	; 0xd52 <main+0x1ba>
				Passowrd_Trials = 0;
     d42:	10 92 7b 00 	sts	0x007B, r1
				UART_sendByte(PASSWORD_MATCH);
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <UART_sendByte>
				Password_Setting();
     d4c:	0e 94 d3 06 	call	0xda6	; 0xda6 <Password_Setting>
     d50:	aa cf       	rjmp	.-172    	; 0xca6 <main+0x10e>
			}

			/*for Unmatched password try again 2 times*/
			else if (state == PASSWORD_UNMATCH){
     d52:	80 91 7c 00 	lds	r24, 0x007C
     d56:	88 23       	and	r24, r24
     d58:	09 f0       	breq	.+2      	; 0xd5c <main+0x1c4>
     d5a:	a5 cf       	rjmp	.-182    	; 0xca6 <main+0x10e>
				Passowrd_Trials++;
     d5c:	80 91 7b 00 	lds	r24, 0x007B
     d60:	8f 5f       	subi	r24, 0xFF	; 255
     d62:	80 93 7b 00 	sts	0x007B, r24
				if(Passowrd_Trials >= MAX_NUMPER_OF_TRIALS){
     d66:	80 91 7b 00 	lds	r24, 0x007B
     d6a:	83 30       	cpi	r24, 0x03	; 3
     d6c:	40 f0       	brcs	.+16     	; 0xd7e <main+0x1e6>
					UART_sendByte(DANGER);
     d6e:	89 e0       	ldi	r24, 0x09	; 9
     d70:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <UART_sendByte>
					Buzzer_Mession();
     d74:	0e 94 56 09 	call	0x12ac	; 0x12ac <Buzzer_Mession>
					Passowrd_Trials = 0;
     d78:	10 92 7b 00 	sts	0x007B, r1
     d7c:	94 cf       	rjmp	.-216    	; 0xca6 <main+0x10e>
				}
				else UART_sendByte(PASSWORD_UNMATCH);
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <UART_sendByte>
     d84:	90 cf       	rjmp	.-224    	; 0xca6 <main+0x10e>

00000d86 <Timer0_callBack>:
}

/*******************************************************************************
 *                         		Function Definitions                           *
 *******************************************************************************/
void Timer0_callBack(void){
     d86:	df 93       	push	r29
     d88:	cf 93       	push	r28
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;
     d8e:	80 91 78 00 	lds	r24, 0x0078
     d92:	90 91 79 00 	lds	r25, 0x0079
     d96:	01 96       	adiw	r24, 0x01	; 1
     d98:	90 93 79 00 	sts	0x0079, r25
     d9c:	80 93 78 00 	sts	0x0078, r24
}
     da0:	cf 91       	pop	r28
     da2:	df 91       	pop	r29
     da4:	08 95       	ret

00000da6 <Password_Setting>:

void Password_Setting(void){
     da6:	df 93       	push	r29
     da8:	cf 93       	push	r28
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
     dae:	69 97       	sbiw	r28, 0x19	; 25
     db0:	0f b6       	in	r0, 0x3f	; 63
     db2:	f8 94       	cli
     db4:	de bf       	out	0x3e, r29	; 62
     db6:	0f be       	out	0x3f, r0	; 63
     db8:	cd bf       	out	0x3d, r28	; 61

	/*variable to save password For confirming*/
	uint8 Re_Entered_Password[PASSWORD_LONG];

	/*State of the two entered password*/
	uint8 pass_state = PASSWORD_UNMATCH;
     dba:	1f 86       	std	Y+15, r1	; 0x0f
     dbc:	a6 c0       	rjmp	.+332    	; 0xf0a <Password_Setting+0x164>


	while (pass_state == PASSWORD_UNMATCH){

		/*Begin the process of receiving the first password*/
		UART_Received_Byte = UART_recieveByte();
     dbe:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <UART_recieveByte>
     dc2:	80 93 7a 00 	sts	0x007A, r24
		while(UART_Received_Byte != READY_TO_COMMUNICATE);
     dc6:	80 91 7a 00 	lds	r24, 0x007A
     dca:	80 38       	cpi	r24, 0x80	; 128
     dcc:	e1 f7       	brne	.-8      	; 0xdc6 <Password_Setting+0x20>
		UART_sendByte(READY_TO_COMMUNICATE);
     dce:	80 e8       	ldi	r24, 0x80	; 128
     dd0:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <UART_sendByte>

		/*receiving the first password and save it in Password*/
		Recieve_Passowrd(Password);
     dd4:	ce 01       	movw	r24, r28
     dd6:	40 96       	adiw	r24, 0x10	; 16
     dd8:	0e 94 92 07 	call	0xf24	; 0xf24 <Recieve_Passowrd>

		/*Begin the process of receiving the second password*/
		UART_Received_Byte = UART_recieveByte();
     ddc:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <UART_recieveByte>
     de0:	80 93 7a 00 	sts	0x007A, r24
		while(UART_Received_Byte != READY_TO_COMMUNICATE);
     de4:	80 91 7a 00 	lds	r24, 0x007A
     de8:	80 38       	cpi	r24, 0x80	; 128
     dea:	e1 f7       	brne	.-8      	; 0xde4 <Password_Setting+0x3e>
		UART_sendByte(READY_TO_COMMUNICATE);
     dec:	80 e8       	ldi	r24, 0x80	; 128
     dee:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <UART_sendByte>

		/*receiving the second password and save it in Re_Entered_Password*/
		Recieve_Passowrd(Re_Entered_Password);
     df2:	ce 01       	movw	r24, r28
     df4:	45 96       	adiw	r24, 0x15	; 21
     df6:	0e 94 92 07 	call	0xf24	; 0xf24 <Recieve_Passowrd>
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	a8 e4       	ldi	r26, 0x48	; 72
     e00:	b2 e4       	ldi	r27, 0x42	; 66
     e02:	8b 87       	std	Y+11, r24	; 0x0b
     e04:	9c 87       	std	Y+12, r25	; 0x0c
     e06:	ad 87       	std	Y+13, r26	; 0x0d
     e08:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e0a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e0c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e0e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e10:	9e 85       	ldd	r25, Y+14	; 0x0e
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	4a e7       	ldi	r20, 0x7A	; 122
     e18:	53 e4       	ldi	r21, 0x43	; 67
     e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e1e:	dc 01       	movw	r26, r24
     e20:	cb 01       	movw	r24, r22
     e22:	8f 83       	std	Y+7, r24	; 0x07
     e24:	98 87       	std	Y+8, r25	; 0x08
     e26:	a9 87       	std	Y+9, r26	; 0x09
     e28:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e2a:	6f 81       	ldd	r22, Y+7	; 0x07
     e2c:	78 85       	ldd	r23, Y+8	; 0x08
     e2e:	89 85       	ldd	r24, Y+9	; 0x09
     e30:	9a 85       	ldd	r25, Y+10	; 0x0a
     e32:	20 e0       	ldi	r18, 0x00	; 0
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	40 e8       	ldi	r20, 0x80	; 128
     e38:	5f e3       	ldi	r21, 0x3F	; 63
     e3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e3e:	88 23       	and	r24, r24
     e40:	2c f4       	brge	.+10     	; 0xe4c <Password_Setting+0xa6>
		__ticks = 1;
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	9e 83       	std	Y+6, r25	; 0x06
     e48:	8d 83       	std	Y+5, r24	; 0x05
     e4a:	3f c0       	rjmp	.+126    	; 0xeca <Password_Setting+0x124>
	else if (__tmp > 65535)
     e4c:	6f 81       	ldd	r22, Y+7	; 0x07
     e4e:	78 85       	ldd	r23, Y+8	; 0x08
     e50:	89 85       	ldd	r24, Y+9	; 0x09
     e52:	9a 85       	ldd	r25, Y+10	; 0x0a
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	3f ef       	ldi	r19, 0xFF	; 255
     e58:	4f e7       	ldi	r20, 0x7F	; 127
     e5a:	57 e4       	ldi	r21, 0x47	; 71
     e5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e60:	18 16       	cp	r1, r24
     e62:	4c f5       	brge	.+82     	; 0xeb6 <Password_Setting+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e64:	6b 85       	ldd	r22, Y+11	; 0x0b
     e66:	7c 85       	ldd	r23, Y+12	; 0x0c
     e68:	8d 85       	ldd	r24, Y+13	; 0x0d
     e6a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e6c:	20 e0       	ldi	r18, 0x00	; 0
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	40 e2       	ldi	r20, 0x20	; 32
     e72:	51 e4       	ldi	r21, 0x41	; 65
     e74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e78:	dc 01       	movw	r26, r24
     e7a:	cb 01       	movw	r24, r22
     e7c:	bc 01       	movw	r22, r24
     e7e:	cd 01       	movw	r24, r26
     e80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	9e 83       	std	Y+6, r25	; 0x06
     e8a:	8d 83       	std	Y+5, r24	; 0x05
     e8c:	0f c0       	rjmp	.+30     	; 0xeac <Password_Setting+0x106>
     e8e:	89 e1       	ldi	r24, 0x19	; 25
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	9c 83       	std	Y+4, r25	; 0x04
     e94:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e96:	8b 81       	ldd	r24, Y+3	; 0x03
     e98:	9c 81       	ldd	r25, Y+4	; 0x04
     e9a:	01 97       	sbiw	r24, 0x01	; 1
     e9c:	f1 f7       	brne	.-4      	; 0xe9a <Password_Setting+0xf4>
     e9e:	9c 83       	std	Y+4, r25	; 0x04
     ea0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ea2:	8d 81       	ldd	r24, Y+5	; 0x05
     ea4:	9e 81       	ldd	r25, Y+6	; 0x06
     ea6:	01 97       	sbiw	r24, 0x01	; 1
     ea8:	9e 83       	std	Y+6, r25	; 0x06
     eaa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eac:	8d 81       	ldd	r24, Y+5	; 0x05
     eae:	9e 81       	ldd	r25, Y+6	; 0x06
     eb0:	00 97       	sbiw	r24, 0x00	; 0
     eb2:	69 f7       	brne	.-38     	; 0xe8e <Password_Setting+0xe8>
     eb4:	14 c0       	rjmp	.+40     	; 0xede <Password_Setting+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eb6:	6f 81       	ldd	r22, Y+7	; 0x07
     eb8:	78 85       	ldd	r23, Y+8	; 0x08
     eba:	89 85       	ldd	r24, Y+9	; 0x09
     ebc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ebe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ec2:	dc 01       	movw	r26, r24
     ec4:	cb 01       	movw	r24, r22
     ec6:	9e 83       	std	Y+6, r25	; 0x06
     ec8:	8d 83       	std	Y+5, r24	; 0x05
     eca:	8d 81       	ldd	r24, Y+5	; 0x05
     ecc:	9e 81       	ldd	r25, Y+6	; 0x06
     ece:	9a 83       	std	Y+2, r25	; 0x02
     ed0:	89 83       	std	Y+1, r24	; 0x01
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	9a 81       	ldd	r25, Y+2	; 0x02
     ed6:	01 97       	sbiw	r24, 0x01	; 1
     ed8:	f1 f7       	brne	.-4      	; 0xed6 <Password_Setting+0x130>
     eda:	9a 83       	std	Y+2, r25	; 0x02
     edc:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(50);

		/*Comparing between the 2 entered passwords and return it's state*/
		pass_state = Compare_Passowrds(Password,Re_Entered_Password);
     ede:	ce 01       	movw	r24, r28
     ee0:	40 96       	adiw	r24, 0x10	; 16
     ee2:	9e 01       	movw	r18, r28
     ee4:	2b 5e       	subi	r18, 0xEB	; 235
     ee6:	3f 4f       	sbci	r19, 0xFF	; 255
     ee8:	b9 01       	movw	r22, r18
     eea:	0e 94 32 08 	call	0x1064	; 0x1064 <Compare_Passowrds>
     eee:	8f 87       	std	Y+15, r24	; 0x0f

		/*if the two passwords are matched save it in EEPROM (pass_state = 1)*/
		if ( pass_state == PASSWORD_MATCH){
     ef0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ef2:	81 30       	cpi	r24, 0x01	; 1
     ef4:	21 f4       	brne	.+8      	; 0xefe <Password_Setting+0x158>
			Save_Password_In_EEPROM(Password);
     ef6:	ce 01       	movw	r24, r28
     ef8:	40 96       	adiw	r24, 0x10	; 16
     efa:	0e 94 72 08 	call	0x10e4	; 0x10e4 <Save_Password_In_EEPROM>
		}

		/*Sending the state of the two passwords to the MC1*/
		UART_sendByte(READY_TO_COMMUNICATE);
     efe:	80 e8       	ldi	r24, 0x80	; 128
     f00:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <UART_sendByte>
		UART_sendByte(pass_state);
     f04:	8f 85       	ldd	r24, Y+15	; 0x0f
     f06:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <UART_sendByte>

	/*State of the two entered password*/
	uint8 pass_state = PASSWORD_UNMATCH;


	while (pass_state == PASSWORD_UNMATCH){
     f0a:	8f 85       	ldd	r24, Y+15	; 0x0f
     f0c:	88 23       	and	r24, r24
     f0e:	09 f4       	brne	.+2      	; 0xf12 <Password_Setting+0x16c>
     f10:	56 cf       	rjmp	.-340    	; 0xdbe <Password_Setting+0x18>

		/*Sending the state of the two passwords to the MC1*/
		UART_sendByte(READY_TO_COMMUNICATE);
		UART_sendByte(pass_state);
	}
}
     f12:	69 96       	adiw	r28, 0x19	; 25
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	f8 94       	cli
     f18:	de bf       	out	0x3e, r29	; 62
     f1a:	0f be       	out	0x3f, r0	; 63
     f1c:	cd bf       	out	0x3d, r28	; 61
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <Recieve_Passowrd>:

void Recieve_Passowrd(uint8 *pass){
     f24:	0f 93       	push	r16
     f26:	1f 93       	push	r17
     f28:	df 93       	push	r29
     f2a:	cf 93       	push	r28
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
     f30:	61 97       	sbiw	r28, 0x11	; 17
     f32:	0f b6       	in	r0, 0x3f	; 63
     f34:	f8 94       	cli
     f36:	de bf       	out	0x3e, r29	; 62
     f38:	0f be       	out	0x3f, r0	; 63
     f3a:	cd bf       	out	0x3d, r28	; 61
     f3c:	99 8b       	std	Y+17, r25	; 0x11
     f3e:	88 8b       	std	Y+16, r24	; 0x10
	for (uint8 i=0;i<PASSWORD_LONG;i++)
     f40:	1f 86       	std	Y+15, r1	; 0x0f
     f42:	81 c0       	rjmp	.+258    	; 0x1046 <Recieve_Passowrd+0x122>
	{
		pass[i]=UART_recieveByte();
     f44:	8f 85       	ldd	r24, Y+15	; 0x0f
     f46:	28 2f       	mov	r18, r24
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	88 89       	ldd	r24, Y+16	; 0x10
     f4c:	99 89       	ldd	r25, Y+17	; 0x11
     f4e:	8c 01       	movw	r16, r24
     f50:	02 0f       	add	r16, r18
     f52:	13 1f       	adc	r17, r19
     f54:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <UART_recieveByte>
     f58:	f8 01       	movw	r30, r16
     f5a:	80 83       	st	Z, r24
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	a8 e4       	ldi	r26, 0x48	; 72
     f62:	b2 e4       	ldi	r27, 0x42	; 66
     f64:	8b 87       	std	Y+11, r24	; 0x0b
     f66:	9c 87       	std	Y+12, r25	; 0x0c
     f68:	ad 87       	std	Y+13, r26	; 0x0d
     f6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f6c:	6b 85       	ldd	r22, Y+11	; 0x0b
     f6e:	7c 85       	ldd	r23, Y+12	; 0x0c
     f70:	8d 85       	ldd	r24, Y+13	; 0x0d
     f72:	9e 85       	ldd	r25, Y+14	; 0x0e
     f74:	20 e0       	ldi	r18, 0x00	; 0
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	4a e7       	ldi	r20, 0x7A	; 122
     f7a:	53 e4       	ldi	r21, 0x43	; 67
     f7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f80:	dc 01       	movw	r26, r24
     f82:	cb 01       	movw	r24, r22
     f84:	8f 83       	std	Y+7, r24	; 0x07
     f86:	98 87       	std	Y+8, r25	; 0x08
     f88:	a9 87       	std	Y+9, r26	; 0x09
     f8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f8c:	6f 81       	ldd	r22, Y+7	; 0x07
     f8e:	78 85       	ldd	r23, Y+8	; 0x08
     f90:	89 85       	ldd	r24, Y+9	; 0x09
     f92:	9a 85       	ldd	r25, Y+10	; 0x0a
     f94:	20 e0       	ldi	r18, 0x00	; 0
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	40 e8       	ldi	r20, 0x80	; 128
     f9a:	5f e3       	ldi	r21, 0x3F	; 63
     f9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fa0:	88 23       	and	r24, r24
     fa2:	2c f4       	brge	.+10     	; 0xfae <Recieve_Passowrd+0x8a>
		__ticks = 1;
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	9e 83       	std	Y+6, r25	; 0x06
     faa:	8d 83       	std	Y+5, r24	; 0x05
     fac:	3f c0       	rjmp	.+126    	; 0x102c <Recieve_Passowrd+0x108>
	else if (__tmp > 65535)
     fae:	6f 81       	ldd	r22, Y+7	; 0x07
     fb0:	78 85       	ldd	r23, Y+8	; 0x08
     fb2:	89 85       	ldd	r24, Y+9	; 0x09
     fb4:	9a 85       	ldd	r25, Y+10	; 0x0a
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	3f ef       	ldi	r19, 0xFF	; 255
     fba:	4f e7       	ldi	r20, 0x7F	; 127
     fbc:	57 e4       	ldi	r21, 0x47	; 71
     fbe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fc2:	18 16       	cp	r1, r24
     fc4:	4c f5       	brge	.+82     	; 0x1018 <Recieve_Passowrd+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fc6:	6b 85       	ldd	r22, Y+11	; 0x0b
     fc8:	7c 85       	ldd	r23, Y+12	; 0x0c
     fca:	8d 85       	ldd	r24, Y+13	; 0x0d
     fcc:	9e 85       	ldd	r25, Y+14	; 0x0e
     fce:	20 e0       	ldi	r18, 0x00	; 0
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	40 e2       	ldi	r20, 0x20	; 32
     fd4:	51 e4       	ldi	r21, 0x41	; 65
     fd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fda:	dc 01       	movw	r26, r24
     fdc:	cb 01       	movw	r24, r22
     fde:	bc 01       	movw	r22, r24
     fe0:	cd 01       	movw	r24, r26
     fe2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fe6:	dc 01       	movw	r26, r24
     fe8:	cb 01       	movw	r24, r22
     fea:	9e 83       	std	Y+6, r25	; 0x06
     fec:	8d 83       	std	Y+5, r24	; 0x05
     fee:	0f c0       	rjmp	.+30     	; 0x100e <Recieve_Passowrd+0xea>
     ff0:	89 e1       	ldi	r24, 0x19	; 25
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	9c 83       	std	Y+4, r25	; 0x04
     ff6:	8b 83       	std	Y+3, r24	; 0x03
     ff8:	8b 81       	ldd	r24, Y+3	; 0x03
     ffa:	9c 81       	ldd	r25, Y+4	; 0x04
     ffc:	01 97       	sbiw	r24, 0x01	; 1
     ffe:	f1 f7       	brne	.-4      	; 0xffc <Recieve_Passowrd+0xd8>
    1000:	9c 83       	std	Y+4, r25	; 0x04
    1002:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1004:	8d 81       	ldd	r24, Y+5	; 0x05
    1006:	9e 81       	ldd	r25, Y+6	; 0x06
    1008:	01 97       	sbiw	r24, 0x01	; 1
    100a:	9e 83       	std	Y+6, r25	; 0x06
    100c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    100e:	8d 81       	ldd	r24, Y+5	; 0x05
    1010:	9e 81       	ldd	r25, Y+6	; 0x06
    1012:	00 97       	sbiw	r24, 0x00	; 0
    1014:	69 f7       	brne	.-38     	; 0xff0 <Recieve_Passowrd+0xcc>
    1016:	14 c0       	rjmp	.+40     	; 0x1040 <Recieve_Passowrd+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1018:	6f 81       	ldd	r22, Y+7	; 0x07
    101a:	78 85       	ldd	r23, Y+8	; 0x08
    101c:	89 85       	ldd	r24, Y+9	; 0x09
    101e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1020:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1024:	dc 01       	movw	r26, r24
    1026:	cb 01       	movw	r24, r22
    1028:	9e 83       	std	Y+6, r25	; 0x06
    102a:	8d 83       	std	Y+5, r24	; 0x05
    102c:	8d 81       	ldd	r24, Y+5	; 0x05
    102e:	9e 81       	ldd	r25, Y+6	; 0x06
    1030:	9a 83       	std	Y+2, r25	; 0x02
    1032:	89 83       	std	Y+1, r24	; 0x01
    1034:	89 81       	ldd	r24, Y+1	; 0x01
    1036:	9a 81       	ldd	r25, Y+2	; 0x02
    1038:	01 97       	sbiw	r24, 0x01	; 1
    103a:	f1 f7       	brne	.-4      	; 0x1038 <Recieve_Passowrd+0x114>
    103c:	9a 83       	std	Y+2, r25	; 0x02
    103e:	89 83       	std	Y+1, r24	; 0x01
		UART_sendByte(pass_state);
	}
}

void Recieve_Passowrd(uint8 *pass){
	for (uint8 i=0;i<PASSWORD_LONG;i++)
    1040:	8f 85       	ldd	r24, Y+15	; 0x0f
    1042:	8f 5f       	subi	r24, 0xFF	; 255
    1044:	8f 87       	std	Y+15, r24	; 0x0f
    1046:	8f 85       	ldd	r24, Y+15	; 0x0f
    1048:	85 30       	cpi	r24, 0x05	; 5
    104a:	08 f4       	brcc	.+2      	; 0x104e <Recieve_Passowrd+0x12a>
    104c:	7b cf       	rjmp	.-266    	; 0xf44 <Recieve_Passowrd+0x20>
	{
		pass[i]=UART_recieveByte();
		_delay_ms(50);
	}
}
    104e:	61 96       	adiw	r28, 0x11	; 17
    1050:	0f b6       	in	r0, 0x3f	; 63
    1052:	f8 94       	cli
    1054:	de bf       	out	0x3e, r29	; 62
    1056:	0f be       	out	0x3f, r0	; 63
    1058:	cd bf       	out	0x3d, r28	; 61
    105a:	cf 91       	pop	r28
    105c:	df 91       	pop	r29
    105e:	1f 91       	pop	r17
    1060:	0f 91       	pop	r16
    1062:	08 95       	ret

00001064 <Compare_Passowrds>:

uint8 Compare_Passowrds (uint8 * pass1,uint8 * pass2){
    1064:	df 93       	push	r29
    1066:	cf 93       	push	r28
    1068:	cd b7       	in	r28, 0x3d	; 61
    106a:	de b7       	in	r29, 0x3e	; 62
    106c:	27 97       	sbiw	r28, 0x07	; 7
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	f8 94       	cli
    1072:	de bf       	out	0x3e, r29	; 62
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	cd bf       	out	0x3d, r28	; 61
    1078:	9c 83       	std	Y+4, r25	; 0x04
    107a:	8b 83       	std	Y+3, r24	; 0x03
    107c:	7e 83       	std	Y+6, r23	; 0x06
    107e:	6d 83       	std	Y+5, r22	; 0x05

	uint8 i,flag=0;
    1080:	19 82       	std	Y+1, r1	; 0x01
	for (i=0 ; i<PASSWORD_LONG ; i++){
    1082:	1a 82       	std	Y+2, r1	; 0x02
    1084:	1b c0       	rjmp	.+54     	; 0x10bc <Compare_Passowrds+0x58>
		if (pass1[i] != pass2[i]) {
    1086:	8a 81       	ldd	r24, Y+2	; 0x02
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	9c 81       	ldd	r25, Y+4	; 0x04
    1090:	fc 01       	movw	r30, r24
    1092:	e2 0f       	add	r30, r18
    1094:	f3 1f       	adc	r31, r19
    1096:	40 81       	ld	r20, Z
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	8d 81       	ldd	r24, Y+5	; 0x05
    10a0:	9e 81       	ldd	r25, Y+6	; 0x06
    10a2:	fc 01       	movw	r30, r24
    10a4:	e2 0f       	add	r30, r18
    10a6:	f3 1f       	adc	r31, r19
    10a8:	80 81       	ld	r24, Z
    10aa:	48 17       	cp	r20, r24
    10ac:	19 f0       	breq	.+6      	; 0x10b4 <Compare_Passowrds+0x50>
			flag=1;
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	89 83       	std	Y+1, r24	; 0x01
    10b2:	07 c0       	rjmp	.+14     	; 0x10c2 <Compare_Passowrds+0x5e>
			break;
		}
		else
			flag = 0;
    10b4:	19 82       	std	Y+1, r1	; 0x01
}

uint8 Compare_Passowrds (uint8 * pass1,uint8 * pass2){

	uint8 i,flag=0;
	for (i=0 ; i<PASSWORD_LONG ; i++){
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	8f 5f       	subi	r24, 0xFF	; 255
    10ba:	8a 83       	std	Y+2, r24	; 0x02
    10bc:	8a 81       	ldd	r24, Y+2	; 0x02
    10be:	85 30       	cpi	r24, 0x05	; 5
    10c0:	10 f3       	brcs	.-60     	; 0x1086 <Compare_Passowrds+0x22>
			break;
		}
		else
			flag = 0;
	}
	if (flag == 1) return PASSWORD_UNMATCH;
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	81 30       	cpi	r24, 0x01	; 1
    10c6:	11 f4       	brne	.+4      	; 0x10cc <Compare_Passowrds+0x68>
    10c8:	1f 82       	std	Y+7, r1	; 0x07
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <Compare_Passowrds+0x6c>
	else return PASSWORD_MATCH;
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	8f 83       	std	Y+7, r24	; 0x07
    10d0:	8f 81       	ldd	r24, Y+7	; 0x07
}
    10d2:	27 96       	adiw	r28, 0x07	; 7
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	f8 94       	cli
    10d8:	de bf       	out	0x3e, r29	; 62
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	cd bf       	out	0x3d, r28	; 61
    10de:	cf 91       	pop	r28
    10e0:	df 91       	pop	r29
    10e2:	08 95       	ret

000010e4 <Save_Password_In_EEPROM>:

void Save_Password_In_EEPROM(uint8 * pass){
    10e4:	df 93       	push	r29
    10e6:	cf 93       	push	r28
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
    10ec:	61 97       	sbiw	r28, 0x11	; 17
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	f8 94       	cli
    10f2:	de bf       	out	0x3e, r29	; 62
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	cd bf       	out	0x3d, r28	; 61
    10f8:	99 8b       	std	Y+17, r25	; 0x11
    10fa:	88 8b       	std	Y+16, r24	; 0x10
	for (uint8 i=0;i<PASSWORD_LONG;i++){
    10fc:	1f 86       	std	Y+15, r1	; 0x0f
    10fe:	95 c0       	rjmp	.+298    	; 0x122a <Save_Password_In_EEPROM+0x146>
		EEPROM_writeByte(STORED_PASS_ADRESS +i ,pass[i]);
    1100:	8f 85       	ldd	r24, Y+15	; 0x0f
    1102:	48 2f       	mov	r20, r24
    1104:	50 e0       	ldi	r21, 0x00	; 0
    1106:	8f 85       	ldd	r24, Y+15	; 0x0f
    1108:	28 2f       	mov	r18, r24
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	88 89       	ldd	r24, Y+16	; 0x10
    110e:	99 89       	ldd	r25, Y+17	; 0x11
    1110:	fc 01       	movw	r30, r24
    1112:	e2 0f       	add	r30, r18
    1114:	f3 1f       	adc	r31, r19
    1116:	20 81       	ld	r18, Z
    1118:	ca 01       	movw	r24, r20
    111a:	62 2f       	mov	r22, r18
    111c:	0e 94 ba 09 	call	0x1374	; 0x1374 <EEPROM_writeByte>
		password_Saved_In_EEPROM[i] = pass[i];
    1120:	8f 85       	ldd	r24, Y+15	; 0x0f
    1122:	48 2f       	mov	r20, r24
    1124:	50 e0       	ldi	r21, 0x00	; 0
    1126:	8f 85       	ldd	r24, Y+15	; 0x0f
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	88 89       	ldd	r24, Y+16	; 0x10
    112e:	99 89       	ldd	r25, Y+17	; 0x11
    1130:	fc 01       	movw	r30, r24
    1132:	e2 0f       	add	r30, r18
    1134:	f3 1f       	adc	r31, r19
    1136:	80 81       	ld	r24, Z
    1138:	fa 01       	movw	r30, r20
    113a:	ec 57       	subi	r30, 0x7C	; 124
    113c:	ff 4f       	sbci	r31, 0xFF	; 255
    113e:	80 83       	st	Z, r24
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	a8 e4       	ldi	r26, 0x48	; 72
    1146:	b2 e4       	ldi	r27, 0x42	; 66
    1148:	8b 87       	std	Y+11, r24	; 0x0b
    114a:	9c 87       	std	Y+12, r25	; 0x0c
    114c:	ad 87       	std	Y+13, r26	; 0x0d
    114e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1150:	6b 85       	ldd	r22, Y+11	; 0x0b
    1152:	7c 85       	ldd	r23, Y+12	; 0x0c
    1154:	8d 85       	ldd	r24, Y+13	; 0x0d
    1156:	9e 85       	ldd	r25, Y+14	; 0x0e
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	4a e7       	ldi	r20, 0x7A	; 122
    115e:	53 e4       	ldi	r21, 0x43	; 67
    1160:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1164:	dc 01       	movw	r26, r24
    1166:	cb 01       	movw	r24, r22
    1168:	8f 83       	std	Y+7, r24	; 0x07
    116a:	98 87       	std	Y+8, r25	; 0x08
    116c:	a9 87       	std	Y+9, r26	; 0x09
    116e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1170:	6f 81       	ldd	r22, Y+7	; 0x07
    1172:	78 85       	ldd	r23, Y+8	; 0x08
    1174:	89 85       	ldd	r24, Y+9	; 0x09
    1176:	9a 85       	ldd	r25, Y+10	; 0x0a
    1178:	20 e0       	ldi	r18, 0x00	; 0
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	40 e8       	ldi	r20, 0x80	; 128
    117e:	5f e3       	ldi	r21, 0x3F	; 63
    1180:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1184:	88 23       	and	r24, r24
    1186:	2c f4       	brge	.+10     	; 0x1192 <Save_Password_In_EEPROM+0xae>
		__ticks = 1;
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	9e 83       	std	Y+6, r25	; 0x06
    118e:	8d 83       	std	Y+5, r24	; 0x05
    1190:	3f c0       	rjmp	.+126    	; 0x1210 <Save_Password_In_EEPROM+0x12c>
	else if (__tmp > 65535)
    1192:	6f 81       	ldd	r22, Y+7	; 0x07
    1194:	78 85       	ldd	r23, Y+8	; 0x08
    1196:	89 85       	ldd	r24, Y+9	; 0x09
    1198:	9a 85       	ldd	r25, Y+10	; 0x0a
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	3f ef       	ldi	r19, 0xFF	; 255
    119e:	4f e7       	ldi	r20, 0x7F	; 127
    11a0:	57 e4       	ldi	r21, 0x47	; 71
    11a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11a6:	18 16       	cp	r1, r24
    11a8:	4c f5       	brge	.+82     	; 0x11fc <Save_Password_In_EEPROM+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    11ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    11ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    11b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	40 e2       	ldi	r20, 0x20	; 32
    11b8:	51 e4       	ldi	r21, 0x41	; 65
    11ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11be:	dc 01       	movw	r26, r24
    11c0:	cb 01       	movw	r24, r22
    11c2:	bc 01       	movw	r22, r24
    11c4:	cd 01       	movw	r24, r26
    11c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ca:	dc 01       	movw	r26, r24
    11cc:	cb 01       	movw	r24, r22
    11ce:	9e 83       	std	Y+6, r25	; 0x06
    11d0:	8d 83       	std	Y+5, r24	; 0x05
    11d2:	0f c0       	rjmp	.+30     	; 0x11f2 <Save_Password_In_EEPROM+0x10e>
    11d4:	89 e1       	ldi	r24, 0x19	; 25
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	9c 83       	std	Y+4, r25	; 0x04
    11da:	8b 83       	std	Y+3, r24	; 0x03
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	9c 81       	ldd	r25, Y+4	; 0x04
    11e0:	01 97       	sbiw	r24, 0x01	; 1
    11e2:	f1 f7       	brne	.-4      	; 0x11e0 <Save_Password_In_EEPROM+0xfc>
    11e4:	9c 83       	std	Y+4, r25	; 0x04
    11e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11e8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ea:	9e 81       	ldd	r25, Y+6	; 0x06
    11ec:	01 97       	sbiw	r24, 0x01	; 1
    11ee:	9e 83       	std	Y+6, r25	; 0x06
    11f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11f2:	8d 81       	ldd	r24, Y+5	; 0x05
    11f4:	9e 81       	ldd	r25, Y+6	; 0x06
    11f6:	00 97       	sbiw	r24, 0x00	; 0
    11f8:	69 f7       	brne	.-38     	; 0x11d4 <Save_Password_In_EEPROM+0xf0>
    11fa:	14 c0       	rjmp	.+40     	; 0x1224 <Save_Password_In_EEPROM+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11fc:	6f 81       	ldd	r22, Y+7	; 0x07
    11fe:	78 85       	ldd	r23, Y+8	; 0x08
    1200:	89 85       	ldd	r24, Y+9	; 0x09
    1202:	9a 85       	ldd	r25, Y+10	; 0x0a
    1204:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1208:	dc 01       	movw	r26, r24
    120a:	cb 01       	movw	r24, r22
    120c:	9e 83       	std	Y+6, r25	; 0x06
    120e:	8d 83       	std	Y+5, r24	; 0x05
    1210:	8d 81       	ldd	r24, Y+5	; 0x05
    1212:	9e 81       	ldd	r25, Y+6	; 0x06
    1214:	9a 83       	std	Y+2, r25	; 0x02
    1216:	89 83       	std	Y+1, r24	; 0x01
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	9a 81       	ldd	r25, Y+2	; 0x02
    121c:	01 97       	sbiw	r24, 0x01	; 1
    121e:	f1 f7       	brne	.-4      	; 0x121c <Save_Password_In_EEPROM+0x138>
    1220:	9a 83       	std	Y+2, r25	; 0x02
    1222:	89 83       	std	Y+1, r24	; 0x01
	if (flag == 1) return PASSWORD_UNMATCH;
	else return PASSWORD_MATCH;
}

void Save_Password_In_EEPROM(uint8 * pass){
	for (uint8 i=0;i<PASSWORD_LONG;i++){
    1224:	8f 85       	ldd	r24, Y+15	; 0x0f
    1226:	8f 5f       	subi	r24, 0xFF	; 255
    1228:	8f 87       	std	Y+15, r24	; 0x0f
    122a:	8f 85       	ldd	r24, Y+15	; 0x0f
    122c:	85 30       	cpi	r24, 0x05	; 5
    122e:	08 f4       	brcc	.+2      	; 0x1232 <Save_Password_In_EEPROM+0x14e>
    1230:	67 cf       	rjmp	.-306    	; 0x1100 <Save_Password_In_EEPROM+0x1c>
		EEPROM_writeByte(STORED_PASS_ADRESS +i ,pass[i]);
		password_Saved_In_EEPROM[i] = pass[i];
		_delay_ms(50);
	}
}
    1232:	61 96       	adiw	r28, 0x11	; 17
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	cd bf       	out	0x3d, r28	; 61
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	08 95       	ret

00001244 <Door_Mession>:

void Door_Mession(void){
    1244:	df 93       	push	r29
    1246:	cf 93       	push	r28
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62

	/*Opening the door in 15sec*/
	g_ticks=0;
    124c:	10 92 79 00 	sts	0x0079, r1
    1250:	10 92 78 00 	sts	0x0078, r1
	DcMotor_Rotate(DC_MOTOR_CW);
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	0e 94 87 09 	call	0x130e	; 0x130e <DcMotor_Rotate>
	while (g_ticks < Opening_the_Door);
    125a:	80 91 78 00 	lds	r24, 0x0078
    125e:	90 91 79 00 	lds	r25, 0x0079
    1262:	8f 30       	cpi	r24, 0x0F	; 15
    1264:	91 05       	cpc	r25, r1
    1266:	c8 f3       	brcs	.-14     	; 0x125a <Door_Mession+0x16>

	/*Holding the door in 3sec*/
	g_ticks=0;
    1268:	10 92 79 00 	sts	0x0079, r1
    126c:	10 92 78 00 	sts	0x0078, r1
	DcMotor_Rotate(DC_MOTOR_STOP);
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	0e 94 87 09 	call	0x130e	; 0x130e <DcMotor_Rotate>
	while (g_ticks < Holding_The_Door);
    1276:	80 91 78 00 	lds	r24, 0x0078
    127a:	90 91 79 00 	lds	r25, 0x0079
    127e:	83 30       	cpi	r24, 0x03	; 3
    1280:	91 05       	cpc	r25, r1
    1282:	c8 f3       	brcs	.-14     	; 0x1276 <Door_Mession+0x32>

	/*Closing the door in 15sec*/
	g_ticks=0;
    1284:	10 92 79 00 	sts	0x0079, r1
    1288:	10 92 78 00 	sts	0x0078, r1
	DcMotor_Rotate(DC_MOTOR_ACW);
    128c:	82 e0       	ldi	r24, 0x02	; 2
    128e:	0e 94 87 09 	call	0x130e	; 0x130e <DcMotor_Rotate>
	while (g_ticks < Closing_The_Door);
    1292:	80 91 78 00 	lds	r24, 0x0078
    1296:	90 91 79 00 	lds	r25, 0x0079
    129a:	8f 30       	cpi	r24, 0x0F	; 15
    129c:	91 05       	cpc	r25, r1
    129e:	c8 f3       	brcs	.-14     	; 0x1292 <Door_Mession+0x4e>

	/*Stop the Motor*/
	DcMotor_Rotate(DC_MOTOR_STOP);
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	0e 94 87 09 	call	0x130e	; 0x130e <DcMotor_Rotate>
}
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <Buzzer_Mession>:

void Buzzer_Mession(void){
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	cd b7       	in	r28, 0x3d	; 61
    12b2:	de b7       	in	r29, 0x3e	; 62
	g_ticks=0;
    12b4:	10 92 79 00 	sts	0x0079, r1
    12b8:	10 92 78 00 	sts	0x0078, r1
	Buzzer_On();
    12bc:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer_On>
	while (g_ticks < Warning_Time);
    12c0:	80 91 78 00 	lds	r24, 0x0078
    12c4:	90 91 79 00 	lds	r25, 0x0079
    12c8:	8c 33       	cpi	r24, 0x3C	; 60
    12ca:	91 05       	cpc	r25, r1
    12cc:	c8 f3       	brcs	.-14     	; 0x12c0 <Buzzer_Mession+0x14>
	Buzzer_Off();
    12ce:	0e 94 c0 05 	call	0xb80	; 0xb80 <Buzzer_Off>
}
    12d2:	cf 91       	pop	r28
    12d4:	df 91       	pop	r29
    12d6:	08 95       	ret

000012d8 <DcMotor_Init>:
 * Initialize the DC Motor by:
 * 1. Setup the direction of the two motor pins as output by send the request to GPIO driver.
 * 2. Stop the motor at the beginning
 */
void DcMotor_Init(void)
{
    12d8:	df 93       	push	r29
    12da:	cf 93       	push	r28
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
	/* Setup the two motor pins as output pins */
	GPIO_setupPinDirection(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,PIN_OUTPUT);
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	60 e0       	ldi	r22, 0x00	; 0
    12e4:	41 e0       	ldi	r20, 0x01	; 1
    12e6:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,PIN_OUTPUT);
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	61 e0       	ldi	r22, 0x01	; 1
    12ee:	41 e0       	ldi	r20, 0x01	; 1
    12f0:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <GPIO_setupPinDirection>

	/* Motor is stopped at the beginning */
	GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	60 e0       	ldi	r22, 0x00	; 0
    12f8:	40 e0       	ldi	r20, 0x00	; 0
    12fa:	0e 94 46 0b 	call	0x168c	; 0x168c <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	61 e0       	ldi	r22, 0x01	; 1
    1302:	40 e0       	ldi	r20, 0x00	; 0
    1304:	0e 94 46 0b 	call	0x168c	; 0x168c <GPIO_writePin>
}
    1308:	cf 91       	pop	r28
    130a:	df 91       	pop	r29
    130c:	08 95       	ret

0000130e <DcMotor_Rotate>:
 * Description :
 * 1. Rotate  or Stop the motor according to the state input variable.
 * 2. Control the motor speed 0 --> 100% from its maximum speed by sending to PWM driver.
 */
void DcMotor_Rotate(DcMotor_State state)
{
    130e:	df 93       	push	r29
    1310:	cf 93       	push	r28
    1312:	0f 92       	push	r0
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	89 83       	std	Y+1, r24	; 0x01
	if(state == DC_MOTOR_CW)
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	81 30       	cpi	r24, 0x01	; 1
    131e:	59 f4       	brne	.+22     	; 0x1336 <DcMotor_Rotate+0x28>
	{
		/* Rotates the Motor CW */
		GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	60 e0       	ldi	r22, 0x00	; 0
    1324:	40 e0       	ldi	r20, 0x00	; 0
    1326:	0e 94 46 0b 	call	0x168c	; 0x168c <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_HIGH);
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	61 e0       	ldi	r22, 0x01	; 1
    132e:	41 e0       	ldi	r20, 0x01	; 1
    1330:	0e 94 46 0b 	call	0x168c	; 0x168c <GPIO_writePin>
    1334:	1b c0       	rjmp	.+54     	; 0x136c <DcMotor_Rotate+0x5e>
	}
	else if(state == DC_MOTOR_ACW)
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	82 30       	cpi	r24, 0x02	; 2
    133a:	59 f4       	brne	.+22     	; 0x1352 <DcMotor_Rotate+0x44>
	{
		/* Rotates the Motor A-CW */
		GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_HIGH);
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	60 e0       	ldi	r22, 0x00	; 0
    1340:	41 e0       	ldi	r20, 0x01	; 1
    1342:	0e 94 46 0b 	call	0x168c	; 0x168c <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	61 e0       	ldi	r22, 0x01	; 1
    134a:	40 e0       	ldi	r20, 0x00	; 0
    134c:	0e 94 46 0b 	call	0x168c	; 0x168c <GPIO_writePin>
    1350:	0d c0       	rjmp	.+26     	; 0x136c <DcMotor_Rotate+0x5e>
	}
	else if(state == DC_MOTOR_STOP)
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	88 23       	and	r24, r24
    1356:	51 f4       	brne	.+20     	; 0x136c <DcMotor_Rotate+0x5e>
	{
		/* Stop the Motor */
		GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	60 e0       	ldi	r22, 0x00	; 0
    135c:	40 e0       	ldi	r20, 0x00	; 0
    135e:	0e 94 46 0b 	call	0x168c	; 0x168c <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	61 e0       	ldi	r22, 0x01	; 1
    1366:	40 e0       	ldi	r20, 0x00	; 0
    1368:	0e 94 46 0b 	call	0x168c	; 0x168c <GPIO_writePin>
	}
	else
	{
		/* Invalid Input State - Do Nothing */
	}
}
    136c:	0f 90       	pop	r0
    136e:	cf 91       	pop	r28
    1370:	df 91       	pop	r29
    1372:	08 95       	ret

00001374 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	00 d0       	rcall	.+0      	; 0x137a <EEPROM_writeByte+0x6>
    137a:	00 d0       	rcall	.+0      	; 0x137c <EEPROM_writeByte+0x8>
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
    1380:	9a 83       	std	Y+2, r25	; 0x02
    1382:	89 83       	std	Y+1, r24	; 0x01
    1384:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1386:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    138a:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <TWI_getStatus>
    138e:	88 30       	cpi	r24, 0x08	; 8
    1390:	11 f0       	breq	.+4      	; 0x1396 <EEPROM_writeByte+0x22>
        return ERROR;
    1392:	1c 82       	std	Y+4, r1	; 0x04
    1394:	28 c0       	rjmp	.+80     	; 0x13e6 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1396:	89 81       	ldd	r24, Y+1	; 0x01
    1398:	9a 81       	ldd	r25, Y+2	; 0x02
    139a:	80 70       	andi	r24, 0x00	; 0
    139c:	97 70       	andi	r25, 0x07	; 7
    139e:	88 0f       	add	r24, r24
    13a0:	89 2f       	mov	r24, r25
    13a2:	88 1f       	adc	r24, r24
    13a4:	99 0b       	sbc	r25, r25
    13a6:	91 95       	neg	r25
    13a8:	80 6a       	ori	r24, 0xA0	; 160
    13aa:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    13ae:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <TWI_getStatus>
    13b2:	88 31       	cpi	r24, 0x18	; 24
    13b4:	11 f0       	breq	.+4      	; 0x13ba <EEPROM_writeByte+0x46>
        return ERROR; 
    13b6:	1c 82       	std	Y+4, r1	; 0x04
    13b8:	16 c0       	rjmp	.+44     	; 0x13e6 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    13ba:	89 81       	ldd	r24, Y+1	; 0x01
    13bc:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    13c0:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <TWI_getStatus>
    13c4:	88 32       	cpi	r24, 0x28	; 40
    13c6:	11 f0       	breq	.+4      	; 0x13cc <EEPROM_writeByte+0x58>
        return ERROR;
    13c8:	1c 82       	std	Y+4, r1	; 0x04
    13ca:	0d c0       	rjmp	.+26     	; 0x13e6 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    13cc:	8b 81       	ldd	r24, Y+3	; 0x03
    13ce:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    13d2:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <TWI_getStatus>
    13d6:	88 32       	cpi	r24, 0x28	; 40
    13d8:	11 f0       	breq	.+4      	; 0x13de <EEPROM_writeByte+0x6a>
        return ERROR;
    13da:	1c 82       	std	Y+4, r1	; 0x04
    13dc:	04 c0       	rjmp	.+8      	; 0x13e6 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    13de:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <TWI_stop>
	
    return SUCCESS;
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	8c 83       	std	Y+4, r24	; 0x04
    13e6:	8c 81       	ldd	r24, Y+4	; 0x04
}
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	0f 90       	pop	r0
    13ee:	0f 90       	pop	r0
    13f0:	cf 91       	pop	r28
    13f2:	df 91       	pop	r29
    13f4:	08 95       	ret

000013f6 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    13f6:	df 93       	push	r29
    13f8:	cf 93       	push	r28
    13fa:	00 d0       	rcall	.+0      	; 0x13fc <EEPROM_readByte+0x6>
    13fc:	00 d0       	rcall	.+0      	; 0x13fe <EEPROM_readByte+0x8>
    13fe:	0f 92       	push	r0
    1400:	cd b7       	in	r28, 0x3d	; 61
    1402:	de b7       	in	r29, 0x3e	; 62
    1404:	9a 83       	std	Y+2, r25	; 0x02
    1406:	89 83       	std	Y+1, r24	; 0x01
    1408:	7c 83       	std	Y+4, r23	; 0x04
    140a:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    140c:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1410:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <TWI_getStatus>
    1414:	88 30       	cpi	r24, 0x08	; 8
    1416:	11 f0       	breq	.+4      	; 0x141c <EEPROM_readByte+0x26>
        return ERROR;
    1418:	1d 82       	std	Y+5, r1	; 0x05
    141a:	44 c0       	rjmp	.+136    	; 0x14a4 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    141c:	89 81       	ldd	r24, Y+1	; 0x01
    141e:	9a 81       	ldd	r25, Y+2	; 0x02
    1420:	80 70       	andi	r24, 0x00	; 0
    1422:	97 70       	andi	r25, 0x07	; 7
    1424:	88 0f       	add	r24, r24
    1426:	89 2f       	mov	r24, r25
    1428:	88 1f       	adc	r24, r24
    142a:	99 0b       	sbc	r25, r25
    142c:	91 95       	neg	r25
    142e:	80 6a       	ori	r24, 0xA0	; 160
    1430:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1434:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <TWI_getStatus>
    1438:	88 31       	cpi	r24, 0x18	; 24
    143a:	11 f0       	breq	.+4      	; 0x1440 <EEPROM_readByte+0x4a>
        return ERROR;
    143c:	1d 82       	std	Y+5, r1	; 0x05
    143e:	32 c0       	rjmp	.+100    	; 0x14a4 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1446:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <TWI_getStatus>
    144a:	88 32       	cpi	r24, 0x28	; 40
    144c:	11 f0       	breq	.+4      	; 0x1452 <EEPROM_readByte+0x5c>
        return ERROR;
    144e:	1d 82       	std	Y+5, r1	; 0x05
    1450:	29 c0       	rjmp	.+82     	; 0x14a4 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1452:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1456:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <TWI_getStatus>
    145a:	80 31       	cpi	r24, 0x10	; 16
    145c:	11 f0       	breq	.+4      	; 0x1462 <EEPROM_readByte+0x6c>
        return ERROR;
    145e:	1d 82       	std	Y+5, r1	; 0x05
    1460:	21 c0       	rjmp	.+66     	; 0x14a4 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1462:	89 81       	ldd	r24, Y+1	; 0x01
    1464:	9a 81       	ldd	r25, Y+2	; 0x02
    1466:	80 70       	andi	r24, 0x00	; 0
    1468:	97 70       	andi	r25, 0x07	; 7
    146a:	88 0f       	add	r24, r24
    146c:	89 2f       	mov	r24, r25
    146e:	88 1f       	adc	r24, r24
    1470:	99 0b       	sbc	r25, r25
    1472:	91 95       	neg	r25
    1474:	81 6a       	ori	r24, 0xA1	; 161
    1476:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    147a:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <TWI_getStatus>
    147e:	80 34       	cpi	r24, 0x40	; 64
    1480:	11 f0       	breq	.+4      	; 0x1486 <EEPROM_readByte+0x90>
        return ERROR;
    1482:	1d 82       	std	Y+5, r1	; 0x05
    1484:	0f c0       	rjmp	.+30     	; 0x14a4 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1486:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <TWI_readByteWithNACK>
    148a:	eb 81       	ldd	r30, Y+3	; 0x03
    148c:	fc 81       	ldd	r31, Y+4	; 0x04
    148e:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1490:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <TWI_getStatus>
    1494:	88 35       	cpi	r24, 0x58	; 88
    1496:	11 f0       	breq	.+4      	; 0x149c <EEPROM_readByte+0xa6>
        return ERROR;
    1498:	1d 82       	std	Y+5, r1	; 0x05
    149a:	04 c0       	rjmp	.+8      	; 0x14a4 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    149c:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <TWI_stop>

    return SUCCESS;
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	8d 83       	std	Y+5, r24	; 0x05
    14a4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	cf 91       	pop	r28
    14b2:	df 91       	pop	r29
    14b4:	08 95       	ret

000014b6 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    14b6:	df 93       	push	r29
    14b8:	cf 93       	push	r28
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <GPIO_setupPinDirection+0x6>
    14bc:	00 d0       	rcall	.+0      	; 0x14be <GPIO_setupPinDirection+0x8>
    14be:	0f 92       	push	r0
    14c0:	cd b7       	in	r28, 0x3d	; 61
    14c2:	de b7       	in	r29, 0x3e	; 62
    14c4:	89 83       	std	Y+1, r24	; 0x01
    14c6:	6a 83       	std	Y+2, r22	; 0x02
    14c8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    14ca:	8a 81       	ldd	r24, Y+2	; 0x02
    14cc:	88 30       	cpi	r24, 0x08	; 8
    14ce:	08 f0       	brcs	.+2      	; 0x14d2 <GPIO_setupPinDirection+0x1c>
    14d0:	d5 c0       	rjmp	.+426    	; 0x167c <GPIO_setupPinDirection+0x1c6>
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
    14d4:	84 30       	cpi	r24, 0x04	; 4
    14d6:	08 f0       	brcs	.+2      	; 0x14da <GPIO_setupPinDirection+0x24>
    14d8:	d1 c0       	rjmp	.+418    	; 0x167c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    14da:	89 81       	ldd	r24, Y+1	; 0x01
    14dc:	28 2f       	mov	r18, r24
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	3d 83       	std	Y+5, r19	; 0x05
    14e2:	2c 83       	std	Y+4, r18	; 0x04
    14e4:	8c 81       	ldd	r24, Y+4	; 0x04
    14e6:	9d 81       	ldd	r25, Y+5	; 0x05
    14e8:	81 30       	cpi	r24, 0x01	; 1
    14ea:	91 05       	cpc	r25, r1
    14ec:	09 f4       	brne	.+2      	; 0x14f0 <GPIO_setupPinDirection+0x3a>
    14ee:	43 c0       	rjmp	.+134    	; 0x1576 <GPIO_setupPinDirection+0xc0>
    14f0:	2c 81       	ldd	r18, Y+4	; 0x04
    14f2:	3d 81       	ldd	r19, Y+5	; 0x05
    14f4:	22 30       	cpi	r18, 0x02	; 2
    14f6:	31 05       	cpc	r19, r1
    14f8:	2c f4       	brge	.+10     	; 0x1504 <GPIO_setupPinDirection+0x4e>
    14fa:	8c 81       	ldd	r24, Y+4	; 0x04
    14fc:	9d 81       	ldd	r25, Y+5	; 0x05
    14fe:	00 97       	sbiw	r24, 0x00	; 0
    1500:	71 f0       	breq	.+28     	; 0x151e <GPIO_setupPinDirection+0x68>
    1502:	bc c0       	rjmp	.+376    	; 0x167c <GPIO_setupPinDirection+0x1c6>
    1504:	2c 81       	ldd	r18, Y+4	; 0x04
    1506:	3d 81       	ldd	r19, Y+5	; 0x05
    1508:	22 30       	cpi	r18, 0x02	; 2
    150a:	31 05       	cpc	r19, r1
    150c:	09 f4       	brne	.+2      	; 0x1510 <GPIO_setupPinDirection+0x5a>
    150e:	5f c0       	rjmp	.+190    	; 0x15ce <GPIO_setupPinDirection+0x118>
    1510:	8c 81       	ldd	r24, Y+4	; 0x04
    1512:	9d 81       	ldd	r25, Y+5	; 0x05
    1514:	83 30       	cpi	r24, 0x03	; 3
    1516:	91 05       	cpc	r25, r1
    1518:	09 f4       	brne	.+2      	; 0x151c <GPIO_setupPinDirection+0x66>
    151a:	85 c0       	rjmp	.+266    	; 0x1626 <GPIO_setupPinDirection+0x170>
    151c:	af c0       	rjmp	.+350    	; 0x167c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	81 30       	cpi	r24, 0x01	; 1
    1522:	a1 f4       	brne	.+40     	; 0x154c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1524:	aa e3       	ldi	r26, 0x3A	; 58
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	ea e3       	ldi	r30, 0x3A	; 58
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	48 2f       	mov	r20, r24
    1530:	8a 81       	ldd	r24, Y+2	; 0x02
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	02 2e       	mov	r0, r18
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <GPIO_setupPinDirection+0x8c>
    153e:	88 0f       	add	r24, r24
    1540:	99 1f       	adc	r25, r25
    1542:	0a 94       	dec	r0
    1544:	e2 f7       	brpl	.-8      	; 0x153e <GPIO_setupPinDirection+0x88>
    1546:	84 2b       	or	r24, r20
    1548:	8c 93       	st	X, r24
    154a:	98 c0       	rjmp	.+304    	; 0x167c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    154c:	aa e3       	ldi	r26, 0x3A	; 58
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	ea e3       	ldi	r30, 0x3A	; 58
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	48 2f       	mov	r20, r24
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	28 2f       	mov	r18, r24
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	02 2e       	mov	r0, r18
    1564:	02 c0       	rjmp	.+4      	; 0x156a <GPIO_setupPinDirection+0xb4>
    1566:	88 0f       	add	r24, r24
    1568:	99 1f       	adc	r25, r25
    156a:	0a 94       	dec	r0
    156c:	e2 f7       	brpl	.-8      	; 0x1566 <GPIO_setupPinDirection+0xb0>
    156e:	80 95       	com	r24
    1570:	84 23       	and	r24, r20
    1572:	8c 93       	st	X, r24
    1574:	83 c0       	rjmp	.+262    	; 0x167c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	81 30       	cpi	r24, 0x01	; 1
    157a:	a1 f4       	brne	.+40     	; 0x15a4 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    157c:	a7 e3       	ldi	r26, 0x37	; 55
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	e7 e3       	ldi	r30, 0x37	; 55
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	48 2f       	mov	r20, r24
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	28 2f       	mov	r18, r24
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	02 2e       	mov	r0, r18
    1594:	02 c0       	rjmp	.+4      	; 0x159a <GPIO_setupPinDirection+0xe4>
    1596:	88 0f       	add	r24, r24
    1598:	99 1f       	adc	r25, r25
    159a:	0a 94       	dec	r0
    159c:	e2 f7       	brpl	.-8      	; 0x1596 <GPIO_setupPinDirection+0xe0>
    159e:	84 2b       	or	r24, r20
    15a0:	8c 93       	st	X, r24
    15a2:	6c c0       	rjmp	.+216    	; 0x167c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    15a4:	a7 e3       	ldi	r26, 0x37	; 55
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	e7 e3       	ldi	r30, 0x37	; 55
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	48 2f       	mov	r20, r24
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	28 2f       	mov	r18, r24
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	02 2e       	mov	r0, r18
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <GPIO_setupPinDirection+0x10c>
    15be:	88 0f       	add	r24, r24
    15c0:	99 1f       	adc	r25, r25
    15c2:	0a 94       	dec	r0
    15c4:	e2 f7       	brpl	.-8      	; 0x15be <GPIO_setupPinDirection+0x108>
    15c6:	80 95       	com	r24
    15c8:	84 23       	and	r24, r20
    15ca:	8c 93       	st	X, r24
    15cc:	57 c0       	rjmp	.+174    	; 0x167c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    15ce:	8b 81       	ldd	r24, Y+3	; 0x03
    15d0:	81 30       	cpi	r24, 0x01	; 1
    15d2:	a1 f4       	brne	.+40     	; 0x15fc <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    15d4:	a4 e3       	ldi	r26, 0x34	; 52
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	e4 e3       	ldi	r30, 0x34	; 52
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	48 2f       	mov	r20, r24
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	02 2e       	mov	r0, r18
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <GPIO_setupPinDirection+0x13c>
    15ee:	88 0f       	add	r24, r24
    15f0:	99 1f       	adc	r25, r25
    15f2:	0a 94       	dec	r0
    15f4:	e2 f7       	brpl	.-8      	; 0x15ee <GPIO_setupPinDirection+0x138>
    15f6:	84 2b       	or	r24, r20
    15f8:	8c 93       	st	X, r24
    15fa:	40 c0       	rjmp	.+128    	; 0x167c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    15fc:	a4 e3       	ldi	r26, 0x34	; 52
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	e4 e3       	ldi	r30, 0x34	; 52
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	48 2f       	mov	r20, r24
    1608:	8a 81       	ldd	r24, Y+2	; 0x02
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	02 2e       	mov	r0, r18
    1614:	02 c0       	rjmp	.+4      	; 0x161a <GPIO_setupPinDirection+0x164>
    1616:	88 0f       	add	r24, r24
    1618:	99 1f       	adc	r25, r25
    161a:	0a 94       	dec	r0
    161c:	e2 f7       	brpl	.-8      	; 0x1616 <GPIO_setupPinDirection+0x160>
    161e:	80 95       	com	r24
    1620:	84 23       	and	r24, r20
    1622:	8c 93       	st	X, r24
    1624:	2b c0       	rjmp	.+86     	; 0x167c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1626:	8b 81       	ldd	r24, Y+3	; 0x03
    1628:	81 30       	cpi	r24, 0x01	; 1
    162a:	a1 f4       	brne	.+40     	; 0x1654 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    162c:	a1 e3       	ldi	r26, 0x31	; 49
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	e1 e3       	ldi	r30, 0x31	; 49
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	48 2f       	mov	r20, r24
    1638:	8a 81       	ldd	r24, Y+2	; 0x02
    163a:	28 2f       	mov	r18, r24
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	02 2e       	mov	r0, r18
    1644:	02 c0       	rjmp	.+4      	; 0x164a <GPIO_setupPinDirection+0x194>
    1646:	88 0f       	add	r24, r24
    1648:	99 1f       	adc	r25, r25
    164a:	0a 94       	dec	r0
    164c:	e2 f7       	brpl	.-8      	; 0x1646 <GPIO_setupPinDirection+0x190>
    164e:	84 2b       	or	r24, r20
    1650:	8c 93       	st	X, r24
    1652:	14 c0       	rjmp	.+40     	; 0x167c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1654:	a1 e3       	ldi	r26, 0x31	; 49
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	e1 e3       	ldi	r30, 0x31	; 49
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	48 2f       	mov	r20, r24
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	02 2e       	mov	r0, r18
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <GPIO_setupPinDirection+0x1bc>
    166e:	88 0f       	add	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	0a 94       	dec	r0
    1674:	e2 f7       	brpl	.-8      	; 0x166e <GPIO_setupPinDirection+0x1b8>
    1676:	80 95       	com	r24
    1678:	84 23       	and	r24, r20
    167a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
    1686:	cf 91       	pop	r28
    1688:	df 91       	pop	r29
    168a:	08 95       	ret

0000168c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    168c:	df 93       	push	r29
    168e:	cf 93       	push	r28
    1690:	00 d0       	rcall	.+0      	; 0x1692 <GPIO_writePin+0x6>
    1692:	00 d0       	rcall	.+0      	; 0x1694 <GPIO_writePin+0x8>
    1694:	0f 92       	push	r0
    1696:	cd b7       	in	r28, 0x3d	; 61
    1698:	de b7       	in	r29, 0x3e	; 62
    169a:	89 83       	std	Y+1, r24	; 0x01
    169c:	6a 83       	std	Y+2, r22	; 0x02
    169e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16a0:	8a 81       	ldd	r24, Y+2	; 0x02
    16a2:	88 30       	cpi	r24, 0x08	; 8
    16a4:	08 f0       	brcs	.+2      	; 0x16a8 <GPIO_writePin+0x1c>
    16a6:	d5 c0       	rjmp	.+426    	; 0x1852 <GPIO_writePin+0x1c6>
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	84 30       	cpi	r24, 0x04	; 4
    16ac:	08 f0       	brcs	.+2      	; 0x16b0 <GPIO_writePin+0x24>
    16ae:	d1 c0       	rjmp	.+418    	; 0x1852 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    16b0:	89 81       	ldd	r24, Y+1	; 0x01
    16b2:	28 2f       	mov	r18, r24
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	3d 83       	std	Y+5, r19	; 0x05
    16b8:	2c 83       	std	Y+4, r18	; 0x04
    16ba:	8c 81       	ldd	r24, Y+4	; 0x04
    16bc:	9d 81       	ldd	r25, Y+5	; 0x05
    16be:	81 30       	cpi	r24, 0x01	; 1
    16c0:	91 05       	cpc	r25, r1
    16c2:	09 f4       	brne	.+2      	; 0x16c6 <GPIO_writePin+0x3a>
    16c4:	43 c0       	rjmp	.+134    	; 0x174c <GPIO_writePin+0xc0>
    16c6:	2c 81       	ldd	r18, Y+4	; 0x04
    16c8:	3d 81       	ldd	r19, Y+5	; 0x05
    16ca:	22 30       	cpi	r18, 0x02	; 2
    16cc:	31 05       	cpc	r19, r1
    16ce:	2c f4       	brge	.+10     	; 0x16da <GPIO_writePin+0x4e>
    16d0:	8c 81       	ldd	r24, Y+4	; 0x04
    16d2:	9d 81       	ldd	r25, Y+5	; 0x05
    16d4:	00 97       	sbiw	r24, 0x00	; 0
    16d6:	71 f0       	breq	.+28     	; 0x16f4 <GPIO_writePin+0x68>
    16d8:	bc c0       	rjmp	.+376    	; 0x1852 <GPIO_writePin+0x1c6>
    16da:	2c 81       	ldd	r18, Y+4	; 0x04
    16dc:	3d 81       	ldd	r19, Y+5	; 0x05
    16de:	22 30       	cpi	r18, 0x02	; 2
    16e0:	31 05       	cpc	r19, r1
    16e2:	09 f4       	brne	.+2      	; 0x16e6 <GPIO_writePin+0x5a>
    16e4:	5f c0       	rjmp	.+190    	; 0x17a4 <GPIO_writePin+0x118>
    16e6:	8c 81       	ldd	r24, Y+4	; 0x04
    16e8:	9d 81       	ldd	r25, Y+5	; 0x05
    16ea:	83 30       	cpi	r24, 0x03	; 3
    16ec:	91 05       	cpc	r25, r1
    16ee:	09 f4       	brne	.+2      	; 0x16f2 <GPIO_writePin+0x66>
    16f0:	85 c0       	rjmp	.+266    	; 0x17fc <GPIO_writePin+0x170>
    16f2:	af c0       	rjmp	.+350    	; 0x1852 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    16f4:	8b 81       	ldd	r24, Y+3	; 0x03
    16f6:	81 30       	cpi	r24, 0x01	; 1
    16f8:	a1 f4       	brne	.+40     	; 0x1722 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    16fa:	ab e3       	ldi	r26, 0x3B	; 59
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	eb e3       	ldi	r30, 0x3B	; 59
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	48 2f       	mov	r20, r24
    1706:	8a 81       	ldd	r24, Y+2	; 0x02
    1708:	28 2f       	mov	r18, r24
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	02 2e       	mov	r0, r18
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <GPIO_writePin+0x8c>
    1714:	88 0f       	add	r24, r24
    1716:	99 1f       	adc	r25, r25
    1718:	0a 94       	dec	r0
    171a:	e2 f7       	brpl	.-8      	; 0x1714 <GPIO_writePin+0x88>
    171c:	84 2b       	or	r24, r20
    171e:	8c 93       	st	X, r24
    1720:	98 c0       	rjmp	.+304    	; 0x1852 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1722:	ab e3       	ldi	r26, 0x3B	; 59
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	eb e3       	ldi	r30, 0x3B	; 59
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	48 2f       	mov	r20, r24
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	28 2f       	mov	r18, r24
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	02 2e       	mov	r0, r18
    173a:	02 c0       	rjmp	.+4      	; 0x1740 <GPIO_writePin+0xb4>
    173c:	88 0f       	add	r24, r24
    173e:	99 1f       	adc	r25, r25
    1740:	0a 94       	dec	r0
    1742:	e2 f7       	brpl	.-8      	; 0x173c <GPIO_writePin+0xb0>
    1744:	80 95       	com	r24
    1746:	84 23       	and	r24, r20
    1748:	8c 93       	st	X, r24
    174a:	83 c0       	rjmp	.+262    	; 0x1852 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	81 30       	cpi	r24, 0x01	; 1
    1750:	a1 f4       	brne	.+40     	; 0x177a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1752:	a8 e3       	ldi	r26, 0x38	; 56
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	e8 e3       	ldi	r30, 0x38	; 56
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	48 2f       	mov	r20, r24
    175e:	8a 81       	ldd	r24, Y+2	; 0x02
    1760:	28 2f       	mov	r18, r24
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	02 2e       	mov	r0, r18
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <GPIO_writePin+0xe4>
    176c:	88 0f       	add	r24, r24
    176e:	99 1f       	adc	r25, r25
    1770:	0a 94       	dec	r0
    1772:	e2 f7       	brpl	.-8      	; 0x176c <GPIO_writePin+0xe0>
    1774:	84 2b       	or	r24, r20
    1776:	8c 93       	st	X, r24
    1778:	6c c0       	rjmp	.+216    	; 0x1852 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    177a:	a8 e3       	ldi	r26, 0x38	; 56
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e8 e3       	ldi	r30, 0x38	; 56
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	48 2f       	mov	r20, r24
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	28 2f       	mov	r18, r24
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	02 2e       	mov	r0, r18
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <GPIO_writePin+0x10c>
    1794:	88 0f       	add	r24, r24
    1796:	99 1f       	adc	r25, r25
    1798:	0a 94       	dec	r0
    179a:	e2 f7       	brpl	.-8      	; 0x1794 <GPIO_writePin+0x108>
    179c:	80 95       	com	r24
    179e:	84 23       	and	r24, r20
    17a0:	8c 93       	st	X, r24
    17a2:	57 c0       	rjmp	.+174    	; 0x1852 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    17a4:	8b 81       	ldd	r24, Y+3	; 0x03
    17a6:	81 30       	cpi	r24, 0x01	; 1
    17a8:	a1 f4       	brne	.+40     	; 0x17d2 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    17aa:	a5 e3       	ldi	r26, 0x35	; 53
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	e5 e3       	ldi	r30, 0x35	; 53
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	48 2f       	mov	r20, r24
    17b6:	8a 81       	ldd	r24, Y+2	; 0x02
    17b8:	28 2f       	mov	r18, r24
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	02 2e       	mov	r0, r18
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <GPIO_writePin+0x13c>
    17c4:	88 0f       	add	r24, r24
    17c6:	99 1f       	adc	r25, r25
    17c8:	0a 94       	dec	r0
    17ca:	e2 f7       	brpl	.-8      	; 0x17c4 <GPIO_writePin+0x138>
    17cc:	84 2b       	or	r24, r20
    17ce:	8c 93       	st	X, r24
    17d0:	40 c0       	rjmp	.+128    	; 0x1852 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    17d2:	a5 e3       	ldi	r26, 0x35	; 53
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	e5 e3       	ldi	r30, 0x35	; 53
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	48 2f       	mov	r20, r24
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
    17e0:	28 2f       	mov	r18, r24
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	02 2e       	mov	r0, r18
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <GPIO_writePin+0x164>
    17ec:	88 0f       	add	r24, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	0a 94       	dec	r0
    17f2:	e2 f7       	brpl	.-8      	; 0x17ec <GPIO_writePin+0x160>
    17f4:	80 95       	com	r24
    17f6:	84 23       	and	r24, r20
    17f8:	8c 93       	st	X, r24
    17fa:	2b c0       	rjmp	.+86     	; 0x1852 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    17fc:	8b 81       	ldd	r24, Y+3	; 0x03
    17fe:	81 30       	cpi	r24, 0x01	; 1
    1800:	a1 f4       	brne	.+40     	; 0x182a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1802:	a2 e3       	ldi	r26, 0x32	; 50
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	e2 e3       	ldi	r30, 0x32	; 50
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	48 2f       	mov	r20, r24
    180e:	8a 81       	ldd	r24, Y+2	; 0x02
    1810:	28 2f       	mov	r18, r24
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	02 2e       	mov	r0, r18
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <GPIO_writePin+0x194>
    181c:	88 0f       	add	r24, r24
    181e:	99 1f       	adc	r25, r25
    1820:	0a 94       	dec	r0
    1822:	e2 f7       	brpl	.-8      	; 0x181c <GPIO_writePin+0x190>
    1824:	84 2b       	or	r24, r20
    1826:	8c 93       	st	X, r24
    1828:	14 c0       	rjmp	.+40     	; 0x1852 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    182a:	a2 e3       	ldi	r26, 0x32	; 50
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	e2 e3       	ldi	r30, 0x32	; 50
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	48 2f       	mov	r20, r24
    1836:	8a 81       	ldd	r24, Y+2	; 0x02
    1838:	28 2f       	mov	r18, r24
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	02 2e       	mov	r0, r18
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <GPIO_writePin+0x1bc>
    1844:	88 0f       	add	r24, r24
    1846:	99 1f       	adc	r25, r25
    1848:	0a 94       	dec	r0
    184a:	e2 f7       	brpl	.-8      	; 0x1844 <GPIO_writePin+0x1b8>
    184c:	80 95       	com	r24
    184e:	84 23       	and	r24, r20
    1850:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1852:	0f 90       	pop	r0
    1854:	0f 90       	pop	r0
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	0f 90       	pop	r0
    185c:	cf 91       	pop	r28
    185e:	df 91       	pop	r29
    1860:	08 95       	ret

00001862 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1862:	df 93       	push	r29
    1864:	cf 93       	push	r28
    1866:	00 d0       	rcall	.+0      	; 0x1868 <GPIO_readPin+0x6>
    1868:	00 d0       	rcall	.+0      	; 0x186a <GPIO_readPin+0x8>
    186a:	0f 92       	push	r0
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
    1870:	8a 83       	std	Y+2, r24	; 0x02
    1872:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1874:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	88 30       	cpi	r24, 0x08	; 8
    187a:	08 f0       	brcs	.+2      	; 0x187e <GPIO_readPin+0x1c>
    187c:	84 c0       	rjmp	.+264    	; 0x1986 <GPIO_readPin+0x124>
    187e:	8a 81       	ldd	r24, Y+2	; 0x02
    1880:	84 30       	cpi	r24, 0x04	; 4
    1882:	08 f0       	brcs	.+2      	; 0x1886 <GPIO_readPin+0x24>
    1884:	80 c0       	rjmp	.+256    	; 0x1986 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	28 2f       	mov	r18, r24
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	3d 83       	std	Y+5, r19	; 0x05
    188e:	2c 83       	std	Y+4, r18	; 0x04
    1890:	4c 81       	ldd	r20, Y+4	; 0x04
    1892:	5d 81       	ldd	r21, Y+5	; 0x05
    1894:	41 30       	cpi	r20, 0x01	; 1
    1896:	51 05       	cpc	r21, r1
    1898:	79 f1       	breq	.+94     	; 0x18f8 <GPIO_readPin+0x96>
    189a:	8c 81       	ldd	r24, Y+4	; 0x04
    189c:	9d 81       	ldd	r25, Y+5	; 0x05
    189e:	82 30       	cpi	r24, 0x02	; 2
    18a0:	91 05       	cpc	r25, r1
    18a2:	34 f4       	brge	.+12     	; 0x18b0 <GPIO_readPin+0x4e>
    18a4:	2c 81       	ldd	r18, Y+4	; 0x04
    18a6:	3d 81       	ldd	r19, Y+5	; 0x05
    18a8:	21 15       	cp	r18, r1
    18aa:	31 05       	cpc	r19, r1
    18ac:	69 f0       	breq	.+26     	; 0x18c8 <GPIO_readPin+0x66>
    18ae:	6b c0       	rjmp	.+214    	; 0x1986 <GPIO_readPin+0x124>
    18b0:	4c 81       	ldd	r20, Y+4	; 0x04
    18b2:	5d 81       	ldd	r21, Y+5	; 0x05
    18b4:	42 30       	cpi	r20, 0x02	; 2
    18b6:	51 05       	cpc	r21, r1
    18b8:	b9 f1       	breq	.+110    	; 0x1928 <GPIO_readPin+0xc6>
    18ba:	8c 81       	ldd	r24, Y+4	; 0x04
    18bc:	9d 81       	ldd	r25, Y+5	; 0x05
    18be:	83 30       	cpi	r24, 0x03	; 3
    18c0:	91 05       	cpc	r25, r1
    18c2:	09 f4       	brne	.+2      	; 0x18c6 <GPIO_readPin+0x64>
    18c4:	49 c0       	rjmp	.+146    	; 0x1958 <GPIO_readPin+0xf6>
    18c6:	5f c0       	rjmp	.+190    	; 0x1986 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    18c8:	e9 e3       	ldi	r30, 0x39	; 57
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	28 2f       	mov	r18, r24
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	8b 81       	ldd	r24, Y+3	; 0x03
    18d4:	88 2f       	mov	r24, r24
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	a9 01       	movw	r20, r18
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <GPIO_readPin+0x7e>
    18dc:	55 95       	asr	r21
    18de:	47 95       	ror	r20
    18e0:	8a 95       	dec	r24
    18e2:	e2 f7       	brpl	.-8      	; 0x18dc <GPIO_readPin+0x7a>
    18e4:	ca 01       	movw	r24, r20
    18e6:	81 70       	andi	r24, 0x01	; 1
    18e8:	90 70       	andi	r25, 0x00	; 0
    18ea:	88 23       	and	r24, r24
    18ec:	19 f0       	breq	.+6      	; 0x18f4 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	89 83       	std	Y+1, r24	; 0x01
    18f2:	49 c0       	rjmp	.+146    	; 0x1986 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18f4:	19 82       	std	Y+1, r1	; 0x01
    18f6:	47 c0       	rjmp	.+142    	; 0x1986 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    18f8:	e6 e3       	ldi	r30, 0x36	; 54
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	8b 81       	ldd	r24, Y+3	; 0x03
    1904:	88 2f       	mov	r24, r24
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	a9 01       	movw	r20, r18
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <GPIO_readPin+0xae>
    190c:	55 95       	asr	r21
    190e:	47 95       	ror	r20
    1910:	8a 95       	dec	r24
    1912:	e2 f7       	brpl	.-8      	; 0x190c <GPIO_readPin+0xaa>
    1914:	ca 01       	movw	r24, r20
    1916:	81 70       	andi	r24, 0x01	; 1
    1918:	90 70       	andi	r25, 0x00	; 0
    191a:	88 23       	and	r24, r24
    191c:	19 f0       	breq	.+6      	; 0x1924 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	89 83       	std	Y+1, r24	; 0x01
    1922:	31 c0       	rjmp	.+98     	; 0x1986 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1924:	19 82       	std	Y+1, r1	; 0x01
    1926:	2f c0       	rjmp	.+94     	; 0x1986 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1928:	e3 e3       	ldi	r30, 0x33	; 51
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	28 2f       	mov	r18, r24
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	8b 81       	ldd	r24, Y+3	; 0x03
    1934:	88 2f       	mov	r24, r24
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	a9 01       	movw	r20, r18
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <GPIO_readPin+0xde>
    193c:	55 95       	asr	r21
    193e:	47 95       	ror	r20
    1940:	8a 95       	dec	r24
    1942:	e2 f7       	brpl	.-8      	; 0x193c <GPIO_readPin+0xda>
    1944:	ca 01       	movw	r24, r20
    1946:	81 70       	andi	r24, 0x01	; 1
    1948:	90 70       	andi	r25, 0x00	; 0
    194a:	88 23       	and	r24, r24
    194c:	19 f0       	breq	.+6      	; 0x1954 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	89 83       	std	Y+1, r24	; 0x01
    1952:	19 c0       	rjmp	.+50     	; 0x1986 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1954:	19 82       	std	Y+1, r1	; 0x01
    1956:	17 c0       	rjmp	.+46     	; 0x1986 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1958:	e0 e3       	ldi	r30, 0x30	; 48
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	28 2f       	mov	r18, r24
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	8b 81       	ldd	r24, Y+3	; 0x03
    1964:	88 2f       	mov	r24, r24
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	a9 01       	movw	r20, r18
    196a:	02 c0       	rjmp	.+4      	; 0x1970 <GPIO_readPin+0x10e>
    196c:	55 95       	asr	r21
    196e:	47 95       	ror	r20
    1970:	8a 95       	dec	r24
    1972:	e2 f7       	brpl	.-8      	; 0x196c <GPIO_readPin+0x10a>
    1974:	ca 01       	movw	r24, r20
    1976:	81 70       	andi	r24, 0x01	; 1
    1978:	90 70       	andi	r25, 0x00	; 0
    197a:	88 23       	and	r24, r24
    197c:	19 f0       	breq	.+6      	; 0x1984 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	89 83       	std	Y+1, r24	; 0x01
    1982:	01 c0       	rjmp	.+2      	; 0x1986 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1984:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1986:	89 81       	ldd	r24, Y+1	; 0x01
}
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	cf 91       	pop	r28
    1994:	df 91       	pop	r29
    1996:	08 95       	ret

00001998 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1998:	df 93       	push	r29
    199a:	cf 93       	push	r28
    199c:	00 d0       	rcall	.+0      	; 0x199e <GPIO_setupPortDirection+0x6>
    199e:	00 d0       	rcall	.+0      	; 0x19a0 <GPIO_setupPortDirection+0x8>
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
    19a4:	89 83       	std	Y+1, r24	; 0x01
    19a6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19a8:	89 81       	ldd	r24, Y+1	; 0x01
    19aa:	84 30       	cpi	r24, 0x04	; 4
    19ac:	90 f5       	brcc	.+100    	; 0x1a12 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    19ae:	89 81       	ldd	r24, Y+1	; 0x01
    19b0:	28 2f       	mov	r18, r24
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	3c 83       	std	Y+4, r19	; 0x04
    19b6:	2b 83       	std	Y+3, r18	; 0x03
    19b8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ba:	9c 81       	ldd	r25, Y+4	; 0x04
    19bc:	81 30       	cpi	r24, 0x01	; 1
    19be:	91 05       	cpc	r25, r1
    19c0:	d1 f0       	breq	.+52     	; 0x19f6 <GPIO_setupPortDirection+0x5e>
    19c2:	2b 81       	ldd	r18, Y+3	; 0x03
    19c4:	3c 81       	ldd	r19, Y+4	; 0x04
    19c6:	22 30       	cpi	r18, 0x02	; 2
    19c8:	31 05       	cpc	r19, r1
    19ca:	2c f4       	brge	.+10     	; 0x19d6 <GPIO_setupPortDirection+0x3e>
    19cc:	8b 81       	ldd	r24, Y+3	; 0x03
    19ce:	9c 81       	ldd	r25, Y+4	; 0x04
    19d0:	00 97       	sbiw	r24, 0x00	; 0
    19d2:	61 f0       	breq	.+24     	; 0x19ec <GPIO_setupPortDirection+0x54>
    19d4:	1e c0       	rjmp	.+60     	; 0x1a12 <GPIO_setupPortDirection+0x7a>
    19d6:	2b 81       	ldd	r18, Y+3	; 0x03
    19d8:	3c 81       	ldd	r19, Y+4	; 0x04
    19da:	22 30       	cpi	r18, 0x02	; 2
    19dc:	31 05       	cpc	r19, r1
    19de:	81 f0       	breq	.+32     	; 0x1a00 <GPIO_setupPortDirection+0x68>
    19e0:	8b 81       	ldd	r24, Y+3	; 0x03
    19e2:	9c 81       	ldd	r25, Y+4	; 0x04
    19e4:	83 30       	cpi	r24, 0x03	; 3
    19e6:	91 05       	cpc	r25, r1
    19e8:	81 f0       	breq	.+32     	; 0x1a0a <GPIO_setupPortDirection+0x72>
    19ea:	13 c0       	rjmp	.+38     	; 0x1a12 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    19ec:	ea e3       	ldi	r30, 0x3A	; 58
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	8a 81       	ldd	r24, Y+2	; 0x02
    19f2:	80 83       	st	Z, r24
    19f4:	0e c0       	rjmp	.+28     	; 0x1a12 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    19f6:	e7 e3       	ldi	r30, 0x37	; 55
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	8a 81       	ldd	r24, Y+2	; 0x02
    19fc:	80 83       	st	Z, r24
    19fe:	09 c0       	rjmp	.+18     	; 0x1a12 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1a00:	e4 e3       	ldi	r30, 0x34	; 52
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	8a 81       	ldd	r24, Y+2	; 0x02
    1a06:	80 83       	st	Z, r24
    1a08:	04 c0       	rjmp	.+8      	; 0x1a12 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1a0a:	e1 e3       	ldi	r30, 0x31	; 49
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a10:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a12:	0f 90       	pop	r0
    1a14:	0f 90       	pop	r0
    1a16:	0f 90       	pop	r0
    1a18:	0f 90       	pop	r0
    1a1a:	cf 91       	pop	r28
    1a1c:	df 91       	pop	r29
    1a1e:	08 95       	ret

00001a20 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1a20:	df 93       	push	r29
    1a22:	cf 93       	push	r28
    1a24:	00 d0       	rcall	.+0      	; 0x1a26 <GPIO_writePort+0x6>
    1a26:	00 d0       	rcall	.+0      	; 0x1a28 <GPIO_writePort+0x8>
    1a28:	cd b7       	in	r28, 0x3d	; 61
    1a2a:	de b7       	in	r29, 0x3e	; 62
    1a2c:	89 83       	std	Y+1, r24	; 0x01
    1a2e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a30:	89 81       	ldd	r24, Y+1	; 0x01
    1a32:	84 30       	cpi	r24, 0x04	; 4
    1a34:	90 f5       	brcc	.+100    	; 0x1a9a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
    1a38:	28 2f       	mov	r18, r24
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	3c 83       	std	Y+4, r19	; 0x04
    1a3e:	2b 83       	std	Y+3, r18	; 0x03
    1a40:	8b 81       	ldd	r24, Y+3	; 0x03
    1a42:	9c 81       	ldd	r25, Y+4	; 0x04
    1a44:	81 30       	cpi	r24, 0x01	; 1
    1a46:	91 05       	cpc	r25, r1
    1a48:	d1 f0       	breq	.+52     	; 0x1a7e <GPIO_writePort+0x5e>
    1a4a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a4c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a4e:	22 30       	cpi	r18, 0x02	; 2
    1a50:	31 05       	cpc	r19, r1
    1a52:	2c f4       	brge	.+10     	; 0x1a5e <GPIO_writePort+0x3e>
    1a54:	8b 81       	ldd	r24, Y+3	; 0x03
    1a56:	9c 81       	ldd	r25, Y+4	; 0x04
    1a58:	00 97       	sbiw	r24, 0x00	; 0
    1a5a:	61 f0       	breq	.+24     	; 0x1a74 <GPIO_writePort+0x54>
    1a5c:	1e c0       	rjmp	.+60     	; 0x1a9a <GPIO_writePort+0x7a>
    1a5e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a60:	3c 81       	ldd	r19, Y+4	; 0x04
    1a62:	22 30       	cpi	r18, 0x02	; 2
    1a64:	31 05       	cpc	r19, r1
    1a66:	81 f0       	breq	.+32     	; 0x1a88 <GPIO_writePort+0x68>
    1a68:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6c:	83 30       	cpi	r24, 0x03	; 3
    1a6e:	91 05       	cpc	r25, r1
    1a70:	81 f0       	breq	.+32     	; 0x1a92 <GPIO_writePort+0x72>
    1a72:	13 c0       	rjmp	.+38     	; 0x1a9a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1a74:	eb e3       	ldi	r30, 0x3B	; 59
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7a:	80 83       	st	Z, r24
    1a7c:	0e c0       	rjmp	.+28     	; 0x1a9a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1a7e:	e8 e3       	ldi	r30, 0x38	; 56
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	8a 81       	ldd	r24, Y+2	; 0x02
    1a84:	80 83       	st	Z, r24
    1a86:	09 c0       	rjmp	.+18     	; 0x1a9a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1a88:	e5 e3       	ldi	r30, 0x35	; 53
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8e:	80 83       	st	Z, r24
    1a90:	04 c0       	rjmp	.+8      	; 0x1a9a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1a92:	e2 e3       	ldi	r30, 0x32	; 50
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	8a 81       	ldd	r24, Y+2	; 0x02
    1a98:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	cf 91       	pop	r28
    1aa4:	df 91       	pop	r29
    1aa6:	08 95       	ret

00001aa8 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1aa8:	df 93       	push	r29
    1aaa:	cf 93       	push	r28
    1aac:	00 d0       	rcall	.+0      	; 0x1aae <GPIO_readPort+0x6>
    1aae:	00 d0       	rcall	.+0      	; 0x1ab0 <GPIO_readPort+0x8>
    1ab0:	cd b7       	in	r28, 0x3d	; 61
    1ab2:	de b7       	in	r29, 0x3e	; 62
    1ab4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1ab6:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aba:	84 30       	cpi	r24, 0x04	; 4
    1abc:	90 f5       	brcc	.+100    	; 0x1b22 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1abe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac0:	28 2f       	mov	r18, r24
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	3c 83       	std	Y+4, r19	; 0x04
    1ac6:	2b 83       	std	Y+3, r18	; 0x03
    1ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aca:	9c 81       	ldd	r25, Y+4	; 0x04
    1acc:	81 30       	cpi	r24, 0x01	; 1
    1ace:	91 05       	cpc	r25, r1
    1ad0:	d1 f0       	breq	.+52     	; 0x1b06 <GPIO_readPort+0x5e>
    1ad2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ad4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ad6:	22 30       	cpi	r18, 0x02	; 2
    1ad8:	31 05       	cpc	r19, r1
    1ada:	2c f4       	brge	.+10     	; 0x1ae6 <GPIO_readPort+0x3e>
    1adc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ade:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae0:	00 97       	sbiw	r24, 0x00	; 0
    1ae2:	61 f0       	breq	.+24     	; 0x1afc <GPIO_readPort+0x54>
    1ae4:	1e c0       	rjmp	.+60     	; 0x1b22 <GPIO_readPort+0x7a>
    1ae6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ae8:	3c 81       	ldd	r19, Y+4	; 0x04
    1aea:	22 30       	cpi	r18, 0x02	; 2
    1aec:	31 05       	cpc	r19, r1
    1aee:	81 f0       	breq	.+32     	; 0x1b10 <GPIO_readPort+0x68>
    1af0:	8b 81       	ldd	r24, Y+3	; 0x03
    1af2:	9c 81       	ldd	r25, Y+4	; 0x04
    1af4:	83 30       	cpi	r24, 0x03	; 3
    1af6:	91 05       	cpc	r25, r1
    1af8:	81 f0       	breq	.+32     	; 0x1b1a <GPIO_readPort+0x72>
    1afa:	13 c0       	rjmp	.+38     	; 0x1b22 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1afc:	e9 e3       	ldi	r30, 0x39	; 57
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	89 83       	std	Y+1, r24	; 0x01
    1b04:	0e c0       	rjmp	.+28     	; 0x1b22 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1b06:	e6 e3       	ldi	r30, 0x36	; 54
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	89 83       	std	Y+1, r24	; 0x01
    1b0e:	09 c0       	rjmp	.+18     	; 0x1b22 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1b10:	e3 e3       	ldi	r30, 0x33	; 51
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	80 81       	ld	r24, Z
    1b16:	89 83       	std	Y+1, r24	; 0x01
    1b18:	04 c0       	rjmp	.+8      	; 0x1b22 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1b1a:	e0 e3       	ldi	r30, 0x30	; 48
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1b22:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b24:	0f 90       	pop	r0
    1b26:	0f 90       	pop	r0
    1b28:	0f 90       	pop	r0
    1b2a:	0f 90       	pop	r0
    1b2c:	cf 91       	pop	r28
    1b2e:	df 91       	pop	r29
    1b30:	08 95       	ret

00001b32 <__vector_9>:

/********************************************************************************
 	 	 	 	 	 	 	 	 Functions
 *******************************************************************************/

ISR(TIMER0_OVF_vect){
    1b32:	1f 92       	push	r1
    1b34:	0f 92       	push	r0
    1b36:	0f b6       	in	r0, 0x3f	; 63
    1b38:	0f 92       	push	r0
    1b3a:	11 24       	eor	r1, r1
    1b3c:	2f 93       	push	r18
    1b3e:	3f 93       	push	r19
    1b40:	4f 93       	push	r20
    1b42:	5f 93       	push	r21
    1b44:	6f 93       	push	r22
    1b46:	7f 93       	push	r23
    1b48:	8f 93       	push	r24
    1b4a:	9f 93       	push	r25
    1b4c:	af 93       	push	r26
    1b4e:	bf 93       	push	r27
    1b50:	ef 93       	push	r30
    1b52:	ff 93       	push	r31
    1b54:	df 93       	push	r29
    1b56:	cf 93       	push	r28
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
	if(g_T0_CallBackPtr != NULL_PTR)
    1b5c:	80 91 7d 00 	lds	r24, 0x007D
    1b60:	90 91 7e 00 	lds	r25, 0x007E
    1b64:	00 97       	sbiw	r24, 0x00	; 0
    1b66:	29 f0       	breq	.+10     	; 0x1b72 <__vector_9+0x40>
	{
		(*g_T0_CallBackPtr)();
    1b68:	e0 91 7d 00 	lds	r30, 0x007D
    1b6c:	f0 91 7e 00 	lds	r31, 0x007E
    1b70:	09 95       	icall
	}
}
    1b72:	cf 91       	pop	r28
    1b74:	df 91       	pop	r29
    1b76:	ff 91       	pop	r31
    1b78:	ef 91       	pop	r30
    1b7a:	bf 91       	pop	r27
    1b7c:	af 91       	pop	r26
    1b7e:	9f 91       	pop	r25
    1b80:	8f 91       	pop	r24
    1b82:	7f 91       	pop	r23
    1b84:	6f 91       	pop	r22
    1b86:	5f 91       	pop	r21
    1b88:	4f 91       	pop	r20
    1b8a:	3f 91       	pop	r19
    1b8c:	2f 91       	pop	r18
    1b8e:	0f 90       	pop	r0
    1b90:	0f be       	out	0x3f, r0	; 63
    1b92:	0f 90       	pop	r0
    1b94:	1f 90       	pop	r1
    1b96:	18 95       	reti

00001b98 <__vector_19>:
ISR(TIMER0_COMP_vect){
    1b98:	1f 92       	push	r1
    1b9a:	0f 92       	push	r0
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	0f 92       	push	r0
    1ba0:	11 24       	eor	r1, r1
    1ba2:	2f 93       	push	r18
    1ba4:	3f 93       	push	r19
    1ba6:	4f 93       	push	r20
    1ba8:	5f 93       	push	r21
    1baa:	6f 93       	push	r22
    1bac:	7f 93       	push	r23
    1bae:	8f 93       	push	r24
    1bb0:	9f 93       	push	r25
    1bb2:	af 93       	push	r26
    1bb4:	bf 93       	push	r27
    1bb6:	ef 93       	push	r30
    1bb8:	ff 93       	push	r31
    1bba:	df 93       	push	r29
    1bbc:	cf 93       	push	r28
    1bbe:	cd b7       	in	r28, 0x3d	; 61
    1bc0:	de b7       	in	r29, 0x3e	; 62
	if(g_T0_CallBackPtr != NULL_PTR)
    1bc2:	80 91 7d 00 	lds	r24, 0x007D
    1bc6:	90 91 7e 00 	lds	r25, 0x007E
    1bca:	00 97       	sbiw	r24, 0x00	; 0
    1bcc:	29 f0       	breq	.+10     	; 0x1bd8 <__vector_19+0x40>
	{
		(*g_T0_CallBackPtr)();
    1bce:	e0 91 7d 00 	lds	r30, 0x007D
    1bd2:	f0 91 7e 00 	lds	r31, 0x007E
    1bd6:	09 95       	icall
	}
}
    1bd8:	cf 91       	pop	r28
    1bda:	df 91       	pop	r29
    1bdc:	ff 91       	pop	r31
    1bde:	ef 91       	pop	r30
    1be0:	bf 91       	pop	r27
    1be2:	af 91       	pop	r26
    1be4:	9f 91       	pop	r25
    1be6:	8f 91       	pop	r24
    1be8:	7f 91       	pop	r23
    1bea:	6f 91       	pop	r22
    1bec:	5f 91       	pop	r21
    1bee:	4f 91       	pop	r20
    1bf0:	3f 91       	pop	r19
    1bf2:	2f 91       	pop	r18
    1bf4:	0f 90       	pop	r0
    1bf6:	0f be       	out	0x3f, r0	; 63
    1bf8:	0f 90       	pop	r0
    1bfa:	1f 90       	pop	r1
    1bfc:	18 95       	reti

00001bfe <Timer0_init>:
 * 		3)Start the timer.
 * 	Arguments :
 * 		---> Structure contain
 * 				{clock_frequancy,Mode(CM,NM),intial-counter,compare-value}
 */
void Timer0_init(const TIMER_ConfigType *config_Ptr){
    1bfe:	df 93       	push	r29
    1c00:	cf 93       	push	r28
    1c02:	00 d0       	rcall	.+0      	; 0x1c04 <Timer0_init+0x6>
    1c04:	cd b7       	in	r28, 0x3d	; 61
    1c06:	de b7       	in	r29, 0x3e	; 62
    1c08:	9a 83       	std	Y+2, r25	; 0x02
    1c0a:	89 83       	std	Y+1, r24	; 0x01
	// Set Timer initial value to 0
	TCNT0 =  (uint8 *)(config_Ptr -> Initial_Count);
    1c0c:	a2 e5       	ldi	r26, 0x52	; 82
    1c0e:	b0 e0       	ldi	r27, 0x00	; 0
    1c10:	e9 81       	ldd	r30, Y+1	; 0x01
    1c12:	fa 81       	ldd	r31, Y+2	; 0x02
    1c14:	82 81       	ldd	r24, Z+2	; 0x02
    1c16:	8c 93       	st	X, r24

	//Setting timer0 clock frequency
	TCCR0 = (TCCR0 & 0xF8) | ((config_Ptr -> clock_frequancy) & 0x07);
    1c18:	a3 e5       	ldi	r26, 0x53	; 83
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	e3 e5       	ldi	r30, 0x53	; 83
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	98 2f       	mov	r25, r24
    1c24:	98 7f       	andi	r25, 0xF8	; 248
    1c26:	e9 81       	ldd	r30, Y+1	; 0x01
    1c28:	fa 81       	ldd	r31, Y+2	; 0x02
    1c2a:	80 81       	ld	r24, Z
    1c2c:	87 70       	andi	r24, 0x07	; 7
    1c2e:	89 2b       	or	r24, r25
    1c30:	8c 93       	st	X, r24

	//Overflow Mode
	if((config_Ptr -> Mode) == Overflow_Mode){
    1c32:	e9 81       	ldd	r30, Y+1	; 0x01
    1c34:	fa 81       	ldd	r31, Y+2	; 0x02
    1c36:	81 81       	ldd	r24, Z+1	; 0x01
    1c38:	88 23       	and	r24, r24
    1c3a:	79 f4       	brne	.+30     	; 0x1c5a <Timer0_init+0x5c>
		TCCR0 |= (1<<FOC0);
    1c3c:	a3 e5       	ldi	r26, 0x53	; 83
    1c3e:	b0 e0       	ldi	r27, 0x00	; 0
    1c40:	e3 e5       	ldi	r30, 0x53	; 83
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	80 68       	ori	r24, 0x80	; 128
    1c48:	8c 93       	st	X, r24
		TIMSK |= (1<<TOIE0);
    1c4a:	a9 e5       	ldi	r26, 0x59	; 89
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	e9 e5       	ldi	r30, 0x59	; 89
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	81 60       	ori	r24, 0x01	; 1
    1c56:	8c 93       	st	X, r24
    1c58:	17 c0       	rjmp	.+46     	; 0x1c88 <Timer0_init+0x8a>
	}

	//For Compare Mode
	else if((config_Ptr -> Mode) == Compare_Mode){
    1c5a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c5c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c5e:	81 81       	ldd	r24, Z+1	; 0x01
    1c60:	81 30       	cpi	r24, 0x01	; 1
    1c62:	91 f4       	brne	.+36     	; 0x1c88 <Timer0_init+0x8a>
		OCR0 = (config_Ptr -> CM_Compare_Value);
    1c64:	ac e5       	ldi	r26, 0x5C	; 92
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	e9 81       	ldd	r30, Y+1	; 0x01
    1c6a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c6c:	83 81       	ldd	r24, Z+3	; 0x03
    1c6e:	94 81       	ldd	r25, Z+4	; 0x04
    1c70:	8c 93       	st	X, r24
		TCCR0 = (1<<FOC0) | (1<<WGM01);
    1c72:	e3 e5       	ldi	r30, 0x53	; 83
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	88 e8       	ldi	r24, 0x88	; 136
    1c78:	80 83       	st	Z, r24
		TIMSK |= (1<<OCIE0);
    1c7a:	a9 e5       	ldi	r26, 0x59	; 89
    1c7c:	b0 e0       	ldi	r27, 0x00	; 0
    1c7e:	e9 e5       	ldi	r30, 0x59	; 89
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	82 60       	ori	r24, 0x02	; 2
    1c86:	8c 93       	st	X, r24
	}
}
    1c88:	0f 90       	pop	r0
    1c8a:	0f 90       	pop	r0
    1c8c:	cf 91       	pop	r28
    1c8e:	df 91       	pop	r29
    1c90:	08 95       	ret

00001c92 <Timer_DeInit>:

void Timer_DeInit (void){
    1c92:	df 93       	push	r29
    1c94:	cf 93       	push	r28
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
	TCNT0  = 0;
    1c9a:	e2 e5       	ldi	r30, 0x52	; 82
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	10 82       	st	Z, r1
	TCCR0  = 0;
    1ca0:	e3 e5       	ldi	r30, 0x53	; 83
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	10 82       	st	Z, r1
	TIMSK &= 0xFC;
    1ca6:	a9 e5       	ldi	r26, 0x59	; 89
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	e9 e5       	ldi	r30, 0x59	; 89
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	8c 7f       	andi	r24, 0xFC	; 252
    1cb2:	8c 93       	st	X, r24
}
    1cb4:	cf 91       	pop	r28
    1cb6:	df 91       	pop	r29
    1cb8:	08 95       	ret

00001cba <Timer0_SetCallBack>:

void Timer0_SetCallBack(void(*T0_ptr)(void)){
    1cba:	df 93       	push	r29
    1cbc:	cf 93       	push	r28
    1cbe:	00 d0       	rcall	.+0      	; 0x1cc0 <Timer0_SetCallBack+0x6>
    1cc0:	cd b7       	in	r28, 0x3d	; 61
    1cc2:	de b7       	in	r29, 0x3e	; 62
    1cc4:	9a 83       	std	Y+2, r25	; 0x02
    1cc6:	89 83       	std	Y+1, r24	; 0x01
	g_T0_CallBackPtr = T0_ptr;
    1cc8:	89 81       	ldd	r24, Y+1	; 0x01
    1cca:	9a 81       	ldd	r25, Y+2	; 0x02
    1ccc:	90 93 7e 00 	sts	0x007E, r25
    1cd0:	80 93 7d 00 	sts	0x007D, r24
}
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	cf 91       	pop	r28
    1cda:	df 91       	pop	r29
    1cdc:	08 95       	ret

00001cde <TWI_init>:

#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType* Config_Ptr)
{
    1cde:	df 93       	push	r29
    1ce0:	cf 93       	push	r28
    1ce2:	00 d0       	rcall	.+0      	; 0x1ce4 <TWI_init+0x6>
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
    1ce8:	9a 83       	std	Y+2, r25	; 0x02
    1cea:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = Config_Ptr->TWBR_value;
    1cec:	a0 e2       	ldi	r26, 0x20	; 32
    1cee:	b0 e0       	ldi	r27, 0x00	; 0
    1cf0:	e9 81       	ldd	r30, Y+1	; 0x01
    1cf2:	fa 81       	ldd	r31, Y+2	; 0x02
    1cf4:	82 81       	ldd	r24, Z+2	; 0x02
    1cf6:	8c 93       	st	X, r24
	TWSR = Config_Ptr->Prescalar;
    1cf8:	a1 e2       	ldi	r26, 0x21	; 33
    1cfa:	b0 e0       	ldi	r27, 0x00	; 0
    1cfc:	e9 81       	ldd	r30, Y+1	; 0x01
    1cfe:	fa 81       	ldd	r31, Y+2	; 0x02
    1d00:	80 81       	ld	r24, Z
    1d02:	8c 93       	st	X, r24
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = ((Config_Ptr->My_Address)<<1); // my address = 0x01 :)
    1d04:	a2 e2       	ldi	r26, 0x22	; 34
    1d06:	b0 e0       	ldi	r27, 0x00	; 0
    1d08:	e9 81       	ldd	r30, Y+1	; 0x01
    1d0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d0c:	81 81       	ldd	r24, Z+1	; 0x01
    1d0e:	88 0f       	add	r24, r24
    1d10:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    1d12:	e6 e5       	ldi	r30, 0x56	; 86
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	84 e0       	ldi	r24, 0x04	; 4
    1d18:	80 83       	st	Z, r24
}
    1d1a:	0f 90       	pop	r0
    1d1c:	0f 90       	pop	r0
    1d1e:	cf 91       	pop	r28
    1d20:	df 91       	pop	r29
    1d22:	08 95       	ret

00001d24 <TWI_start>:

void TWI_start(void)
{
    1d24:	df 93       	push	r29
    1d26:	cf 93       	push	r28
    1d28:	cd b7       	in	r28, 0x3d	; 61
    1d2a:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1d2c:	e6 e5       	ldi	r30, 0x56	; 86
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	84 ea       	ldi	r24, 0xA4	; 164
    1d32:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1d34:	e6 e5       	ldi	r30, 0x56	; 86
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	88 23       	and	r24, r24
    1d3c:	dc f7       	brge	.-10     	; 0x1d34 <TWI_start+0x10>
}
    1d3e:	cf 91       	pop	r28
    1d40:	df 91       	pop	r29
    1d42:	08 95       	ret

00001d44 <TWI_stop>:

void TWI_stop(void)
{
    1d44:	df 93       	push	r29
    1d46:	cf 93       	push	r28
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1d4c:	e6 e5       	ldi	r30, 0x56	; 86
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	84 e9       	ldi	r24, 0x94	; 148
    1d52:	80 83       	st	Z, r24
}
    1d54:	cf 91       	pop	r28
    1d56:	df 91       	pop	r29
    1d58:	08 95       	ret

00001d5a <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1d5a:	df 93       	push	r29
    1d5c:	cf 93       	push	r28
    1d5e:	0f 92       	push	r0
    1d60:	cd b7       	in	r28, 0x3d	; 61
    1d62:	de b7       	in	r29, 0x3e	; 62
    1d64:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1d66:	e3 e2       	ldi	r30, 0x23	; 35
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	89 81       	ldd	r24, Y+1	; 0x01
    1d6c:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1d6e:	e6 e5       	ldi	r30, 0x56	; 86
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	84 e8       	ldi	r24, 0x84	; 132
    1d74:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1d76:	e6 e5       	ldi	r30, 0x56	; 86
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	88 23       	and	r24, r24
    1d7e:	dc f7       	brge	.-10     	; 0x1d76 <TWI_writeByte+0x1c>
}
    1d80:	0f 90       	pop	r0
    1d82:	cf 91       	pop	r28
    1d84:	df 91       	pop	r29
    1d86:	08 95       	ret

00001d88 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1d88:	df 93       	push	r29
    1d8a:	cf 93       	push	r28
    1d8c:	cd b7       	in	r28, 0x3d	; 61
    1d8e:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1d90:	e6 e5       	ldi	r30, 0x56	; 86
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	84 ec       	ldi	r24, 0xC4	; 196
    1d96:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1d98:	e6 e5       	ldi	r30, 0x56	; 86
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	80 81       	ld	r24, Z
    1d9e:	88 23       	and	r24, r24
    1da0:	dc f7       	brge	.-10     	; 0x1d98 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    1da2:	e3 e2       	ldi	r30, 0x23	; 35
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
}
    1da8:	cf 91       	pop	r28
    1daa:	df 91       	pop	r29
    1dac:	08 95       	ret

00001dae <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1dae:	df 93       	push	r29
    1db0:	cf 93       	push	r28
    1db2:	cd b7       	in	r28, 0x3d	; 61
    1db4:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1db6:	e6 e5       	ldi	r30, 0x56	; 86
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	84 e8       	ldi	r24, 0x84	; 132
    1dbc:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1dbe:	e6 e5       	ldi	r30, 0x56	; 86
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	88 23       	and	r24, r24
    1dc6:	dc f7       	brge	.-10     	; 0x1dbe <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1dc8:	e3 e2       	ldi	r30, 0x23	; 35
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
}
    1dce:	cf 91       	pop	r28
    1dd0:	df 91       	pop	r29
    1dd2:	08 95       	ret

00001dd4 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1dd4:	df 93       	push	r29
    1dd6:	cf 93       	push	r28
    1dd8:	0f 92       	push	r0
    1dda:	cd b7       	in	r28, 0x3d	; 61
    1ddc:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1dde:	e1 e2       	ldi	r30, 0x21	; 33
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	88 7f       	andi	r24, 0xF8	; 248
    1de6:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1de8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dea:	0f 90       	pop	r0
    1dec:	cf 91       	pop	r28
    1dee:	df 91       	pop	r29
    1df0:	08 95       	ret

00001df2 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType* Config_Ptr)
{
    1df2:	df 93       	push	r29
    1df4:	cf 93       	push	r28
    1df6:	00 d0       	rcall	.+0      	; 0x1df8 <UART_init+0x6>
    1df8:	00 d0       	rcall	.+0      	; 0x1dfa <UART_init+0x8>
    1dfa:	cd b7       	in	r28, 0x3d	; 61
    1dfc:	de b7       	in	r29, 0x3e	; 62
    1dfe:	9c 83       	std	Y+4, r25	; 0x04
    1e00:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1e02:	1a 82       	std	Y+2, r1	; 0x02
    1e04:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1e06:	eb e2       	ldi	r30, 0x2B	; 43
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	82 e0       	ldi	r24, 0x02	; 2
    1e0c:	80 83       	st	Z, r24

	if(Config_Ptr->DataBits==_9_BITS){
    1e0e:	eb 81       	ldd	r30, Y+3	; 0x03
    1e10:	fc 81       	ldd	r31, Y+4	; 0x04
    1e12:	84 81       	ldd	r24, Z+4	; 0x04
    1e14:	84 30       	cpi	r24, 0x04	; 4
    1e16:	e9 f4       	brne	.+58     	; 0x1e52 <UART_init+0x60>
		/*For 9-bit data mode*/
		SET_BIT(UCSRB,UCSZ2);
    1e18:	aa e2       	ldi	r26, 0x2A	; 42
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	ea e2       	ldi	r30, 0x2A	; 42
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	84 60       	ori	r24, 0x04	; 4
    1e24:	8c 93       	st	X, r24
		/* URSEL   = 1 The URSEL must be one when writing the UCSRC*/
		SET_BIT(UCSRC,URSEL);
    1e26:	a0 e4       	ldi	r26, 0x40	; 64
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	e0 e4       	ldi	r30, 0x40	; 64
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	80 68       	ori	r24, 0x80	; 128
    1e32:	8c 93       	st	X, r24
		/* UCSZ1:0 = 11 For 9-bit data mode*/
		SET_BIT(UCSRC,UCSZ0);
    1e34:	a0 e4       	ldi	r26, 0x40	; 64
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	e0 e4       	ldi	r30, 0x40	; 64
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	82 60       	ori	r24, 0x02	; 2
    1e40:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ1);
    1e42:	a0 e4       	ldi	r26, 0x40	; 64
    1e44:	b0 e0       	ldi	r27, 0x00	; 0
    1e46:	e0 e4       	ldi	r30, 0x40	; 64
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	80 81       	ld	r24, Z
    1e4c:	84 60       	ori	r24, 0x04	; 4
    1e4e:	8c 93       	st	X, r24
    1e50:	17 c0       	rjmp	.+46     	; 0x1e80 <UART_init+0x8e>
	}
	else{
		/* URSEL   = 1 The URSEL must be one when writing the UCSRC*/
		SET_BIT(UCSRC,URSEL);
    1e52:	a0 e4       	ldi	r26, 0x40	; 64
    1e54:	b0 e0       	ldi	r27, 0x00	; 0
    1e56:	e0 e4       	ldi	r30, 0x40	; 64
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 81       	ld	r24, Z
    1e5c:	80 68       	ori	r24, 0x80	; 128
    1e5e:	8c 93       	st	X, r24
		/* UCSZ1:0 = The required data mode*/
		UCSRC = (UCSRC & 0XF9) | ((Config_Ptr->DataBits)<<1);
    1e60:	a0 e4       	ldi	r26, 0x40	; 64
    1e62:	b0 e0       	ldi	r27, 0x00	; 0
    1e64:	e0 e4       	ldi	r30, 0x40	; 64
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	80 81       	ld	r24, Z
    1e6a:	28 2f       	mov	r18, r24
    1e6c:	29 7f       	andi	r18, 0xF9	; 249
    1e6e:	eb 81       	ldd	r30, Y+3	; 0x03
    1e70:	fc 81       	ldd	r31, Y+4	; 0x04
    1e72:	84 81       	ldd	r24, Z+4	; 0x04
    1e74:	88 2f       	mov	r24, r24
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	88 0f       	add	r24, r24
    1e7a:	99 1f       	adc	r25, r25
    1e7c:	82 2b       	or	r24, r18
    1e7e:	8c 93       	st	X, r24

	}
	/* UPM1:0  = The required parity mode */
	UCSRC = (UCSRC & 0XCF) | ((Config_Ptr->mode)<<4);
    1e80:	a0 e4       	ldi	r26, 0x40	; 64
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	e0 e4       	ldi	r30, 0x40	; 64
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	28 2f       	mov	r18, r24
    1e8c:	2f 7c       	andi	r18, 0xCF	; 207
    1e8e:	eb 81       	ldd	r30, Y+3	; 0x03
    1e90:	fc 81       	ldd	r31, Y+4	; 0x04
    1e92:	85 81       	ldd	r24, Z+5	; 0x05
    1e94:	88 2f       	mov	r24, r24
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	82 95       	swap	r24
    1e9a:	92 95       	swap	r25
    1e9c:	90 7f       	andi	r25, 0xF0	; 240
    1e9e:	98 27       	eor	r25, r24
    1ea0:	80 7f       	andi	r24, 0xF0	; 240
    1ea2:	98 27       	eor	r25, r24
    1ea4:	82 2b       	or	r24, r18
    1ea6:	8c 93       	st	X, r24
	/* USBS = The required NO.of stop bits*/
	UCSRC = (UCSRC & 0XF7) | ((Config_Ptr->StopBits)<<3);
    1ea8:	a0 e4       	ldi	r26, 0x40	; 64
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	e0 e4       	ldi	r30, 0x40	; 64
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	28 2f       	mov	r18, r24
    1eb4:	27 7f       	andi	r18, 0xF7	; 247
    1eb6:	eb 81       	ldd	r30, Y+3	; 0x03
    1eb8:	fc 81       	ldd	r31, Y+4	; 0x04
    1eba:	86 81       	ldd	r24, Z+6	; 0x06
    1ebc:	88 2f       	mov	r24, r24
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	88 0f       	add	r24, r24
    1ec2:	99 1f       	adc	r25, r25
    1ec4:	88 0f       	add	r24, r24
    1ec6:	99 1f       	adc	r25, r25
    1ec8:	88 0f       	add	r24, r24
    1eca:	99 1f       	adc	r25, r25
    1ecc:	82 2b       	or	r24, r18
    1ece:	8c 93       	st	X, r24

	/* RXEN  = 1 Receiver Enable*/
	SET_BIT(UCSRB,RXEN);
    1ed0:	aa e2       	ldi	r26, 0x2A	; 42
    1ed2:	b0 e0       	ldi	r27, 0x00	; 0
    1ed4:	ea e2       	ldi	r30, 0x2A	; 42
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	80 81       	ld	r24, Z
    1eda:	80 61       	ori	r24, 0x10	; 16
    1edc:	8c 93       	st	X, r24
	/* RXEN  = 1 Transmitter Enable*/
	SET_BIT(UCSRB,TXEN);
    1ede:	aa e2       	ldi	r26, 0x2A	; 42
    1ee0:	b0 e0       	ldi	r27, 0x00	; 0
    1ee2:	ea e2       	ldi	r30, 0x2A	; 42
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	88 60       	ori	r24, 0x08	; 8
    1eea:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value= (uint16)((8000000/((uint32) 8 * Config_Ptr->BaudRate))-1);
    1eec:	eb 81       	ldd	r30, Y+3	; 0x03
    1eee:	fc 81       	ldd	r31, Y+4	; 0x04
    1ef0:	80 81       	ld	r24, Z
    1ef2:	91 81       	ldd	r25, Z+1	; 0x01
    1ef4:	a2 81       	ldd	r26, Z+2	; 0x02
    1ef6:	b3 81       	ldd	r27, Z+3	; 0x03
    1ef8:	88 0f       	add	r24, r24
    1efa:	99 1f       	adc	r25, r25
    1efc:	aa 1f       	adc	r26, r26
    1efe:	bb 1f       	adc	r27, r27
    1f00:	88 0f       	add	r24, r24
    1f02:	99 1f       	adc	r25, r25
    1f04:	aa 1f       	adc	r26, r26
    1f06:	bb 1f       	adc	r27, r27
    1f08:	88 0f       	add	r24, r24
    1f0a:	99 1f       	adc	r25, r25
    1f0c:	aa 1f       	adc	r26, r26
    1f0e:	bb 1f       	adc	r27, r27
    1f10:	9c 01       	movw	r18, r24
    1f12:	ad 01       	movw	r20, r26
    1f14:	80 e0       	ldi	r24, 0x00	; 0
    1f16:	92 e1       	ldi	r25, 0x12	; 18
    1f18:	aa e7       	ldi	r26, 0x7A	; 122
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0
    1f1c:	bc 01       	movw	r22, r24
    1f1e:	cd 01       	movw	r24, r26
    1f20:	0e 94 3b 10 	call	0x2076	; 0x2076 <__udivmodsi4>
    1f24:	da 01       	movw	r26, r20
    1f26:	c9 01       	movw	r24, r18
    1f28:	01 97       	sbiw	r24, 0x01	; 1
    1f2a:	9a 83       	std	Y+2, r25	; 0x02
    1f2c:	89 83       	std	Y+1, r24	; 0x01


	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRL = ubrr_value;
    1f2e:	e9 e2       	ldi	r30, 0x29	; 41
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	89 81       	ldd	r24, Y+1	; 0x01
    1f34:	80 83       	st	Z, r24
	UBRRH = ubrr_value>>8;
    1f36:	e0 e4       	ldi	r30, 0x40	; 64
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	89 81       	ldd	r24, Y+1	; 0x01
    1f3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f3e:	89 2f       	mov	r24, r25
    1f40:	99 27       	eor	r25, r25
    1f42:	80 83       	st	Z, r24
}
    1f44:	0f 90       	pop	r0
    1f46:	0f 90       	pop	r0
    1f48:	0f 90       	pop	r0
    1f4a:	0f 90       	pop	r0
    1f4c:	cf 91       	pop	r28
    1f4e:	df 91       	pop	r29
    1f50:	08 95       	ret

00001f52 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1f52:	df 93       	push	r29
    1f54:	cf 93       	push	r28
    1f56:	0f 92       	push	r0
    1f58:	cd b7       	in	r28, 0x3d	; 61
    1f5a:	de b7       	in	r29, 0x3e	; 62
    1f5c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1f5e:	eb e2       	ldi	r30, 0x2B	; 43
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	80 81       	ld	r24, Z
    1f64:	88 2f       	mov	r24, r24
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	80 72       	andi	r24, 0x20	; 32
    1f6a:	90 70       	andi	r25, 0x00	; 0
    1f6c:	00 97       	sbiw	r24, 0x00	; 0
    1f6e:	b9 f3       	breq	.-18     	; 0x1f5e <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    1f70:	ec e2       	ldi	r30, 0x2C	; 44
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	89 81       	ldd	r24, Y+1	; 0x01
    1f76:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    1f78:	0f 90       	pop	r0
    1f7a:	cf 91       	pop	r28
    1f7c:	df 91       	pop	r29
    1f7e:	08 95       	ret

00001f80 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    1f80:	df 93       	push	r29
    1f82:	cf 93       	push	r28
    1f84:	cd b7       	in	r28, 0x3d	; 61
    1f86:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1f88:	eb e2       	ldi	r30, 0x2B	; 43
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	80 81       	ld	r24, Z
    1f8e:	88 23       	and	r24, r24
    1f90:	dc f7       	brge	.-10     	; 0x1f88 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    1f92:	ec e2       	ldi	r30, 0x2C	; 44
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	80 81       	ld	r24, Z
}
    1f98:	cf 91       	pop	r28
    1f9a:	df 91       	pop	r29
    1f9c:	08 95       	ret

00001f9e <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    1f9e:	df 93       	push	r29
    1fa0:	cf 93       	push	r28
    1fa2:	00 d0       	rcall	.+0      	; 0x1fa4 <UART_sendString+0x6>
    1fa4:	0f 92       	push	r0
    1fa6:	cd b7       	in	r28, 0x3d	; 61
    1fa8:	de b7       	in	r29, 0x3e	; 62
    1faa:	9b 83       	std	Y+3, r25	; 0x03
    1fac:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1fae:	19 82       	std	Y+1, r1	; 0x01
    1fb0:	0e c0       	rjmp	.+28     	; 0x1fce <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1fb2:	89 81       	ldd	r24, Y+1	; 0x01
    1fb4:	28 2f       	mov	r18, r24
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fba:	9b 81       	ldd	r25, Y+3	; 0x03
    1fbc:	fc 01       	movw	r30, r24
    1fbe:	e2 0f       	add	r30, r18
    1fc0:	f3 1f       	adc	r31, r19
    1fc2:	80 81       	ld	r24, Z
    1fc4:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <UART_sendByte>
		i++;
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	8f 5f       	subi	r24, 0xFF	; 255
    1fcc:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
    1fd0:	28 2f       	mov	r18, r24
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd8:	fc 01       	movw	r30, r24
    1fda:	e2 0f       	add	r30, r18
    1fdc:	f3 1f       	adc	r31, r19
    1fde:	80 81       	ld	r24, Z
    1fe0:	88 23       	and	r24, r24
    1fe2:	39 f7       	brne	.-50     	; 0x1fb2 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	 *******************************************************************/
}
    1fe4:	0f 90       	pop	r0
    1fe6:	0f 90       	pop	r0
    1fe8:	0f 90       	pop	r0
    1fea:	cf 91       	pop	r28
    1fec:	df 91       	pop	r29
    1fee:	08 95       	ret

00001ff0 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    1ff0:	0f 93       	push	r16
    1ff2:	1f 93       	push	r17
    1ff4:	df 93       	push	r29
    1ff6:	cf 93       	push	r28
    1ff8:	00 d0       	rcall	.+0      	; 0x1ffa <UART_receiveString+0xa>
    1ffa:	0f 92       	push	r0
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
    2000:	9b 83       	std	Y+3, r25	; 0x03
    2002:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2004:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2006:	89 81       	ldd	r24, Y+1	; 0x01
    2008:	28 2f       	mov	r18, r24
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	8a 81       	ldd	r24, Y+2	; 0x02
    200e:	9b 81       	ldd	r25, Y+3	; 0x03
    2010:	8c 01       	movw	r16, r24
    2012:	02 0f       	add	r16, r18
    2014:	13 1f       	adc	r17, r19
    2016:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <UART_recieveByte>
    201a:	f8 01       	movw	r30, r16
    201c:	80 83       	st	Z, r24
    201e:	0f c0       	rjmp	.+30     	; 0x203e <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2020:	89 81       	ldd	r24, Y+1	; 0x01
    2022:	8f 5f       	subi	r24, 0xFF	; 255
    2024:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2026:	89 81       	ldd	r24, Y+1	; 0x01
    2028:	28 2f       	mov	r18, r24
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	8a 81       	ldd	r24, Y+2	; 0x02
    202e:	9b 81       	ldd	r25, Y+3	; 0x03
    2030:	8c 01       	movw	r16, r24
    2032:	02 0f       	add	r16, r18
    2034:	13 1f       	adc	r17, r19
    2036:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <UART_recieveByte>
    203a:	f8 01       	movw	r30, r16
    203c:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    203e:	89 81       	ldd	r24, Y+1	; 0x01
    2040:	28 2f       	mov	r18, r24
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	8a 81       	ldd	r24, Y+2	; 0x02
    2046:	9b 81       	ldd	r25, Y+3	; 0x03
    2048:	fc 01       	movw	r30, r24
    204a:	e2 0f       	add	r30, r18
    204c:	f3 1f       	adc	r31, r19
    204e:	80 81       	ld	r24, Z
    2050:	83 32       	cpi	r24, 0x23	; 35
    2052:	31 f7       	brne	.-52     	; 0x2020 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	28 2f       	mov	r18, r24
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	8a 81       	ldd	r24, Y+2	; 0x02
    205c:	9b 81       	ldd	r25, Y+3	; 0x03
    205e:	fc 01       	movw	r30, r24
    2060:	e2 0f       	add	r30, r18
    2062:	f3 1f       	adc	r31, r19
    2064:	10 82       	st	Z, r1
}
    2066:	0f 90       	pop	r0
    2068:	0f 90       	pop	r0
    206a:	0f 90       	pop	r0
    206c:	cf 91       	pop	r28
    206e:	df 91       	pop	r29
    2070:	1f 91       	pop	r17
    2072:	0f 91       	pop	r16
    2074:	08 95       	ret

00002076 <__udivmodsi4>:
    2076:	a1 e2       	ldi	r26, 0x21	; 33
    2078:	1a 2e       	mov	r1, r26
    207a:	aa 1b       	sub	r26, r26
    207c:	bb 1b       	sub	r27, r27
    207e:	fd 01       	movw	r30, r26
    2080:	0d c0       	rjmp	.+26     	; 0x209c <__udivmodsi4_ep>

00002082 <__udivmodsi4_loop>:
    2082:	aa 1f       	adc	r26, r26
    2084:	bb 1f       	adc	r27, r27
    2086:	ee 1f       	adc	r30, r30
    2088:	ff 1f       	adc	r31, r31
    208a:	a2 17       	cp	r26, r18
    208c:	b3 07       	cpc	r27, r19
    208e:	e4 07       	cpc	r30, r20
    2090:	f5 07       	cpc	r31, r21
    2092:	20 f0       	brcs	.+8      	; 0x209c <__udivmodsi4_ep>
    2094:	a2 1b       	sub	r26, r18
    2096:	b3 0b       	sbc	r27, r19
    2098:	e4 0b       	sbc	r30, r20
    209a:	f5 0b       	sbc	r31, r21

0000209c <__udivmodsi4_ep>:
    209c:	66 1f       	adc	r22, r22
    209e:	77 1f       	adc	r23, r23
    20a0:	88 1f       	adc	r24, r24
    20a2:	99 1f       	adc	r25, r25
    20a4:	1a 94       	dec	r1
    20a6:	69 f7       	brne	.-38     	; 0x2082 <__udivmodsi4_loop>
    20a8:	60 95       	com	r22
    20aa:	70 95       	com	r23
    20ac:	80 95       	com	r24
    20ae:	90 95       	com	r25
    20b0:	9b 01       	movw	r18, r22
    20b2:	ac 01       	movw	r20, r24
    20b4:	bd 01       	movw	r22, r26
    20b6:	cf 01       	movw	r24, r30
    20b8:	08 95       	ret

000020ba <__prologue_saves__>:
    20ba:	2f 92       	push	r2
    20bc:	3f 92       	push	r3
    20be:	4f 92       	push	r4
    20c0:	5f 92       	push	r5
    20c2:	6f 92       	push	r6
    20c4:	7f 92       	push	r7
    20c6:	8f 92       	push	r8
    20c8:	9f 92       	push	r9
    20ca:	af 92       	push	r10
    20cc:	bf 92       	push	r11
    20ce:	cf 92       	push	r12
    20d0:	df 92       	push	r13
    20d2:	ef 92       	push	r14
    20d4:	ff 92       	push	r15
    20d6:	0f 93       	push	r16
    20d8:	1f 93       	push	r17
    20da:	cf 93       	push	r28
    20dc:	df 93       	push	r29
    20de:	cd b7       	in	r28, 0x3d	; 61
    20e0:	de b7       	in	r29, 0x3e	; 62
    20e2:	ca 1b       	sub	r28, r26
    20e4:	db 0b       	sbc	r29, r27
    20e6:	0f b6       	in	r0, 0x3f	; 63
    20e8:	f8 94       	cli
    20ea:	de bf       	out	0x3e, r29	; 62
    20ec:	0f be       	out	0x3f, r0	; 63
    20ee:	cd bf       	out	0x3d, r28	; 61
    20f0:	09 94       	ijmp

000020f2 <__epilogue_restores__>:
    20f2:	2a 88       	ldd	r2, Y+18	; 0x12
    20f4:	39 88       	ldd	r3, Y+17	; 0x11
    20f6:	48 88       	ldd	r4, Y+16	; 0x10
    20f8:	5f 84       	ldd	r5, Y+15	; 0x0f
    20fa:	6e 84       	ldd	r6, Y+14	; 0x0e
    20fc:	7d 84       	ldd	r7, Y+13	; 0x0d
    20fe:	8c 84       	ldd	r8, Y+12	; 0x0c
    2100:	9b 84       	ldd	r9, Y+11	; 0x0b
    2102:	aa 84       	ldd	r10, Y+10	; 0x0a
    2104:	b9 84       	ldd	r11, Y+9	; 0x09
    2106:	c8 84       	ldd	r12, Y+8	; 0x08
    2108:	df 80       	ldd	r13, Y+7	; 0x07
    210a:	ee 80       	ldd	r14, Y+6	; 0x06
    210c:	fd 80       	ldd	r15, Y+5	; 0x05
    210e:	0c 81       	ldd	r16, Y+4	; 0x04
    2110:	1b 81       	ldd	r17, Y+3	; 0x03
    2112:	aa 81       	ldd	r26, Y+2	; 0x02
    2114:	b9 81       	ldd	r27, Y+1	; 0x01
    2116:	ce 0f       	add	r28, r30
    2118:	d1 1d       	adc	r29, r1
    211a:	0f b6       	in	r0, 0x3f	; 63
    211c:	f8 94       	cli
    211e:	de bf       	out	0x3e, r29	; 62
    2120:	0f be       	out	0x3f, r0	; 63
    2122:	cd bf       	out	0x3d, r28	; 61
    2124:	ed 01       	movw	r28, r26
    2126:	08 95       	ret

00002128 <_exit>:
    2128:	f8 94       	cli

0000212a <__stop_program>:
    212a:	ff cf       	rjmp	.-2      	; 0x212a <__stop_program>
